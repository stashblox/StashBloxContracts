{
  "contractName": "StashBlox",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_callbackId",
          "type": "uint256"
        }
      ],
      "name": "CallbackUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_documentHash",
          "type": "uint256"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_callbacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "escrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "callCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "needLegalApproval",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "approvedByLegal",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "refused",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_config",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "callbackAutoExecuteMaxAddresses",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lumpSumTransactionFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueTransactionFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_users",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isTokenizer",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "ETHBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "acceptCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "approveCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "approveHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "authorizeMaintener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "authorizeTokenizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "averageAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "metadataHashes",
          "type": "uint256[]"
        }
      ],
      "name": "cloneToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "transactionFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "address[]",
          "name": "feesRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feesRecipientsPercentage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCall",
          "type": "uint256"
        }
      ],
      "name": "executeCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isLockedAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLockedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "isMaintener",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "isTokenizer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "lockAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "lockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "callees",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "proposeCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "refuseCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "revokeHolder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "revokeMaintener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "revokeTokenizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMax",
          "type": "uint256"
        }
      ],
      "name": "setCallbackAutoExecuteMaxAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[10]",
          "name": "proxyAddresses",
          "type": "address[10]"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transactionFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "unlockAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "unlockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "transactionFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "address[]",
          "name": "feesRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feesRecipientsPercentage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_callbackId\",\"type\":\"uint256\"}],\"name\":\"CallbackUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_documentHash\",\"type\":\"uint256\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_callbacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"escrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needLegalApproval\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"approvedByLegal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackAutoExecuteMaxAddresses\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lumpSumTransactionFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueTransactionFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTokenizer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ETHBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"acceptCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"approveCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"approveHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"authorizeMaintener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"authorizeTokenizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"averageAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"metadataHashes\",\"type\":\"uint256[]\"}],\"name\":\"cloneToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"transactionFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[]\",\"name\":\"feesRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feesRecipientsPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCall\",\"type\":\"uint256\"}],\"name\":\"executeCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isLockedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLockedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"isMaintener\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"isTokenizer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"proposeCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"refuseCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"revokeHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"revokeMaintener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"revokeTokenizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setCallbackAutoExecuteMaxAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"proxyAddresses\",\"type\":\"address[10]\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transactionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"transactionFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[]\",\"name\":\"feesRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feesRecipientsPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptCallback(uint256)\":{\"details\":\"Accept a callback\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"approveCallback(uint256)\":{\"details\":\"Approve a callback\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"approveHolder(uint256,address)\":{\"details\":\"Function to approve holder for a private token.\",\"params\":{\"holder\":\"The authorized address\",\"id\":\"the token id\"}},\"authorizeMaintener(uint256,address)\":{\"details\":\"Function to authorize an address to maintain a token.\",\"params\":{\"maintener\":\"The authorized address\"}},\"authorizeTokenizer(address)\":{\"details\":\"Function to authorize an address to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"averageAge(address,uint256)\":{\"details\":\"Function to get the average age of the token for the given address.\",\"params\":{\"account\":\"the address from where to transfer the tokens\",\"id\":\"The token ID\"},\"returns\":{\"_0\":\"average age in seconds\"}},\"balanceOf(address,uint256)\":{\"details\":\"Get the specified address' balance for token with specified ID. Attempting to query the zero account for a balance will result in a revert.\",\"params\":{\"account\":\"The address of the token holder\",\"id\":\"ID of the token\"},\"returns\":{\"_0\":\"The account's balance of the token type requested\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Get the balance of multiple account/token pairs. If any of the query accounts is the zero account, this query will revert.\",\"params\":{\"accounts\":\"The addresses of the token holders\",\"ids\":\"IDs of the tokens\"},\"returns\":{\"_0\":\"Balances for each account and token id pair\"}},\"cloneToken(uint256,uint256[],uint256[])\":{\"details\":\"Function to mint tokens in batch.\",\"params\":{\"id\":\"Identifier of the template\",\"ids\":\"list of IDs of the tokens to be minted\",\"metadataHashes\":\"list of metadata file hashes\"}},\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"createToken(address,uint256,uint256,uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)\":{\"details\":\"Function to mint an amount of a token with the given ID.\",\"params\":{\"feesRecipients\":\"list of addresses receiving transfer fees\",\"feesRecipientsPercentage\":\"list of percentage, each one for the corresponding feesRecipients\",\"id\":\"ID of the token to be minted\",\"isPrivate\":\"true if holder need approval\",\"legalAuthority\":\"address of the legal authority\",\"metadataHash\":\"Metadata file hash\",\"minHoldingForCallback\":\"minimum holding to propose a callback\",\"recipient\":\"The address that will own the minted tokens\",\"supply\":\"Amount of the token to be minted\",\"transactionFees\":\"transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]\"}},\"deposit(address)\":{\"details\":\"Function to make an ETH deposit that can be used to pay token transfer .\",\"params\":{\"to\":\"recipent address\"}},\"executeCallback(uint256,uint256)\":{\"details\":\"Accept a callback. Caller need to recall the function to continue the callback until completed.\",\"params\":{\"callbackId\":\"callback proposition ID\",\"maxCall\":\"maximal call to excute\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"The account of the Tokens\",\"operator\":\"Address of authorized operator\"},\"returns\":{\"_0\":\"True if the operator is approved, false if not\"}},\"isLockedAddress(address)\":{\"details\":\"Function to check if an address is lockec.\",\"params\":{\"addr\":\"The address to check\"}},\"isLockedToken(uint256)\":{\"details\":\"Function to check if a token is locked.\",\"params\":{\"id\":\"The token ID\"}},\"isMaintener(uint256,address)\":{\"details\":\"Function to check if an address is authorized to maintain a token.\",\"params\":{\"id\":\"the token id\",\"maintener\":\"The authorized address\"},\"returns\":{\"_0\":\"true if it's a maintener address\"}},\"isTokenizer(address)\":{\"details\":\"Function to check if an address is authorized to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"lockAddress(address)\":{\"details\":\"Function to lock an address.\",\"params\":{\"addr\":\"The address to lock\"}},\"lockToken(uint256,uint256)\":{\"details\":\"Function to lock a token.\",\"params\":{\"id\":\"The token ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proposeCallback(uint256,uint256,uint256,address[],uint256)\":{\"details\":\"Propose to buy the whole supply of a token. The proposer must hold minHoldingForCallback% of the total supply. StashBlox must approve the price with acceptCallback();\",\"params\":{\"callees\":\"list of calless. Empty list means all holders.\",\"price\":\"proposed price\",\"tokenId\":\"Token ID\"}},\"refuseCallback(uint256)\":{\"details\":\"Refuse a callback if the price is not enough.\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"revokeHolder(uint256,address)\":{\"details\":\"Function to revoke holder for a private token.\",\"params\":{\"holder\":\"The authorized address\",\"id\":\"the token id\"}},\"revokeMaintener(uint256,address)\":{\"details\":\"Function to revoke the authorization to maintain a token.\",\"params\":{\"id\":\"the token id\",\"maintener\":\"The authorized address\"}},\"revokeTokenizer(address)\":{\"details\":\"Function to revoke the authorization to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155BatchReceived` on `to` and act appropriately.\",\"params\":{\"data\":\"Data forwarded to `onERC1155Received` if `to` is a contract receiver\",\"from\":\"Source address\",\"ids\":\"IDs of each token type\",\"to\":\"Target address\",\"values\":\"Transfer amounts per token type\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.\",\"params\":{\"data\":\"Data forwarded to `onERC1155Received` if `to` is a contract receiver\",\"from\":\"Source address\",\"id\":\"ID of the token type\",\"to\":\"Target address\",\"value\":\"Transfer amount\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator. An operator is allowed to transfer all tokens of the sender on their behalf. Because an account already has operator privileges for itself, this function will revert if the account attempts to set the approval status for itself.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"address to set the approval\"}},\"setCallbackAutoExecuteMaxAddresses(uint256)\":{\"details\":\"Maximum addresses to execute automatically the callback when is accepted.\",\"params\":{\"newMax\":\"new maximum\"}},\"setProxyRegistryAddress(address[10])\":{\"details\":\"Function to update the operator whitelist\",\"params\":{\"proxyAddresses\":\"List of addresses\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `_interfaceID` and\"}},\"transactionFees(address,uint256,uint256)\":{\"details\":\"Function to get the transaction price to transfer tokens.\",\"params\":{\"account\":\"the address from where to transfer the tokens\",\"id\":\"The token ID\",\"value\":\"The amount to transfer\"},\"returns\":{\"_0\":\"transfer price\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockAddress(address)\":{\"details\":\"Function to unlock an address.\",\"params\":{\"addr\":\"The address to unlock\"}},\"unlockToken(uint256,uint256)\":{\"details\":\"Function to unlock a token.\",\"params\":{\"id\":\"The token ID\"}},\"updateToken(uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)\":{\"details\":\"Function to update a token with the given ID.\",\"params\":{\"feesRecipients\":\"list of addresses receiving transfer fees\",\"feesRecipientsPercentage\":\"list of percentage, each one for the corresponding feesRecipients\",\"id\":\"ID of the token to be updated\",\"isPrivate\":\"true if holder need approval\",\"legalAuthority\":\"address of the legal authority\",\"metadataHash\":\"Metadata file hash\",\"minHoldingForCallback\":\"minimum holding to propose a callback\",\"transactionFees\":\"transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]\"}},\"uri(uint256)\":{\"params\":{\"id\":\"Token ID\"},\"returns\":{\"_0\":\"URI string\"}},\"withdraw(address,uint256)\":{\"details\":\"Function to withdraw ETH from the contract.\",\"params\":{\"amount\":\"amount to withdraw\",\"to\":\"recipent address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol\":\"StashBlox\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol\":{\"keccak256\":\"0x843c8fc2dc143d6362cc49ec4715bb08a4dd72b04c61418108efadf70fdb1bbf\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://3a6131398c2da1de72b871bee421b3826cf8e95296cec1ac8269db2578c68db3\",\"dweb:/ipfs/QmTAuPknfbpmQDusQk8swqaZ2cUqzEQp4Po5RtMizSFofV\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155.sol\":{\"keccak256\":\"0xe0121db1d8ff46e6f422f69cb0e2d826b6b3fc701ee2af64644965ed3e527f3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://70bf80157d73b53af3e3fe94f1b995fa521bb143a44ae79b6c2d3d923a59b331\",\"dweb:/ipfs/QmNPwXgdkYJcZofamebRCqiDPtMRqhaQsyRBeqUd2841YV\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol\":{\"keccak256\":\"0x121c132f1a15fafd91c187380702cb32d60beab1a4054670efc987e36bc2b70f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://425182c1ecd27456fc2f1c3fd82444b17a13f2e4e503bb3f7b973e83d2ceb1bb\",\"dweb:/ipfs/QmU54fpZCpdGtjUAbQkr4cYikCzKKQqjS3LPNQpYpJXiA8\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Receiver.sol\":{\"keccak256\":\"0xa2e894006f84deca9f9d37735ce39044f101b5d035cb5e21242c55e52de6e881\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2444dcc76058c4d324fde1a42484f86cacaf2348faabfd334bb053c435082b64\",\"dweb:/ipfs/Qmb94fe1Y1Wqq6h9pxpCfsn58ZMdjGSmJ5hC5Ex2yB1gNm\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x1588ef316db84c168b02bc9a38926a11fae69741da7dacb4314631318b90e777\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d51ab1e9deae9cac01eb549b89a1d11410c12301933d1679bdfd5e5ab8ff691\",\"dweb:/ipfs/QmdQW8fZkocPQxNQm6wgse6k3Mqt87sS8QiQFE96U6rkGj\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC173.sol\":{\"keccak256\":\"0x7d35a40f601c5245c540eb35f11a2227389b965acdee1abab1c88c7360c10050\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9fb40310238de5d7a8b39154b1baff899f089984f62ed052ec07f86b9d5603ba\",\"dweb:/ipfs/QmQBLGwAEiAFQpJC6d61qgGDi1n93v2eWKAaRABhckNzW3\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol\":{\"keccak256\":\"0xcef4a6306ef7194030522885ee596ff70dac38d82abc2838f45d62cb114a0582\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://6f9622c5039f005af5a53d108885d6281c1a9d22c2a1aaf9c3c93f0f4cb85be8\",\"dweb:/ipfs/QmWGzMYjBd2D8kWZhH7JK7RjcQajvRgEyQFGJHeH8aSU3n\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/ChargeableTransfer.sol\":{\"keccak256\":\"0x372dcc5b4887c0aa8feb6cd17e7fb66fcad22dced7aac3837625a42f91153e38\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d0ffddca0ef536a40e97686f3a3d1e37358c24c0aa3ea36f3ef4e56b0d94b3c6\",\"dweb:/ipfs/QmQLWyqVhrb9b1sawafjQ3xHE7ZsPzUGk1d4DCEvGE26tv\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/ERC1155.sol\":{\"keccak256\":\"0x8b18d12608e7af15e32f60373d41a6d4a0e38174c070663fb5cdda02a8790539\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5124ce85a85fc32201c34e01e18fef7ed6e70ed8f89aaad561c22dca7ae0b4b2\",\"dweb:/ipfs/QmdRVkHFHGGKmej6zEejb8FKyTmD9jUNT3xE5kGri4fBsH\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Lockable.sol\":{\"keccak256\":\"0x00364407db5b4d2bd9518aaaa84492c8c10bea5992b3eb827eaf89a5a340ccfa\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7a4a3e17cc1b107a36621220f17f2dcd469eabbe69c253ea6743fbbec9889fb0\",\"dweb:/ipfs/QmfEno1Ai3ijUex6BRjcGkz8SJKrArbe6Kub3x7rXZ8Mfo\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Maintenable.sol\":{\"keccak256\":\"0x89f566b2b45db160adbfb2fe8da9a65f2385cbbcf904f03c199dbc3d625c03fd\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://261c4652ae1ca909a88839c2455653b486aae8cc248a2b4da6aa0f301d2fb398\",\"dweb:/ipfs/QmfRj76anEn31QfmBFAJmEEdx5YRa2ZWPY714ehNXe4pmD\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Mintable.sol\":{\"keccak256\":\"0x4d612c86404655accc4cc5b718bdd3de1bd0a5cca37de80e1da9abae99c99ae7\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://a9c117e797c48721addb3996a94e9346388a011ba3d4c08f38918192027c0946\",\"dweb:/ipfs/QmZAFQrxzzardakgXzm6LBmRcCBtKeyXL8iZmpoV4MhsH3\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Ownable.sol\":{\"keccak256\":\"0xa96fdae86c9a62714e0b9120f128b422968063449cba408fe582f8bcb7d18c6f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f9717005fa657ee4313d7b1f6db859d2424ae8800272123c4da00cdaf51566b\",\"dweb:/ipfs/QmUVVGNGnTV7TiU3kn3VVDPpbiWBqfSSATkN7Wdf3Eb216\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Privatizable.sol\":{\"keccak256\":\"0xd8b068c736d1b5ef364d6f73d6fef3788034d3250fb3cd9e8d44d099aaca7b52\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://fae9426d967287250027a3fb45c6499614b3365ee98debed327affa09d254d08\",\"dweb:/ipfs/Qmf8ap2iGa8UK7wSzMTxMM2tp4MaTpm5WXZCwS41Uj9ZCg\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Proxyable.sol\":{\"keccak256\":\"0xba7141abe563c21e0db0d666c72a8219382b9f96b549ba958e768a8ecd55d2c9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://21d3bde82aaf8d4adbf808d93ab1d4d1711a45d1538d71511283f51484edba36\",\"dweb:/ipfs/QmS4uYwEmabJHH3ox6MNmZKWSLhkAdqyhHqviY5bV7t7pn\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/StashBloxData.sol\":{\"keccak256\":\"0xbd07b1b7c417ae1721507cf8b235e012981d7664dfe1fb377c575c9125344bfc\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0b4bec891096af3d3d2e29fced6df95d09d2d80b8524f6c5672961abe90bff5d\",\"dweb:/ipfs/QmQvfven2xZuKBc4LnPj6QG6GDxMi1LeNYsqKHzcH2SWHm\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x0dc4de30066c07be6906b80d9e520fd774cb390e34214c2267c566f30c192eac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd2eff6112eef024b2c10eca51411b26c58766e172c26efaf49b77b06f1cbe9f\",\"dweb:/ipfs/QmSL8DnsgxrCpGAiqpxz17SVzJTD1tULFBo1iuFfnknv2z\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol\":{\"keccak256\":\"0xcc6d500a21adcca1c123ed1bf04715f8b1fa116d83b9742c3f5729d43a3f7e89\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8154509e193b9dd26c3a6cd3c413f7e2dd376a9d37458e74976e37c77c225422\",\"dweb:/ipfs/QmSUCBLGPGwRg7t9gFMvCWH6A54jSvzvHXBScpmZE5N4uq\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol\":{\"keccak256\":\"0x700249db0ed6aa2be4fc7675c9cdb5cdcc4e49abec52eefa58c2b02092784188\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4a8babf975072c842269b5cb10aedfed77307629626cc6ab6173e68462eaebb\",\"dweb:/ipfs/QmVSAHYR99a4Q6jrrSqvRxMEnD2dhNAUPLyGA9KGJGTLDL\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d336200007a565b603260005560408051808201909152601c8082527f687474703a2f2f7374617368626c6f782e636f6d2f746f6b656e732f000000006020909201918252620000689160019162000137565b5062000074336200007a565b620001d3565b6001600160a01b038116620000db576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180620054256026913960400191505060405180910390fd5b600f546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017a57805160ff1916838001178555620001aa565b82800160010185558215620001aa579182015b82811115620001aa5782518255916020019190600101906200018d565b50620001b8929150620001bc565b5090565b5b80821115620001b85760008155600101620001bd565b61524280620001e36000396000f3fe6080604052600436106102545760003560e01c80638f96f13111610139578063d1660e18116100b6578063f242432a1161007a578063f242432a14611138578063f2fde38b146111cb578063f340fa01146111fe578063f3fef3a314611224578063f8a5a07c1461125d578063fc3fcec7146113945761028b565b8063d1660e1814610f51578063d41d0aa314610f90578063d842b67314610fc9578063e985e9c51461107f578063ed70554d146110ba5761028b565b8063bba75c83116100fd578063bba75c8314610cfa578063c02f303c14610d24578063c255620a14610d57578063c40b87ae14610d81578063cba54e6014610f1e5761028b565b80638f96f13114610c02578063a22cb46514610c2c578063aba7fe8a14610c67578063b7eb5e0a14610c97578063baa3411014610cca5761028b565b80634392e577116101d25780635dd2b9a6116101965780635dd2b9a614610ac0578063759c521414610af95780637627b73214610b325780638870147b14610b655780638aeba37e14610b985780638da5cb5b14610bd15761028b565b80634392e577146106eb5780634ab0d2531461074c5780634e1273f4146108ce578063585941d514610a4e5780635dafec1b14610a875761028b565b806331d5f78c1161021957806331d5f78c1461057f57806334a90d02146105a9578063369c37e9146105dc5780633cacd7d614610606578063414ed0ce146106595761028b565b8062fdd58e1461029057806301ffc9a7146102db5780630e89341c146103235780632eb2c2d6146103c25780632ed42bf7146104eb5761028b565b3661028b57336000908152600c602052604090206001015461027690346113c4565b336000908152600c6020526040902060010155005b600080fd5b34801561029c57600080fd5b506102c9600480360360408110156102b357600080fd5b506001600160a01b038135169060200135611427565b60408051918252519081900360200190f35b3480156102e757600080fd5b5061030f600480360360208110156102fe57600080fd5b50356001600160e01b03191661149a565b604080519115158252519081900360200190f35b34801561032f57600080fd5b5061034d6004803603602081101561034657600080fd5b50356114e1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038757818101518382015260200161036f565b50505050905090810190601f1680156103b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104e9600480360360a08110156103d857600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561040b57600080fd5b82018360208201111561041d57600080fd5b803590602001918460208302840111600160201b8311171561043e57600080fd5b919390929091602081019035600160201b81111561045b57600080fd5b82018360208201111561046d57600080fd5b803590602001918460208302840111600160201b8311171561048e57600080fd5b919390929091602081019035600160201b8111156104ab57600080fd5b8201836020820111156104bd57600080fd5b803590602001918460018302840111600160201b831117156104de57600080fd5b509092509050611582565b005b3480156104f757600080fd5b50610500611830565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561054357818101518382015260200161052b565b50505050905090810190601f1680156105705780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561058b57600080fd5b506104e9600480360360208110156105a257600080fd5b50356118c6565b3480156105b557600080fd5b506104e9600480360360208110156105cc57600080fd5b50356001600160a01b0316611aa4565b3480156105e857600080fd5b506104e9600480360360208110156105ff57600080fd5b5035611b11565b34801561061257600080fd5b506106396004803603602081101561062957600080fd5b50356001600160a01b0316611b5d565b604080519315158452911515602084015282820152519081900360600190f35b34801561066557600080fd5b506106836004803603602081101561067c57600080fd5b5035611b83565b604080519b8c5260208c019a909a528a8a019890985260608a019690965260808901949094526001600160a01b0390921660a0880152151560c0870152151560e086015215156101008501521515610120840152151561014083015251908190036101600190f35b3480156106f757600080fd5b506104e9600480360361014081101561070f57600080fd5b81019080806101400190600a806020026040519081016040528092919082600a60200280828437600092019190915250919450611bf69350505050565b34801561075857600080fd5b506104e9600480360361014081101561077057600080fd5b6040805160608181018352843594602081013594810193909260a08401929091840190600390839083908082843760009201919091525091949392602081019250359050600160201b8111156107c557600080fd5b8201836020820111156107d757600080fd5b803590602001918460208302840111600160201b831117156107f857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561084757600080fd5b82018360208201111561085957600080fd5b803590602001918460208302840111600160201b8311171561087a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020810135151590604001356001600160a01b0316611c4e565b3480156108da57600080fd5b506109fe600480360360408110156108f157600080fd5b810190602081018135600160201b81111561090b57600080fd5b82018360208201111561091d57600080fd5b803590602001918460208302840111600160201b8311171561093e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561098d57600080fd5b82018360208201111561099f57600080fd5b803590602001918460208302840111600160201b831117156109c057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611d39945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610a3a578181015183820152602001610a22565b505050509050019250505060405180910390f35b348015610a5a57600080fd5b506102c960048036036040811015610a7157600080fd5b506001600160a01b038135169060200135611ebd565b348015610a9357600080fd5b5061030f60048036036040811015610aaa57600080fd5b50803590602001356001600160a01b0316611ef1565b348015610acc57600080fd5b506104e960048036036040811015610ae357600080fd5b50803590602001356001600160a01b0316611efd565b348015610b0557600080fd5b506104e960048036036040811015610b1c57600080fd5b50803590602001356001600160a01b0316611f83565b348015610b3e57600080fd5b506104e960048036036020811015610b5557600080fd5b50356001600160a01b0316612004565b348015610b7157600080fd5b506104e960048036036020811015610b8857600080fd5b50356001600160a01b031661206f565b348015610ba457600080fd5b506104e960048036036040811015610bbb57600080fd5b50803590602001356001600160a01b03166120d7565b348015610bdd57600080fd5b50610be6612155565b604080516001600160a01b039092168252519081900360200190f35b348015610c0e57600080fd5b506104e960048036036020811015610c2557600080fd5b5035612164565b348015610c3857600080fd5b506104e960048036036040811015610c4f57600080fd5b506001600160a01b038135169060200135151561239d565b348015610c7357600080fd5b506104e960048036036040811015610c8a57600080fd5b5080359060200135612453565b348015610ca357600080fd5b506104e960048036036020811015610cba57600080fd5b50356001600160a01b03166124ac565b348015610cd657600080fd5b506104e960048036036040811015610ced57600080fd5b5080359060200135612515565b348015610d0657600080fd5b5061030f60048036036020811015610d1d57600080fd5b5035612569565b348015610d3057600080fd5b5061030f60048036036020811015610d4757600080fd5b50356001600160a01b0316612574565b348015610d6357600080fd5b506104e960048036036020811015610d7a57600080fd5b503561257f565b348015610d8d57600080fd5b506104e960048036036101a0811015610da557600080fd5b60408051606081810183526001600160a01b03853516946020810135949381013593828201359360808301359391830192916101008301919060a0840190600390839083908082843760009201919091525091949392602081019250359050600160201b811115610e1557600080fd5b820183602082011115610e2757600080fd5b803590602001918460208302840111600160201b83111715610e4857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610e9757600080fd5b820183602082011115610ea957600080fd5b803590602001918460208302840111600160201b83111715610eca57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020810135151590604001356001600160a01b03166127f0565b348015610f2a57600080fd5b5061030f60048036036020811015610f4157600080fd5b50356001600160a01b0316612891565b348015610f5d57600080fd5b506102c960048036036060811015610f7457600080fd5b506001600160a01b03813516906020810135906040013561289c565b348015610f9c57600080fd5b506104e960048036036040811015610fb357600080fd5b50803590602001356001600160a01b03166128b1565b6104e9600480360360a0811015610fdf57600080fd5b81359160208101359160408201359190810190608081016060820135600160201b81111561100c57600080fd5b82018360208201111561101e57600080fd5b803590602001918460208302840111600160201b8311171561103f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061292c915050565b34801561108b57600080fd5b5061030f600480360360408110156110a257600080fd5b506001600160a01b0381358116916020013516612bb8565b3480156110c657600080fd5b506110e4600480360360208110156110dd57600080fd5b5035612bf9565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a08601526001600160a01b031660c0850152151560e0840152151561010083015251908190036101200190f35b6104e9600480360360a081101561114e57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561118d57600080fd5b82018360208201111561119f57600080fd5b803590602001918460018302840111600160201b831117156111c057600080fd5b509092509050612c55565b3480156111d757600080fd5b506104e9600480360360208110156111ee57600080fd5b50356001600160a01b0316612d9a565b6104e96004803603602081101561121457600080fd5b50356001600160a01b0316612ded565b34801561123057600080fd5b506104e96004803603604081101561124757600080fd5b506001600160a01b038135169060200135612e32565b34801561126957600080fd5b506104e96004803603606081101561128057600080fd5b81359190810190604081016020820135600160201b8111156112a157600080fd5b8201836020820111156112b357600080fd5b803590602001918460208302840111600160201b831117156112d457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561132357600080fd5b82018360208201111561133557600080fd5b803590602001918460208302840111600160201b8311171561135657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612fa1945050505050565b3480156113a057600080fd5b506104e9600480360360408110156113b757600080fd5b5080359060200135613126565b60008282018381101561141e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60006001600160a01b03831661146e5760405162461bcd60e51b815260040180806020018281038252602b815260200180614f83602b913960400191505060405180910390fd5b506000908152600d602090815260408083206001600160a01b0394909416835260079093019052205490565b60006001600160e01b031982166301ffc9a760e01b14806114cb57506001600160e01b03198216636cdb3d1360e11b145b156114d8575060016114dc565b5060005b919050565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152606093611421939192909183018282801561156f5780601f106115445761010080835404028352916020019161156f565b820191906000526020600020905b81548152906001019060200180831161155257829003601f168201915b505050505061157d846132ea565b6133a6565b8483146115c05760405162461bcd60e51b815260040180806020018281038252602e8152602001806151ae602e913960400191505060405180910390fd5b6001600160a01b0387166116055760405162461bcd60e51b81526004018080602001828103825260288152602001806150146028913960400191505060405180910390fd5b6001600160a01b03881633148061162757506116218833612bb8565b15156001145b6116625760405162461bcd60e51b81526004018080602001828103825260378152602001806151776037913960400191505060405180910390fd5b6116d1888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a9182918501908490808284376000920191909152506134b092505050565b866001600160a01b0316886001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040518080602001806020018381038352878782818152602001925060200280828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600083820152604051601f909101601f19169092018290039850909650505050505050a461182633898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525061356a92505050565b5050505050505050565b6000805460018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815293949392918301828280156118bc5780601f10611891576101008083540402835291602001916118bc565b820191906000526020600020905b81548152906001019060200180831161189f57829003601f168201915b5050505050905082565b6118ce614d9a565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b9091041615156101408201526006820180548551818602810186019096528086529194929361016086019392908301828280156119d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119b8575b505050919092525050815191925050158015906119fa575080516119fa903361375b565b8015611a095750610100810151155b8015611a185750610120810151155b611a69576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420617267756d656e7473206f72207065726d697373696f6e00604482015290519081900360640190fd5b6000828152600e6020526040808220600501805460ff60a81b1916600160a81b179055518391600080516020614ff483398151915291a25050565b611aac61377f565b611aeb576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805461ff001916610100179055565b611b1961377f565b611b58576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b600055565b600c602052600090815260409020805460019091015460ff808316926101009004169083565b600e6020526000908152604090208054600182015460028301546003840154600485015460059095015493949293919290916001600160a01b0381169060ff600160a01b8204811691600160a81b8104821691600160b01b8204811691600160b81b8104821691600160c01b909104168b565b611bfe61377f565b611c3d576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b611c4a600282600a614e0e565b5050565b87611c598133613790565b611c98576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b6000898152600d6020526040902054611ce8576040805162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb7103a37b5b2b760991b604482015290519081900360640190fd5b611cf889898989898989896137ca565b6040805189815290518a917f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd919081900360200190a2505050505050505050565b60608151835114611d7b5760405162461bcd60e51b81526004018080602001828103825260308152602001806150686030913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015611d9557600080fd5b50604051908082528060200260200182016040528015611dbf578160200160208202803683370190505b50905060005b8451811015611eb55760006001600160a01b0316858281518110611de557fe5b60200260200101516001600160a01b03161415611e335760405162461bcd60e51b81526004018080602001828103825260348152602001806150ce6034913960400191505060405180910390fd5b600d6000858381518110611e4357fe5b602002602001015181526020019081526020016000206007016000868381518110611e6a57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000154828281518110611ea257fe5b6020908102919091010152600101611dc5565b509392505050565b6000818152600d602090815260408083206001600160a01b038616845260070190915281206001015461141e90429061396e565b600061141e8383613790565b81611f088133613790565b611f47576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b506000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805462ff0000191662010000179055565b81611f8e8133613790565b611fcd576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b506000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805462ff000019169055565b61200c61377f565b61204b576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805460ff19166001179055565b61207761377f565b6120b6576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805460ff19169055565b6120df61377f565b61211e576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805460ff19166001179055565b600f546001600160a01b031690565b61216c614d9a565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561227457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612256575b505050919092525050815191925050158015906122945750610100810151155b80156122a35750610120810151155b80156122e8575080516122b69033613790565b806122c8575080516122c8903361375b565b806122e857508060a001516001600160a01b0316336001600160a01b0316145b612339576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420617267756d656e7473206f72207065726d697373696f6e00604482015290519081900360640190fd5b6000828152600e60209081526040808320600501805460ff60b01b1916600160b01b1790558381015160a08501516001600160a01b03168452600c9092528083206001018054909201909155518391600080516020614ff483398151915291a25050565b336001600160a01b03831614156123e55760405162461bcd60e51b815260040180806020018281038252602c81526020018061503c602c913960400191505060405180910390fd5b3360008181526010602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b8161245e8133613790565b61249d576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b6124a783836139b0565b505050565b6124b461377f565b6124f3576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805461ff0019169055565b816125208133613790565b61255f576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b6124a78383613a06565b600061142182613a62565b600061142182613a81565b612587614d9a565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561268f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612671575b505050919092525050815191925050158015906126b3575080516126b39033613790565b80156126cc57508060c0015115806126cc57508060e001515b80156126db5750610100810151155b80156126ea5750610120810151155b8015612711575061270981600001518260200151836101600151613aab565b816040015110155b61274c5760405162461bcd60e51b81526004018080602001828103825260348152602001806151236034913960400191505060405180910390fd5b6000828152600e6020526040808220600501805460ff60b81b1916600160b81b179055518391600080516020614ff483398151915291a261016081015151156127a45761279f8282610160015151613b62565b611c4a565b6000805482518252600d602052604090912060080154116127de5780516000908152600d602052604090206008015461279f908390613b62565b611c4a81600001518260800151613a06565b6127f933613a81565b612838576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b61284b8b8b8b8b8b8b8b8b8b8b8b613dff565b604080518b8152602081018b905281516001600160a01b038e16926000923392600080516020614f63833981519152929181900390910190a45050505050505050505050565b600061142182613f68565b60006128a9848484613f8b565b949350505050565b6128b961377f565b6128f8576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805460ff19169055565b6000858152600e602052604090205415801561295557506000848152600d602052604090205415155b801561296b5750612967848484613aab565b3410155b801561297a5750600054825111155b6129cb576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420617267756d656e7473206f722076616c7565000000000000604482015290519081900360640190fd5b6000848152600d60205260408120600481015490546129f791612710916129f19161416d565b906141c6565b905060405180610180016040528086815260200185815260200134815260200160008152602001838152602001336001600160a01b031681526020018560001480612a5d57506000878152600d6020908152604080832033845260070190915290205483115b80612a69575060008551115b151581526000602080830182905260408084018390526060808501849052608080860185905260a09586018a90528c8552600e8452938290208651815586840151600182015591860151600283015585015160038201559184015160048301559183015160058201805460c086015160e08701516101008801516101208901516101408a01511515600160c01b0260ff60c01b19911515600160b81b0260ff60b81b19931515600160b01b0260ff60b01b19951515600160a81b0260ff60a81b19971515600160a01b0260ff60a01b196001600160a01b03909c166001600160a01b0319909a16999099179a909a16979097179590951697909717929092169390931792909216171691909117905561016083015180519192612b9492600685019290910190614e66565b5050604051879150600080516020614ff483398151915290600090a2505050505050565b6000612bc48383614208565b8061141e5750506001600160a01b03918216600090815260106020908152604080832093909416825291909152205460ff1690565b600d60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494959394929391929091906001600160a01b0381169060ff600160a01b8204811691600160a81b90041689565b6001600160a01b038516612c9a5760405162461bcd60e51b81526004018080602001828103825260288152602001806150146028913960400191505060405180910390fd5b6001600160a01b038616331480612cbc5750612cb68633612bb8565b15156001145b612cf75760405162461bcd60e51b81526004018080602001828103825260378152602001806151776037913960400191505060405180910390fd5b612d03868686866142ef565b846001600160a01b0316866001600160a01b0316336001600160a01b0316600080516020614f638339815191528787604051808381526020018281526020019250505060405180910390a4612d92338787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061436792505050565b505050505050565b612da261377f565b612de1576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b612dea816144dc565b50565b6001600160a01b0381166000908152600c6020526040902060010154612e1390346113c4565b6001600160a01b039091166000908152600c6020526040902060010155565b612e3a61377f565b612e79576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b0382166000908152600c6020526040902060010154811115612ee0576040805162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612f2b576040519150601f19603f3d011682016040523d82523d6000602084013e612f30565b606091505b5050905080612f7a576040805162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b604482015290519081900360640190fd5b506001600160a01b039091166000908152600c602052604090206001018054919091039055565b612faa33613a81565b612fe9576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b6000838152600d602052604090205415801590613007575080518251145b61304c576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b60005b8251811015613120576130898484838151811061306857fe5b602002602001015184848151811061307c57fe5b602002602001015161457d565b6000848152600d6020526040812060080180549091906130a557fe5b600091825260208220015484516001600160a01b0390911691903390600080516020614f63833981519152908790869081106130dd57fe5b6020026020010151600d60008a815260200190815260200160002060000154604051808381526020018281526020019250505060405180910390a460010161304f565b50505050565b61312e614d9a565b6000838152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561323657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613218575b5050509190925250508151919250501580159061325a575061012081015115156001145b80156132695750610140810151155b6132ad576040805162461bcd60e51b815260206004820152601060248201526f496e76616c69642063616c6c6261636b60801b604482015290519081900360640190fd5b6132b78383613b62565b6000838152600e6020526040902060050154600160c01b900460ff16156124a7576124a7816000015182608001516139b0565b60606000825b80156133065760019190910190601090046132f0565b60608267ffffffffffffffff8111801561331f57600080fd5b506040519080825280601f01601f19166020018201604052801561334a576020820181803683370190505b50905060005b8381101561339d576010860692506133678361471a565b826001838703038151811061337857fe5b60200101906001600160f81b031916908160001a905350601086049550600101613350565b50949350505050565b805182516060918491849184910167ffffffffffffffff811180156133ca57600080fd5b506040519080825280601f01601f1916602001820160405280156133f5576020820181803683370190505b509050806000805b855181101561344e5785818151811061341257fe5b602001015160f81c60f81b83838060010194508151811061342f57fe5b60200101906001600160f81b031916908160001a9053506001016133fd565b5060005b84518110156134a35784818151811061346757fe5b602001015160f81c60f81b83838060010194508151811061348457fe5b60200101906001600160f81b031916908160001a905350600101613452565b5090979650505050505050565b60008034116134da576001600160a01b0385166000908152600c60205260409020600101546134dc565b345b905060005b83518110156135585761354e61351f87878785815181106134fe57fe5b602002602001015187868151811061351257fe5b602002602001015161475e565b60408051808201909152601081526f092dce6eaccccd2c6d2cadce8408aa8960831b60208201528491906147b3565b91506001016134e1565b50613563858261484a565b5050505050565b61357c846001600160a01b03166148cb565b15612d925763bc197c8160e01b6001600160e01b031916846001600160a01b031663bc197c8188888787876040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561361c578181015183820152602001613604565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561365b578181015183820152602001613643565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561369757818101518382015260200161367f565b50505050905090810190601f1680156136c45780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156136e957600080fd5b505af11580156136fd573d6000803e3d6000fd5b505050506040513d602081101561371357600080fd5b50516001600160e01b03191614612d925760405162461bcd60e51b81526004018080602001828103825260368152602001806150986036913960400191505060405180910390fd5b6000918252600d6020526040909120600601546001600160a01b0391821691161490565b600f546001600160a01b0316331490565b6000828152600d602090815260408083206001600160a01b038516845260070190915281206002015460ff168061141e575061141e61377f565b6000805b85518110156137fa578581815181106137e357fe5b6020026020010151820191508060010190506137ce565b506000865111801561380a575060015b8015613817575080612710145b8015613824575061271084105b613869576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b6000898152600d60209081526040808320600581018c90558a516002808301919091558b840151600383015582518084018452428152928c015183850152600b9091018054600181018255908552929093206138c9939283020191614eba565b506000898152600d6020908152604090912087516138ef92600990920191890190614e66565b506000898152600d60209081526040909120865161391592600a90920191880190614ef4565b50506000978852600d602052604090972060048101929092556006909101805460ff60a01b1916600160a01b92151592909202919091176001600160a01b0319166001600160a01b039096169590951790945550505050565b600061141e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506147b3565b6000828152600d6020908152604091829020600601805460ff60a81b191690558151838152915184927f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd92908290030190a25050565b6000828152600d6020908152604091829020600601805460ff60a81b1916600160a81b1790558151838152915184927f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd92908290030190a25050565b6000908152600d6020526040902060060154600160a81b900460ff1690565b6001600160a01b0381166000908152600c602052604081205460ff1680611421575061142161377f565b80516000908190613aec576000858152600d60208181526040808420338552600781018352908420549389905291905254613ae59161396e565b9050613b4f565b60005b8351811015613b4d57600d60008781526020019081526020016000206007016000858381518110613b1c57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020549190910190600101613aef565b505b613b59818561416d565b95945050505050565b6000828152600e602052604090208054600690910154606090613b95576000828152600d60205260409020600801613ba7565b6000848152600e602052604090206006015b805480602002602001604051908101604052809291908181526020018280548015613bfb57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613bdd575b505083516000898152600e60205260408120600301549596506000199091019493509150508582018311613c2f5782613c33565b8582015b90506000825b828111613d7b576000868281518110613c4e57fe5b60209081029190910181015160008a8152600d835260408082206001600160a01b0384168352600701909352919091205490915015613d72576000888152600d602090815260408083206001600160a01b0385168085526007909101808452828520548f8652600e855292852060010154919094529290915293840193613cd49161416d565b6001600160a01b038083166000818152600c6020908152604080832060010180549096019095558e8252600e8152848220600501548d8352600d82528583208484526007018252918590205485518e8152918201528451919093169391923392600080516020614f6383398151915292918290030190a46000888152600d602090815260408083206001600160a01b03851684526007019091528120555b50600101613c39565b506000888152600e6020526040902060050154613da2906001600160a01b03168783614902565b6000888152600e6020526040902060030182905583821415611826576000888152600e6020526040808220600501805460ff60c01b1916600160c01b179055518991600080516020614ff483398151915291a25050505050505050565b60008a8152600d6020526040902054158015613e1b5750600089115b613e60576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b88600d60008c81526020019081526020016000206000018190555087600d60008c8152602001908152602001600020600101819055506001600d60008c81526020019081526020016000206007016000336001600160a01b03166001600160a01b0316815260200190815260200160002060020160006101000a81548160ff0219169083151502179055506001600d60008c815260200190815260200160002060070160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060020160026101000a81548160ff021916908315150217905550613f508a888888888888886137ca565b613f5b8b8b8b614902565b5050505050505050505050565b6001600160a01b03166000908152600c6020526040902054610100900460ff1690565b6000828152600d60205260408120600b015481904290600019015b6000868152600d60205260408120600b01805483908110613fc357fe5b60009182526020822060029091020101546000888152600d60205260408120600b018054929350909184908110613ff657fe5b906000526020600020906002020160016002811061401057fe5b01546000898152600d602090815260408083206001600160a01b038e1684526007019091528120600101549192509083116140ad576000898152600d602090815260408083206001600160a01b038e1684526007019091529020600101546140829062015180906129f190889061396e565b90508061408d575060015b6140a18861409b838561416d565b9061416d565b860195505050506140ec565b6140be620151806129f1878661396e565b9050806140c9575060015b91935083916140dc8861409b838561416d565b9095019450505060001901613fa6565b506000858152600d602052604090206001015461410d908390600a0a6141c6565b6000868152600d602052604081206003015491935090614138906305f5e100906129f190889061416d565b6000878152600d60205260409020600201549091506141629061415b90836113c4565b84906113c4565b979650505050505050565b60008261417c57506000611421565b8282028284828161418957fe5b041461141e5760405162461bcd60e51b81526004018080602001828103825260218152602001806151026021913960400191505060405180910390fd5b600061141e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506149ab565b6000805b600a8110156142e5576000600282600a811061422457fe5b01546001600160a01b0316146142dd576000600282600a811061424357fe5b01546040805163c455279160e01b81526001600160a01b0388811660048301529151928216935090861691839163c4552791916024808301926020929190829003018186803b15801561429557600080fd5b505afa1580156142a9573d6000803e3d6000fd5b505050506040513d60208110156142bf57600080fd5b50516001600160a01b031614156142db57600192505050611421565b505b60010161420c565b5060009392505050565b6000803411614319576001600160a01b0385166000908152600c602052604090206001015461431b565b345b905061435b61432c8686868661475e565b60408051808201909152601081526f092dce6eaccccd2c6d2cadce8408aa8960831b60208201528391906147b3565b9050613563858261484a565b614379846001600160a01b03166148cb565b15612d925763f23a6e6160e01b6001600160e01b031916846001600160a01b031663f23a6e6188888787876040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561441a578181015183820152602001614402565b50505050905090810190601f1680156144475780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561446a57600080fd5b505af115801561447e573d6000803e3d6000fd5b505050506040513d602081101561449457600080fd5b50516001600160e01b03191614612d925760405162461bcd60e51b81526004018080602001828103825260318152602001806151dc6031913960400191505060405180910390fd5b6001600160a01b0381166145215760405162461bcd60e51b8152600401808060200182810382526026815260200180614fce6026913960400191505060405180910390fd5b600f546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000838152600d6020526040812060080180546124a7929061459b57fe5b6000918252602080832090910154868352600d8083526040808520805460018201548351606081018552600284015481526003840154818901528c895294909652600b90910180546001600160a01b03909516968a96929592948a94909390840192919061460557fe5b906000526020600020906002020160016002811061461f57fe5b0154905260008a8152600d60209081526040918290206009018054835181840281018401909452808452909183018282801561468457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614666575b50505060008d8152600d6020908152604091829020600a01805483518184028101840190945280845292945092508301828280156146e157602002820191906000526020600020905b8154815260200190600101908083116146cd575b50505060008e8152600d60205260409020600481015460069091015490925060ff600160a01b82041691506001600160a01b0316613dff565b600060098260ff161161473457506030810160f81b6114dc565b8160ff16600a1115801561474c5750600f8260ff1611155b1561028b57506057810160f81b6114dc565b600061476c85858585614a10565b156147a7576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b613b5985858585614a48565b600081848411156148425760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156148075781810151838201526020016147ef565b50505050905090810190601f1680156148345780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60003411801561485a5750600081115b156148a6576001600160a01b0382166000908152600c602052604090206001015461488590826113c4565b6001600160a01b0383166000908152600c6020526040902060010155611c4a565b34611c4a576001600160a01b03919091166000908152600c6020526040902060010155565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906128a95750141592915050565b6000828152600d6020526040902060060154600160a01b900460ff16158061495857506000828152600d602090815260408083206001600160a01b038716845260070190915290206002015462010000900460ff165b6149a0576040805162461bcd60e51b81526020600482015260146024820152731059191c995cdcc81b9bdd08185c1c1c9bdd995960621b604482015290519081900360640190fd5b6124a7838383614b9c565b600081836149fa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156148075781810151838201526020016147ef565b506000838581614a0657fe5b0495945050505050565b6000614a1b83613a62565b80614a2a5750614a2a85613f68565b80614a395750614a3984613f68565b80613b59575050159392505050565b6040805180820182526014815273496e73756666696369656e742062616c616e636560601b6020808301919091526000858152600d82528381206001600160a01b038916825260070190915291822054614aa39184906147b3565b6000848152600d602090815260408083206001600160a01b038a168452600701909152902055614ad4848484614902565b614adf858484613f8b565b905060005b6000848152600d602052604090206009015481101561339d576000848152600d60205260408120600901805483908110614b1a57fe5b6000918252602080832090910154878352600d90915260408220600a0180546001600160a01b0390921693509084908110614b5157fe5b6000918252602090912001549050614b6f6127106129f1868461416d565b6001600160a01b039092166000908152600c60205260409020600190810180549093019092555001614ae4565b6000828152600d602090815260408083206001600160a01b0387168452600701909152812054614bcc90836113c4565b6000848152600d602090815260408083206001600160a01b0389168452600701909152902054909150614cc9576000838152600d602090815260408083206001600160a01b0388168452600701909152902060020154610100900460ff16614c98576001600160a01b0384166000818152600c6020908152604080832060020180546001818101835591855283852001889055878452600d83529083206008810180549283018155845282842090910180546001600160a01b0319168517905592909152600790910190525b6000838152600d602090815260408083206001600160a01b0388168452600701909152902042600190910155614d6a565b6000838152600d602090815260408083206001600160a01b0388168452600701909152812060010154614cfd90429061396e565b6000858152600d602090815260408083206001600160a01b038a16845260070190915281205491925090614d379084906129f1908561416d565b6000868152600d602090815260408083206001600160a01b038b1684526007019091529020429190910360019091015550505b6000928352600d602090815260408085206001600160a01b03909616855260079095019052929091209190915550565b604051806101800160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600015158152602001600015158152602001600015158152602001600015158152602001600015158152602001606081525090565b82600a8101928215614e56579160200282015b82811115614e5657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614e21565b50614e62929150614f2e565b5090565b828054828255906000526020600020908101928215614e565791602002820182811115614e5657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614e21565b8260028101928215614ee8579160200282015b82811115614ee8578251825591602001919060010190614ecd565b50614e62929150614f4d565b828054828255906000526020600020908101928215614ee85791602002820182811115614ee8578251825591602001919060010190614ecd565b5b80821115614e625780546001600160a01b0319168155600101614f2f565b5b80821115614e625760008155600101614f4e56fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373496e73756666696369656e74207065726d697373696f6e0000000000000000004f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736ce984c7277c5fe8f47fdf17245300ed19587e3bc1041342d79726b2b2f1dc0b455243313135353a207461726765742061646472657373206d757374206265206e6f6e2d7a65726f455243313135353a2063616e6e6f742073657420617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420494473206d75737420686176652073616d65206c656e67746873455243313135353a20676f7420756e6b6e6f776e2076616c75652066726f6d206f6e4552433131353542617463685265636569766564455243313135353a20736f6d65206164647265737320696e2062617463682062616c616e6365207175657279206973207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e73756666696369656e742063616c6c6261636b2c207065726d697373696f6e206f7220657363726f77656420616d6f756e744f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572455243313135353a206e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e7366657273455243313135353a2049447320616e642076616c756573206d75737420686176652073616d65206c656e67746873455243313135353a20676f7420756e6b6e6f776e2076616c75652066726f6d206f6e455243313135355265636569766564a26469706673582212208a2050fc12334a0f46a6672e3bf87b9161c80be5fe7e641c5dca8ea2ce40033b64736f6c634300070100334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
  "deployedBytecode": "0x6080604052600436106102545760003560e01c80638f96f13111610139578063d1660e18116100b6578063f242432a1161007a578063f242432a14611138578063f2fde38b146111cb578063f340fa01146111fe578063f3fef3a314611224578063f8a5a07c1461125d578063fc3fcec7146113945761028b565b8063d1660e1814610f51578063d41d0aa314610f90578063d842b67314610fc9578063e985e9c51461107f578063ed70554d146110ba5761028b565b8063bba75c83116100fd578063bba75c8314610cfa578063c02f303c14610d24578063c255620a14610d57578063c40b87ae14610d81578063cba54e6014610f1e5761028b565b80638f96f13114610c02578063a22cb46514610c2c578063aba7fe8a14610c67578063b7eb5e0a14610c97578063baa3411014610cca5761028b565b80634392e577116101d25780635dd2b9a6116101965780635dd2b9a614610ac0578063759c521414610af95780637627b73214610b325780638870147b14610b655780638aeba37e14610b985780638da5cb5b14610bd15761028b565b80634392e577146106eb5780634ab0d2531461074c5780634e1273f4146108ce578063585941d514610a4e5780635dafec1b14610a875761028b565b806331d5f78c1161021957806331d5f78c1461057f57806334a90d02146105a9578063369c37e9146105dc5780633cacd7d614610606578063414ed0ce146106595761028b565b8062fdd58e1461029057806301ffc9a7146102db5780630e89341c146103235780632eb2c2d6146103c25780632ed42bf7146104eb5761028b565b3661028b57336000908152600c602052604090206001015461027690346113c4565b336000908152600c6020526040902060010155005b600080fd5b34801561029c57600080fd5b506102c9600480360360408110156102b357600080fd5b506001600160a01b038135169060200135611427565b60408051918252519081900360200190f35b3480156102e757600080fd5b5061030f600480360360208110156102fe57600080fd5b50356001600160e01b03191661149a565b604080519115158252519081900360200190f35b34801561032f57600080fd5b5061034d6004803603602081101561034657600080fd5b50356114e1565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561038757818101518382015260200161036f565b50505050905090810190601f1680156103b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104e9600480360360a08110156103d857600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561040b57600080fd5b82018360208201111561041d57600080fd5b803590602001918460208302840111600160201b8311171561043e57600080fd5b919390929091602081019035600160201b81111561045b57600080fd5b82018360208201111561046d57600080fd5b803590602001918460208302840111600160201b8311171561048e57600080fd5b919390929091602081019035600160201b8111156104ab57600080fd5b8201836020820111156104bd57600080fd5b803590602001918460018302840111600160201b831117156104de57600080fd5b509092509050611582565b005b3480156104f757600080fd5b50610500611830565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561054357818101518382015260200161052b565b50505050905090810190601f1680156105705780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561058b57600080fd5b506104e9600480360360208110156105a257600080fd5b50356118c6565b3480156105b557600080fd5b506104e9600480360360208110156105cc57600080fd5b50356001600160a01b0316611aa4565b3480156105e857600080fd5b506104e9600480360360208110156105ff57600080fd5b5035611b11565b34801561061257600080fd5b506106396004803603602081101561062957600080fd5b50356001600160a01b0316611b5d565b604080519315158452911515602084015282820152519081900360600190f35b34801561066557600080fd5b506106836004803603602081101561067c57600080fd5b5035611b83565b604080519b8c5260208c019a909a528a8a019890985260608a019690965260808901949094526001600160a01b0390921660a0880152151560c0870152151560e086015215156101008501521515610120840152151561014083015251908190036101600190f35b3480156106f757600080fd5b506104e9600480360361014081101561070f57600080fd5b81019080806101400190600a806020026040519081016040528092919082600a60200280828437600092019190915250919450611bf69350505050565b34801561075857600080fd5b506104e9600480360361014081101561077057600080fd5b6040805160608181018352843594602081013594810193909260a08401929091840190600390839083908082843760009201919091525091949392602081019250359050600160201b8111156107c557600080fd5b8201836020820111156107d757600080fd5b803590602001918460208302840111600160201b831117156107f857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561084757600080fd5b82018360208201111561085957600080fd5b803590602001918460208302840111600160201b8311171561087a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020810135151590604001356001600160a01b0316611c4e565b3480156108da57600080fd5b506109fe600480360360408110156108f157600080fd5b810190602081018135600160201b81111561090b57600080fd5b82018360208201111561091d57600080fd5b803590602001918460208302840111600160201b8311171561093e57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561098d57600080fd5b82018360208201111561099f57600080fd5b803590602001918460208302840111600160201b831117156109c057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611d39945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610a3a578181015183820152602001610a22565b505050509050019250505060405180910390f35b348015610a5a57600080fd5b506102c960048036036040811015610a7157600080fd5b506001600160a01b038135169060200135611ebd565b348015610a9357600080fd5b5061030f60048036036040811015610aaa57600080fd5b50803590602001356001600160a01b0316611ef1565b348015610acc57600080fd5b506104e960048036036040811015610ae357600080fd5b50803590602001356001600160a01b0316611efd565b348015610b0557600080fd5b506104e960048036036040811015610b1c57600080fd5b50803590602001356001600160a01b0316611f83565b348015610b3e57600080fd5b506104e960048036036020811015610b5557600080fd5b50356001600160a01b0316612004565b348015610b7157600080fd5b506104e960048036036020811015610b8857600080fd5b50356001600160a01b031661206f565b348015610ba457600080fd5b506104e960048036036040811015610bbb57600080fd5b50803590602001356001600160a01b03166120d7565b348015610bdd57600080fd5b50610be6612155565b604080516001600160a01b039092168252519081900360200190f35b348015610c0e57600080fd5b506104e960048036036020811015610c2557600080fd5b5035612164565b348015610c3857600080fd5b506104e960048036036040811015610c4f57600080fd5b506001600160a01b038135169060200135151561239d565b348015610c7357600080fd5b506104e960048036036040811015610c8a57600080fd5b5080359060200135612453565b348015610ca357600080fd5b506104e960048036036020811015610cba57600080fd5b50356001600160a01b03166124ac565b348015610cd657600080fd5b506104e960048036036040811015610ced57600080fd5b5080359060200135612515565b348015610d0657600080fd5b5061030f60048036036020811015610d1d57600080fd5b5035612569565b348015610d3057600080fd5b5061030f60048036036020811015610d4757600080fd5b50356001600160a01b0316612574565b348015610d6357600080fd5b506104e960048036036020811015610d7a57600080fd5b503561257f565b348015610d8d57600080fd5b506104e960048036036101a0811015610da557600080fd5b60408051606081810183526001600160a01b03853516946020810135949381013593828201359360808301359391830192916101008301919060a0840190600390839083908082843760009201919091525091949392602081019250359050600160201b811115610e1557600080fd5b820183602082011115610e2757600080fd5b803590602001918460208302840111600160201b83111715610e4857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610e9757600080fd5b820183602082011115610ea957600080fd5b803590602001918460208302840111600160201b83111715610eca57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020810135151590604001356001600160a01b03166127f0565b348015610f2a57600080fd5b5061030f60048036036020811015610f4157600080fd5b50356001600160a01b0316612891565b348015610f5d57600080fd5b506102c960048036036060811015610f7457600080fd5b506001600160a01b03813516906020810135906040013561289c565b348015610f9c57600080fd5b506104e960048036036040811015610fb357600080fd5b50803590602001356001600160a01b03166128b1565b6104e9600480360360a0811015610fdf57600080fd5b81359160208101359160408201359190810190608081016060820135600160201b81111561100c57600080fd5b82018360208201111561101e57600080fd5b803590602001918460208302840111600160201b8311171561103f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061292c915050565b34801561108b57600080fd5b5061030f600480360360408110156110a257600080fd5b506001600160a01b0381358116916020013516612bb8565b3480156110c657600080fd5b506110e4600480360360208110156110dd57600080fd5b5035612bf9565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a08601526001600160a01b031660c0850152151560e0840152151561010083015251908190036101200190f35b6104e9600480360360a081101561114e57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b81111561118d57600080fd5b82018360208201111561119f57600080fd5b803590602001918460018302840111600160201b831117156111c057600080fd5b509092509050612c55565b3480156111d757600080fd5b506104e9600480360360208110156111ee57600080fd5b50356001600160a01b0316612d9a565b6104e96004803603602081101561121457600080fd5b50356001600160a01b0316612ded565b34801561123057600080fd5b506104e96004803603604081101561124757600080fd5b506001600160a01b038135169060200135612e32565b34801561126957600080fd5b506104e96004803603606081101561128057600080fd5b81359190810190604081016020820135600160201b8111156112a157600080fd5b8201836020820111156112b357600080fd5b803590602001918460208302840111600160201b831117156112d457600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561132357600080fd5b82018360208201111561133557600080fd5b803590602001918460208302840111600160201b8311171561135657600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612fa1945050505050565b3480156113a057600080fd5b506104e9600480360360408110156113b757600080fd5b5080359060200135613126565b60008282018381101561141e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60006001600160a01b03831661146e5760405162461bcd60e51b815260040180806020018281038252602b815260200180614f83602b913960400191505060405180910390fd5b506000908152600d602090815260408083206001600160a01b0394909416835260079093019052205490565b60006001600160e01b031982166301ffc9a760e01b14806114cb57506001600160e01b03198216636cdb3d1360e11b145b156114d8575060016114dc565b5060005b919050565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152606093611421939192909183018282801561156f5780601f106115445761010080835404028352916020019161156f565b820191906000526020600020905b81548152906001019060200180831161155257829003601f168201915b505050505061157d846132ea565b6133a6565b8483146115c05760405162461bcd60e51b815260040180806020018281038252602e8152602001806151ae602e913960400191505060405180910390fd5b6001600160a01b0387166116055760405162461bcd60e51b81526004018080602001828103825260288152602001806150146028913960400191505060405180910390fd5b6001600160a01b03881633148061162757506116218833612bb8565b15156001145b6116625760405162461bcd60e51b81526004018080602001828103825260378152602001806151776037913960400191505060405180910390fd5b6116d1888888888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808c0282810182019093528b82529093508b92508a9182918501908490808284376000920191909152506134b092505050565b866001600160a01b0316886001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb898989896040518080602001806020018381038352878782818152602001925060200280828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600083820152604051601f909101601f19169092018290039850909650505050505050a461182633898989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525050604080516020601f8c018190048102820181019092528a815292508a915089908190840183828082843760009201919091525061356a92505050565b5050505050505050565b6000805460018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815293949392918301828280156118bc5780601f10611891576101008083540402835291602001916118bc565b820191906000526020600020905b81548152906001019060200180831161189f57829003601f168201915b5050505050905082565b6118ce614d9a565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b9091041615156101408201526006820180548551818602810186019096528086529194929361016086019392908301828280156119d657602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119b8575b505050919092525050815191925050158015906119fa575080516119fa903361375b565b8015611a095750610100810151155b8015611a185750610120810151155b611a69576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420617267756d656e7473206f72207065726d697373696f6e00604482015290519081900360640190fd5b6000828152600e6020526040808220600501805460ff60a81b1916600160a81b179055518391600080516020614ff483398151915291a25050565b611aac61377f565b611aeb576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805461ff001916610100179055565b611b1961377f565b611b58576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b600055565b600c602052600090815260409020805460019091015460ff808316926101009004169083565b600e6020526000908152604090208054600182015460028301546003840154600485015460059095015493949293919290916001600160a01b0381169060ff600160a01b8204811691600160a81b8104821691600160b01b8204811691600160b81b8104821691600160c01b909104168b565b611bfe61377f565b611c3d576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b611c4a600282600a614e0e565b5050565b87611c598133613790565b611c98576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b6000898152600d6020526040902054611ce8576040805162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb7103a37b5b2b760991b604482015290519081900360640190fd5b611cf889898989898989896137ca565b6040805189815290518a917f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd919081900360200190a2505050505050505050565b60608151835114611d7b5760405162461bcd60e51b81526004018080602001828103825260308152602001806150686030913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015611d9557600080fd5b50604051908082528060200260200182016040528015611dbf578160200160208202803683370190505b50905060005b8451811015611eb55760006001600160a01b0316858281518110611de557fe5b60200260200101516001600160a01b03161415611e335760405162461bcd60e51b81526004018080602001828103825260348152602001806150ce6034913960400191505060405180910390fd5b600d6000858381518110611e4357fe5b602002602001015181526020019081526020016000206007016000868381518110611e6a57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000154828281518110611ea257fe5b6020908102919091010152600101611dc5565b509392505050565b6000818152600d602090815260408083206001600160a01b038616845260070190915281206001015461141e90429061396e565b600061141e8383613790565b81611f088133613790565b611f47576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b506000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805462ff0000191662010000179055565b81611f8e8133613790565b611fcd576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b506000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805462ff000019169055565b61200c61377f565b61204b576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805460ff19166001179055565b61207761377f565b6120b6576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805460ff19169055565b6120df61377f565b61211e576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805460ff19166001179055565b600f546001600160a01b031690565b61216c614d9a565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561227457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612256575b505050919092525050815191925050158015906122945750610100810151155b80156122a35750610120810151155b80156122e8575080516122b69033613790565b806122c8575080516122c8903361375b565b806122e857508060a001516001600160a01b0316336001600160a01b0316145b612339576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420617267756d656e7473206f72207065726d697373696f6e00604482015290519081900360640190fd5b6000828152600e60209081526040808320600501805460ff60b01b1916600160b01b1790558381015160a08501516001600160a01b03168452600c9092528083206001018054909201909155518391600080516020614ff483398151915291a25050565b336001600160a01b03831614156123e55760405162461bcd60e51b815260040180806020018281038252602c81526020018061503c602c913960400191505060405180910390fd5b3360008181526010602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b8161245e8133613790565b61249d576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b6124a783836139b0565b505050565b6124b461377f565b6124f3576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805461ff0019169055565b816125208133613790565b61255f576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b6124a78383613a06565b600061142182613a62565b600061142182613a81565b612587614d9a565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561268f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612671575b505050919092525050815191925050158015906126b3575080516126b39033613790565b80156126cc57508060c0015115806126cc57508060e001515b80156126db5750610100810151155b80156126ea5750610120810151155b8015612711575061270981600001518260200151836101600151613aab565b816040015110155b61274c5760405162461bcd60e51b81526004018080602001828103825260348152602001806151236034913960400191505060405180910390fd5b6000828152600e6020526040808220600501805460ff60b81b1916600160b81b179055518391600080516020614ff483398151915291a261016081015151156127a45761279f8282610160015151613b62565b611c4a565b6000805482518252600d602052604090912060080154116127de5780516000908152600d602052604090206008015461279f908390613b62565b611c4a81600001518260800151613a06565b6127f933613a81565b612838576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b61284b8b8b8b8b8b8b8b8b8b8b8b613dff565b604080518b8152602081018b905281516001600160a01b038e16926000923392600080516020614f63833981519152929181900390910190a45050505050505050505050565b600061142182613f68565b60006128a9848484613f8b565b949350505050565b6128b961377f565b6128f8576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805460ff19169055565b6000858152600e602052604090205415801561295557506000848152600d602052604090205415155b801561296b5750612967848484613aab565b3410155b801561297a5750600054825111155b6129cb576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420617267756d656e7473206f722076616c7565000000000000604482015290519081900360640190fd5b6000848152600d60205260408120600481015490546129f791612710916129f19161416d565b906141c6565b905060405180610180016040528086815260200185815260200134815260200160008152602001838152602001336001600160a01b031681526020018560001480612a5d57506000878152600d6020908152604080832033845260070190915290205483115b80612a69575060008551115b151581526000602080830182905260408084018390526060808501849052608080860185905260a09586018a90528c8552600e8452938290208651815586840151600182015591860151600283015585015160038201559184015160048301559183015160058201805460c086015160e08701516101008801516101208901516101408a01511515600160c01b0260ff60c01b19911515600160b81b0260ff60b81b19931515600160b01b0260ff60b01b19951515600160a81b0260ff60a81b19971515600160a01b0260ff60a01b196001600160a01b03909c166001600160a01b0319909a16999099179a909a16979097179590951697909717929092169390931792909216171691909117905561016083015180519192612b9492600685019290910190614e66565b5050604051879150600080516020614ff483398151915290600090a2505050505050565b6000612bc48383614208565b8061141e5750506001600160a01b03918216600090815260106020908152604080832093909416825291909152205460ff1690565b600d60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494959394929391929091906001600160a01b0381169060ff600160a01b8204811691600160a81b90041689565b6001600160a01b038516612c9a5760405162461bcd60e51b81526004018080602001828103825260288152602001806150146028913960400191505060405180910390fd5b6001600160a01b038616331480612cbc5750612cb68633612bb8565b15156001145b612cf75760405162461bcd60e51b81526004018080602001828103825260378152602001806151776037913960400191505060405180910390fd5b612d03868686866142ef565b846001600160a01b0316866001600160a01b0316336001600160a01b0316600080516020614f638339815191528787604051808381526020018281526020019250505060405180910390a4612d92338787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061436792505050565b505050505050565b612da261377f565b612de1576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b612dea816144dc565b50565b6001600160a01b0381166000908152600c6020526040902060010154612e1390346113c4565b6001600160a01b039091166000908152600c6020526040902060010155565b612e3a61377f565b612e79576040805162461bcd60e51b81526020600482018190526024820152600080516020615157833981519152604482015290519081900360640190fd5b6001600160a01b0382166000908152600c6020526040902060010154811115612ee0576040805162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612f2b576040519150601f19603f3d011682016040523d82523d6000602084013e612f30565b606091505b5050905080612f7a576040805162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b604482015290519081900360640190fd5b506001600160a01b039091166000908152600c602052604090206001018054919091039055565b612faa33613a81565b612fe9576040805162461bcd60e51b81526020600482015260176024820152600080516020614fae833981519152604482015290519081900360640190fd5b6000838152600d602052604090205415801590613007575080518251145b61304c576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b60005b8251811015613120576130898484838151811061306857fe5b602002602001015184848151811061307c57fe5b602002602001015161457d565b6000848152600d6020526040812060080180549091906130a557fe5b600091825260208220015484516001600160a01b0390911691903390600080516020614f63833981519152908790869081106130dd57fe5b6020026020010151600d60008a815260200190815260200160002060000154604051808381526020018281526020019250505060405180910390a460010161304f565b50505050565b61312e614d9a565b6000838152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561323657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613218575b5050509190925250508151919250501580159061325a575061012081015115156001145b80156132695750610140810151155b6132ad576040805162461bcd60e51b815260206004820152601060248201526f496e76616c69642063616c6c6261636b60801b604482015290519081900360640190fd5b6132b78383613b62565b6000838152600e6020526040902060050154600160c01b900460ff16156124a7576124a7816000015182608001516139b0565b60606000825b80156133065760019190910190601090046132f0565b60608267ffffffffffffffff8111801561331f57600080fd5b506040519080825280601f01601f19166020018201604052801561334a576020820181803683370190505b50905060005b8381101561339d576010860692506133678361471a565b826001838703038151811061337857fe5b60200101906001600160f81b031916908160001a905350601086049550600101613350565b50949350505050565b805182516060918491849184910167ffffffffffffffff811180156133ca57600080fd5b506040519080825280601f01601f1916602001820160405280156133f5576020820181803683370190505b509050806000805b855181101561344e5785818151811061341257fe5b602001015160f81c60f81b83838060010194508151811061342f57fe5b60200101906001600160f81b031916908160001a9053506001016133fd565b5060005b84518110156134a35784818151811061346757fe5b602001015160f81c60f81b83838060010194508151811061348457fe5b60200101906001600160f81b031916908160001a905350600101613452565b5090979650505050505050565b60008034116134da576001600160a01b0385166000908152600c60205260409020600101546134dc565b345b905060005b83518110156135585761354e61351f87878785815181106134fe57fe5b602002602001015187868151811061351257fe5b602002602001015161475e565b60408051808201909152601081526f092dce6eaccccd2c6d2cadce8408aa8960831b60208201528491906147b3565b91506001016134e1565b50613563858261484a565b5050505050565b61357c846001600160a01b03166148cb565b15612d925763bc197c8160e01b6001600160e01b031916846001600160a01b031663bc197c8188888787876040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561361c578181015183820152602001613604565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561365b578181015183820152602001613643565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561369757818101518382015260200161367f565b50505050905090810190601f1680156136c45780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b1580156136e957600080fd5b505af11580156136fd573d6000803e3d6000fd5b505050506040513d602081101561371357600080fd5b50516001600160e01b03191614612d925760405162461bcd60e51b81526004018080602001828103825260368152602001806150986036913960400191505060405180910390fd5b6000918252600d6020526040909120600601546001600160a01b0391821691161490565b600f546001600160a01b0316331490565b6000828152600d602090815260408083206001600160a01b038516845260070190915281206002015460ff168061141e575061141e61377f565b6000805b85518110156137fa578581815181106137e357fe5b6020026020010151820191508060010190506137ce565b506000865111801561380a575060015b8015613817575080612710145b8015613824575061271084105b613869576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b6000898152600d60209081526040808320600581018c90558a516002808301919091558b840151600383015582518084018452428152928c015183850152600b9091018054600181018255908552929093206138c9939283020191614eba565b506000898152600d6020908152604090912087516138ef92600990920191890190614e66565b506000898152600d60209081526040909120865161391592600a90920191880190614ef4565b50506000978852600d602052604090972060048101929092556006909101805460ff60a01b1916600160a01b92151592909202919091176001600160a01b0319166001600160a01b039096169590951790945550505050565b600061141e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506147b3565b6000828152600d6020908152604091829020600601805460ff60a81b191690558151838152915184927f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd92908290030190a25050565b6000828152600d6020908152604091829020600601805460ff60a81b1916600160a81b1790558151838152915184927f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd92908290030190a25050565b6000908152600d6020526040902060060154600160a81b900460ff1690565b6001600160a01b0381166000908152600c602052604081205460ff1680611421575061142161377f565b80516000908190613aec576000858152600d60208181526040808420338552600781018352908420549389905291905254613ae59161396e565b9050613b4f565b60005b8351811015613b4d57600d60008781526020019081526020016000206007016000858381518110613b1c57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020549190910190600101613aef565b505b613b59818561416d565b95945050505050565b6000828152600e602052604090208054600690910154606090613b95576000828152600d60205260409020600801613ba7565b6000848152600e602052604090206006015b805480602002602001604051908101604052809291908181526020018280548015613bfb57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613bdd575b505083516000898152600e60205260408120600301549596506000199091019493509150508582018311613c2f5782613c33565b8582015b90506000825b828111613d7b576000868281518110613c4e57fe5b60209081029190910181015160008a8152600d835260408082206001600160a01b0384168352600701909352919091205490915015613d72576000888152600d602090815260408083206001600160a01b0385168085526007909101808452828520548f8652600e855292852060010154919094529290915293840193613cd49161416d565b6001600160a01b038083166000818152600c6020908152604080832060010180549096019095558e8252600e8152848220600501548d8352600d82528583208484526007018252918590205485518e8152918201528451919093169391923392600080516020614f6383398151915292918290030190a46000888152600d602090815260408083206001600160a01b03851684526007019091528120555b50600101613c39565b506000888152600e6020526040902060050154613da2906001600160a01b03168783614902565b6000888152600e6020526040902060030182905583821415611826576000888152600e6020526040808220600501805460ff60c01b1916600160c01b179055518991600080516020614ff483398151915291a25050505050505050565b60008a8152600d6020526040902054158015613e1b5750600089115b613e60576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b88600d60008c81526020019081526020016000206000018190555087600d60008c8152602001908152602001600020600101819055506001600d60008c81526020019081526020016000206007016000336001600160a01b03166001600160a01b0316815260200190815260200160002060020160006101000a81548160ff0219169083151502179055506001600d60008c815260200190815260200160002060070160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060020160026101000a81548160ff021916908315150217905550613f508a888888888888886137ca565b613f5b8b8b8b614902565b5050505050505050505050565b6001600160a01b03166000908152600c6020526040902054610100900460ff1690565b6000828152600d60205260408120600b015481904290600019015b6000868152600d60205260408120600b01805483908110613fc357fe5b60009182526020822060029091020101546000888152600d60205260408120600b018054929350909184908110613ff657fe5b906000526020600020906002020160016002811061401057fe5b01546000898152600d602090815260408083206001600160a01b038e1684526007019091528120600101549192509083116140ad576000898152600d602090815260408083206001600160a01b038e1684526007019091529020600101546140829062015180906129f190889061396e565b90508061408d575060015b6140a18861409b838561416d565b9061416d565b860195505050506140ec565b6140be620151806129f1878661396e565b9050806140c9575060015b91935083916140dc8861409b838561416d565b9095019450505060001901613fa6565b506000858152600d602052604090206001015461410d908390600a0a6141c6565b6000868152600d602052604081206003015491935090614138906305f5e100906129f190889061416d565b6000878152600d60205260409020600201549091506141629061415b90836113c4565b84906113c4565b979650505050505050565b60008261417c57506000611421565b8282028284828161418957fe5b041461141e5760405162461bcd60e51b81526004018080602001828103825260218152602001806151026021913960400191505060405180910390fd5b600061141e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506149ab565b6000805b600a8110156142e5576000600282600a811061422457fe5b01546001600160a01b0316146142dd576000600282600a811061424357fe5b01546040805163c455279160e01b81526001600160a01b0388811660048301529151928216935090861691839163c4552791916024808301926020929190829003018186803b15801561429557600080fd5b505afa1580156142a9573d6000803e3d6000fd5b505050506040513d60208110156142bf57600080fd5b50516001600160a01b031614156142db57600192505050611421565b505b60010161420c565b5060009392505050565b6000803411614319576001600160a01b0385166000908152600c602052604090206001015461431b565b345b905061435b61432c8686868661475e565b60408051808201909152601081526f092dce6eaccccd2c6d2cadce8408aa8960831b60208201528391906147b3565b9050613563858261484a565b614379846001600160a01b03166148cb565b15612d925763f23a6e6160e01b6001600160e01b031916846001600160a01b031663f23a6e6188888787876040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561441a578181015183820152602001614402565b50505050905090810190601f1680156144475780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561446a57600080fd5b505af115801561447e573d6000803e3d6000fd5b505050506040513d602081101561449457600080fd5b50516001600160e01b03191614612d925760405162461bcd60e51b81526004018080602001828103825260318152602001806151dc6031913960400191505060405180910390fd5b6001600160a01b0381166145215760405162461bcd60e51b8152600401808060200182810382526026815260200180614fce6026913960400191505060405180910390fd5b600f546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000838152600d6020526040812060080180546124a7929061459b57fe5b6000918252602080832090910154868352600d8083526040808520805460018201548351606081018552600284015481526003840154818901528c895294909652600b90910180546001600160a01b03909516968a96929592948a94909390840192919061460557fe5b906000526020600020906002020160016002811061461f57fe5b0154905260008a8152600d60209081526040918290206009018054835181840281018401909452808452909183018282801561468457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614666575b50505060008d8152600d6020908152604091829020600a01805483518184028101840190945280845292945092508301828280156146e157602002820191906000526020600020905b8154815260200190600101908083116146cd575b50505060008e8152600d60205260409020600481015460069091015490925060ff600160a01b82041691506001600160a01b0316613dff565b600060098260ff161161473457506030810160f81b6114dc565b8160ff16600a1115801561474c5750600f8260ff1611155b1561028b57506057810160f81b6114dc565b600061476c85858585614a10565b156147a7576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b613b5985858585614a48565b600081848411156148425760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156148075781810151838201526020016147ef565b50505050905090810190601f1680156148345780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60003411801561485a5750600081115b156148a6576001600160a01b0382166000908152600c602052604090206001015461488590826113c4565b6001600160a01b0383166000908152600c6020526040902060010155611c4a565b34611c4a576001600160a01b03919091166000908152600c6020526040902060010155565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906128a95750141592915050565b6000828152600d6020526040902060060154600160a01b900460ff16158061495857506000828152600d602090815260408083206001600160a01b038716845260070190915290206002015462010000900460ff165b6149a0576040805162461bcd60e51b81526020600482015260146024820152731059191c995cdcc81b9bdd08185c1c1c9bdd995960621b604482015290519081900360640190fd5b6124a7838383614b9c565b600081836149fa5760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156148075781810151838201526020016147ef565b506000838581614a0657fe5b0495945050505050565b6000614a1b83613a62565b80614a2a5750614a2a85613f68565b80614a395750614a3984613f68565b80613b59575050159392505050565b6040805180820182526014815273496e73756666696369656e742062616c616e636560601b6020808301919091526000858152600d82528381206001600160a01b038916825260070190915291822054614aa39184906147b3565b6000848152600d602090815260408083206001600160a01b038a168452600701909152902055614ad4848484614902565b614adf858484613f8b565b905060005b6000848152600d602052604090206009015481101561339d576000848152600d60205260408120600901805483908110614b1a57fe5b6000918252602080832090910154878352600d90915260408220600a0180546001600160a01b0390921693509084908110614b5157fe5b6000918252602090912001549050614b6f6127106129f1868461416d565b6001600160a01b039092166000908152600c60205260409020600190810180549093019092555001614ae4565b6000828152600d602090815260408083206001600160a01b0387168452600701909152812054614bcc90836113c4565b6000848152600d602090815260408083206001600160a01b0389168452600701909152902054909150614cc9576000838152600d602090815260408083206001600160a01b0388168452600701909152902060020154610100900460ff16614c98576001600160a01b0384166000818152600c6020908152604080832060020180546001818101835591855283852001889055878452600d83529083206008810180549283018155845282842090910180546001600160a01b0319168517905592909152600790910190525b6000838152600d602090815260408083206001600160a01b0388168452600701909152902042600190910155614d6a565b6000838152600d602090815260408083206001600160a01b0388168452600701909152812060010154614cfd90429061396e565b6000858152600d602090815260408083206001600160a01b038a16845260070190915281205491925090614d379084906129f1908561416d565b6000868152600d602090815260408083206001600160a01b038b1684526007019091529020429190910360019091015550505b6000928352600d602090815260408085206001600160a01b03909616855260079095019052929091209190915550565b604051806101800160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600015158152602001600015158152602001600015158152602001600015158152602001600015158152602001606081525090565b82600a8101928215614e56579160200282015b82811115614e5657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614e21565b50614e62929150614f2e565b5090565b828054828255906000526020600020908101928215614e565791602002820182811115614e5657825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614e21565b8260028101928215614ee8579160200282015b82811115614ee8578251825591602001919060010190614ecd565b50614e62929150614f4d565b828054828255906000526020600020908101928215614ee85791602002820182811115614ee8578251825591602001919060010190614ecd565b5b80821115614e625780546001600160a01b0319168155600101614f2f565b5b80821115614e625760008155600101614f4e56fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62455243313135353a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373496e73756666696369656e74207065726d697373696f6e0000000000000000004f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736ce984c7277c5fe8f47fdf17245300ed19587e3bc1041342d79726b2b2f1dc0b455243313135353a207461726765742061646472657373206d757374206265206e6f6e2d7a65726f455243313135353a2063616e6e6f742073657420617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420494473206d75737420686176652073616d65206c656e67746873455243313135353a20676f7420756e6b6e6f776e2076616c75652066726f6d206f6e4552433131353542617463685265636569766564455243313135353a20736f6d65206164647265737320696e2062617463682062616c616e6365207175657279206973207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e73756666696369656e742063616c6c6261636b2c207065726d697373696f6e206f7220657363726f77656420616d6f756e744f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572455243313135353a206e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e7366657273455243313135353a2049447320616e642076616c756573206d75737420686176652073616d65206c656e67746873455243313135353a20676f7420756e6b6e6f776e2076616c75652066726f6d206f6e455243313135355265636569766564a26469706673582212208a2050fc12334a0f46a6672e3bf87b9161c80be5fe7e641c5dca8ea2ce40033b64736f6c63430007010033",
  "immutableReferences": {},
  "sourceMap": "209:1571:0:-:0;;;407:174;;;;;;;;;-1:-1:-1;638:30:12;657:10;638:18;:30::i;:::-;474:2:0;432:7;:44;486:48;;;;;;;;;;;;;;;;;;;;;;;:15;;:48;:::i;:::-;-1:-1:-1;544:30:0;563:10;544:18;:30::i;:::-;209:1571;;1671:225:12;-1:-1:-1;;;;;1744:22:12;;1736:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1845:6;;1824:38;;-1:-1:-1;;;;;1824:38:12;;;;1845:6;;1824:38;;1845:6;;1824:38;1872:6;:17;;-1:-1:-1;;;;;;1872:17:12;-1:-1:-1;;;;;1872:17:12;;;;;;;;;;1671:225::o;209:1571:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;209:1571:0;;;-1:-1:-1;209:1571:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "209:1571:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1517:10;1510:18;;;;:6;:18;;;;;:29;;;:44;;1544:9;1510:33;:44::i;:::-;1485:10;1478:18;;;;:6;:18;;;;;:29;;:76;209:1571;;;;;1842:234:8;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1842:234:8;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1247:255;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1247:255:8;-1:-1:-1;;;;;;1247:255:8;;:::i;:::-;;;;;;;;;;;;;;;;;;1635:141:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1635:141:0;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6062:770:8;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6062:770:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6062:770:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6062:770:8;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6062:770:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6062:770:8;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6062:770:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6062:770:8;;;;;;;;;;-1:-1:-1;6062:770:8;;-1:-1:-1;6062:770:8;-1:-1:-1;6062:770:8;:::i;:::-;;1698:22:15;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3057:453:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3057:453:6;;:::i;977:99:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;977:99:9;-1:-1:-1;;;;;977:99:9;;:::i;536:144:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;536:144:6;;:::i;1726:39:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1726:39:15;-1:-1:-1;;;;;1726:39:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1818:47;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1818:47:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1818:47:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;510:151:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;510:151:14;;-1:-1:-1;510:151:14;;-1:-1:-1;;;;510:151:14:i;2251:823:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2251:823:10;;;;;;;;-1:-1:-1;2251:823:10;;-1:-1:-1;;;;2251:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2251:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2251:823:10;;;;;;;;-1:-1:-1;2251:823:10;;-1:-1:-1;;;;;2251:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2251:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2251:823:10;;-1:-1:-1;;2251:823:10;;;-1:-1:-1;;;2251:823:10;;;;;;;;;;-1:-1:-1;;;;;2251:823:10;;:::i;2400:631:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2400:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2400:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2400:631:8;;;;;;;;-1:-1:-1;2400:631:8;;-1:-1:-1;;;;;2400:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2400:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2400:631:8;;-1:-1:-1;2400:631:8;;-1:-1:-1;;;;;2400:631:8:i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;967:161:7;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;967:161:7;;;;;;;;:::i;1412:132:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1412:132:10;;;;;;-1:-1:-1;;;;;1412:132:10;;:::i;388:140:13:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;388:140:13;;;;;;-1:-1:-1;;;;;388:140:13;;:::i;684:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;684:140:13;;;;;;-1:-1:-1;;;;;684:140:13;;:::i;623:119:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;623:119:11;-1:-1:-1;;;;;623:119:11;;:::i;879:117::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;879:117:11;-1:-1:-1;;;;;879:117:11;;:::i;731:144:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;731:144:10;;;;;;-1:-1:-1;;;;;731:144:10;;:::i;1124:86:12:-;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1124:86:12;;;;;;;;;;;;;;2325:630:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2325:630:6;;:::i;3509:296:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3509:296:8;;;;;;;;;;:::i;537:129:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;537:129:9;;;;;;;:::i;1182:102::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1182:102:9;-1:-1:-1;;;;;1182:102:9;;:::i;320:125::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;320:125:9;;;;;;;:::i;770:105::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;770:105:9;;:::i;1142:116:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1142:116:11;-1:-1:-1;;;;;1142:116:11;;:::i;3611:1066:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3611:1066:6;;:::i;2097:1038:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2097:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2097:1038:11;;;;;;;;-1:-1:-1;2097:1038:11;;-1:-1:-1;;;;2097:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2097:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2097:1038:11;;;;;;;;-1:-1:-1;2097:1038:11;;-1:-1:-1;;;;;2097:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2097:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2097:1038:11;;-1:-1:-1;;2097:1038:11;;;-1:-1:-1;;;2097:1038:11;;;;;;;;;;-1:-1:-1;;;;;2097:1038:11;;:::i;1401:113:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1401:113:9;-1:-1:-1;;;;;1401:113:9;;:::i;570:159:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;570:159:7;;;;;;;;;;;;;:::i;1044:142:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1044:142:10;;;;;;-1:-1:-1;;;;;1044:142:10;;:::i;1030:1166:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1030:1166:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1030:1166:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1030:1166:6;;-1:-1:-1;;1030:1166:6;;;-1:-1:-1;1030:1166:6;;-1:-1:-1;;1030:1166:6:i;4086:203:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4086:203:8;;;;;;;;;;:::i;1771:41:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1771:41:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1771:41:15;;;;;;;;;;;;;;;;;;;;;;;;;;4843:630:8;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4843:630:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4843:630:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4843:630:8;;;;;;;;;;-1:-1:-1;4843:630:8;;-1:-1:-1;4843:630:8;-1:-1:-1;4843:630:8;:::i;1359:116:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1359:116:12;-1:-1:-1;;;;;1359:116:12;;:::i;1163:123:0:-;;;;;;;;;;;;;;;;-1:-1:-1;1163:123:0;-1:-1:-1;;;;;1163:123:0;;:::i;733:289::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;733:289:0;;;;;;;;:::i;3362:645:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3362:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3362:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3362:645:11;;;;;;;;-1:-1:-1;3362:645:11;;-1:-1:-1;;;;;3362:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3362:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3362:645:11;;-1:-1:-1;3362:645:11;;-1:-1:-1;;;;;3362:645:11:i;4901:464:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4901:464:6;;;;;;;:::i;867:176:17:-;925:7;956:5;;;979:6;;;;971:46;;;;;-1:-1:-1;;;971:46:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:1;-1:-1:-1;867:176:17;;;;;:::o;1842:234:8:-;1920:7;-1:-1:-1;;;;;1947:21:8;;1939:77;;;;-1:-1:-1;;;1939:77:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2033:11:8;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2033:28:8;;;;;;:19;;;;:28;;;:36;;1842:234::o;1247:255::-;1327:4;-1:-1:-1;;;;;;1345:42:8;;-1:-1:-1;;;1345:42:8;;:99;;-1:-1:-1;;;;;;;1401:43:8;;-1:-1:-1;;;1401:43:8;1345:99;1341:135;;;-1:-1:-1;1463:4:8;1456:11;;1341:135;-1:-1:-1;1490:5:8;1247:255;;;;:::o;1635:141:0:-;1735:15;1724:45;;;;;;;;;;;;;-1:-1:-1;;1724:45:0;;;;;;;;;;;;;;;;;;;;;;;;;;1692:13;;1724:45;;;;1735:15;;1724:45;;1735:15;1724:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1752:16;1765:2;1752:12;:16::i;:::-;1724:10;:45::i;6062:770:8:-;6293:27;;;6285:86;;;;-1:-1:-1;;;6285:86:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6389:16:8;;6381:69;;;;-1:-1:-1;;;6381:69:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6481:18:8;;6489:10;6481:18;;:64;;;6503:34;6520:4;6526:10;6503:16;:34::i;:::-;:42;;6541:4;6503:42;6481:64;6460:166;;;;-1:-1:-1;;;6460:166:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6637:37;6652:4;6658:2;6662:3;;6637:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6637:37:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6667:6:8;;-1:-1:-1;6667:6:8;;;;6637:37;;;6667:6;;6637:37;6667:6;6637:37;;;;;;;;;-1:-1:-1;6637:14:8;;-1:-1:-1;;;6637:37:8:i;:::-;6722:2;-1:-1:-1;;;;;6690:48:8;6716:4;-1:-1:-1;;;;;6690:48:8;6704:10;-1:-1:-1;;;;;6690:48:8;;6726:3;;6731:6;;6690:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6690:48:8;;;;;;;;;;;;;;;;;-1:-1:-1;6690:48:8;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6690:48:8;;;;;;;;-1:-1:-1;6690:48:8;;-1:-1:-1;;;;;;;6690:48:8;6749:76;6785:10;6797:4;6803:2;6807:3;;6749:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6749:76:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6812:6:8;;-1:-1:-1;6812:6:8;;;;6749:76;;;6812:6;;6749:76;6812:6;6749:76;;;;;;;;;-1:-1:-1;;6749:76:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6820:4:8;;-1:-1:-1;6820:4:8;;;;6749:76;;6820:4;;;;6749:76;;;;;;;;;-1:-1:-1;6749:35:8;;-1:-1:-1;;;6749:76:8:i;:::-;6062:770;;;;;;;;:::o;1698:22:15:-;;;;;;;;;;;;;;;;;;-1:-1:-1;;1698:22:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3057:453:6:-;3121:24;;:::i;:::-;3148:22;;;;:10;:22;;;;;;;;;3121:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3121:49:6;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3148:22;;3121:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3121:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;-1:-1:-1;;3189:16:6;;3121:49;;-1:-1:-1;;3189:21:6;;;;:88;;-1:-1:-1;3248:16:6;;3230:47;;3266:10;3230:17;:47::i;:::-;3189:133;;;;-1:-1:-1;3297:16:6;;;;:25;3189:133;:179;;;;-1:-1:-1;3342:17:6;;;;:26;3189:179;3181:223;;;;;-1:-1:-1;;;3181:223:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;3415:22;;;;:10;:22;;;;;;:38;;:45;;-1:-1:-1;;;;3415:45:6;-1:-1:-1;;;3415:45:6;;;3476:27;3426:10;;-1:-1:-1;;;;;;;;;;;3476:27:6;;3057:453;;:::o;977:99:9:-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;1041:12:9::1;;::::0;;;:6:::1;:12;::::0;;;;:28;;-1:-1:-1;;1041:28:9::1;;;::::0;;977:99::o;536:144:6:-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;625:7:6::1;:48:::0;536:144::o;1726:39:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1818:47::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1818:47:15;;;;-1:-1:-1;;;1818:47:15;;;;;-1:-1:-1;;;1818:47:15;;;;;-1:-1:-1;;;1818:47:15;;;;;-1:-1:-1;;;1818:47:15;;;;;-1:-1:-1;;;1818:47:15;;;;;:::o;510:151:14:-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;607:47:14::1;:30;640:14:::0;607:47:::1;;:::i;:::-;;510:151:::0;:::o;2251:823:10:-;2686:2;427:28;440:2;444:10;427:12;:28::i;:::-;419:64;;;;;-1:-1:-1;;;419:64:10;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;419:64:10;;;;;;;;;;;;;;;2729:1:::1;2708:11:::0;;;:7:::1;:11;::::0;;;;:18;2700:48:::1;;;::::0;;-1:-1:-1;;;2700:48:10;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2700:48:10;;;;;;;;;;;;;::::1;;2759:262;2769:2;2791:12;2823:15;2858:14;2892:24;2936:21;2977:9;3006:14;2759:9;:262::i;:::-;3037:30;::::0;;;;;;;3050:2;;3037:30:::1;::::0;;;;;::::1;::::0;;::::1;2251:823:::0;;;;;;;;;:::o;2400:631:8:-;2549:16;2608:3;:10;2589:8;:15;:29;2581:90;;;;-1:-1:-1;;;2581:90:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2682:30;2729:8;:15;2715:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2715:30:8;;2682:63;;2761:9;2756:238;2780:8;:15;2776:1;:19;2756:238;;;2847:1;-1:-1:-1;;;;;2824:25:8;:8;2833:1;2824:11;;;;;;;;;;;;;;-1:-1:-1;;;;;2824:25:8;;;2816:90;;;;-1:-1:-1;;;2816:90:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2939:7;:15;2947:3;2951:1;2947:6;;;;;;;;;;;;;;2939:15;;;;;;;;;;;:23;;:36;2963:8;2972:1;2963:11;;;;;;;;;;;;;;-1:-1:-1;;;;;2939:36:8;-1:-1:-1;;;;;2939:36:8;;;;;;;;;;;;:44;;;2920:13;2934:1;2920:16;;;;;;;;;;;;;;;;;:63;2797:3;;2756:238;;;-1:-1:-1;3011:13:8;2400:631;-1:-1:-1;;;2400:631:8:o;967:161:7:-;1037:7;1083:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1083:28:7;;;;:19;;:28;;;;;:37;;;1063:58;;:15;;:19;:58::i;1412:132:10:-;1487:4;1510:27;1523:2;1527:9;1510:12;:27::i;388:140:13:-;462:2;427:28:10;440:2;444:10;427:12;:28::i;:::-;419:64;;;;;-1:-1:-1;;;419:64:10;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;419:64:10;;;;;;;;;;;;;;;-1:-1:-1;476:11:13::1;::::0;;;:7:::1;:11;::::0;;;;;;;-1:-1:-1;;;;;476:27:13;;::::1;::::0;;:19:::1;::::0;;::::1;:27:::0;;;;:38:::1;;:45:::0;;-1:-1:-1;;476:45:13::1;::::0;::::1;::::0;;388:140::o;684:::-;757:2;427:28:10;440:2;444:10;427:12;:28::i;:::-;419:64;;;;;-1:-1:-1;;;419:64:10;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;419:64:10;;;;;;;;;;;;;;;-1:-1:-1;812:5:13::1;771:11:::0;;;:7:::1;:11;::::0;;;;;;;-1:-1:-1;;;;;771:27:13;;::::1;::::0;;:19:::1;::::0;;::::1;:27:::0;;;;:38:::1;;:46:::0;;-1:-1:-1;;771:46:13::1;::::0;;684:140::o;623:119:11:-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;699:17:11::1;;::::0;;;:6:::1;:17;::::0;;;;:36;;-1:-1:-1;;699:36:11::1;731:4;699:36;::::0;;623:119::o;879:117::-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;952:17:11::1;984:5;952:17:::0;;;:6:::1;:17;::::0;;;;:37;;-1:-1:-1;;952:37:11::1;::::0;;879:117::o;731:144:10:-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;819:11:10::1;::::0;;;:7:::1;:11;::::0;;;;;;;-1:-1:-1;;;;;819:30:10;;::::1;::::0;;:19:::1;::::0;;::::1;:30:::0;;;;:42:::1;;:49:::0;;-1:-1:-1;;819:49:10::1;864:4;819:49;::::0;;731:144::o;1124:86:12:-;1197:6;;-1:-1:-1;;;;;1197:6:12;1124:86;:::o;2325:630:6:-;2388:24;;:::i;:::-;2415:22;;;;:10;:22;;;;;;;;;2388:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2388:49:6;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2415:22;;2388:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2388:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;-1:-1:-1;;2456:16:6;;2388:49;;-1:-1:-1;;2456:21:6;;;;:66;;-1:-1:-1;2497:16:6;;;;:25;2456:66;:112;;;;-1:-1:-1;2542:17:6;;;;:26;2456:112;:294;;;;-1:-1:-1;2602:16:6;;2589:42;;2620:10;2589:12;:42::i;:::-;:110;;;-1:-1:-1;2670:16:6;;2652:47;;2688:10;2652:17;:47::i;:::-;2589:160;;;;2734:8;:15;;;-1:-1:-1;;;;;2720:29:6;:10;-1:-1:-1;;;;;2720:29:6;;2589:160;2448:338;;;;;-1:-1:-1;;;2448:338:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;2797:22;;;;:10;:22;;;;;;;;:30;;:37;;-1:-1:-1;;;;2797:37:6;-1:-1:-1;;;2797:37:6;;;2882:23;;;;2851:15;;;;-1:-1:-1;;;;;2844:23:6;;;:6;:23;;;;;;2830:4;2844:34;:61;;;;;;;;2921:27;2808:10;;-1:-1:-1;;;;;;;;;;;2921:27:6;;2325:630;;:::o;3509:296:8:-;3605:10;-1:-1:-1;;;;;3605:22:8;;;;3597:79;;;;-1:-1:-1;;;3597:79:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3705:10;3686:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;3686:40:8;;;;;;;;;;;;:51;;-1:-1:-1;;3686:51:8;;;;;;;;;;3752:46;;;;;;;3686:40;;3705:10;3752:46;;;;;;;;;;;3509:296;;:::o;537:129:9:-;615:2;427:28:10;440:2;444:10;427:12;:28::i;:::-;419:64;;;;;-1:-1:-1;;;419:64:10;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;419:64:10;;;;;;;;;;;;;;;629:30:9::1;642:2;646:12;629;:30::i;:::-;537:129:::0;;;:::o;1182:102::-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;1248:12:9::1;1272:5;1248:12:::0;;;:6:::1;:12;::::0;;;;:29;;-1:-1:-1;;1248:29:9::1;::::0;;1182:102::o;320:125::-;396:2;427:28:10;440:2;444:10;427:12;:28::i;:::-;419:64;;;;;-1:-1:-1;;;419:64:10;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;419:64:10;;;;;;;;;;;;;;;410:28:9::1;421:2;425:12;410:10;:28::i;770:105::-:0;828:4;850:18;865:2;850:14;:18::i;1142:116:11:-;1205:4;1228:23;1241:9;1228:12;:23::i;3611:1066:6:-;3674:24;;:::i;:::-;3701:22;;;;:10;:22;;;;;;;;;3674:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3674:49:6;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3701:22;;3674:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3674:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;-1:-1:-1;;3742:16:6;;3674:49;;-1:-1:-1;;3742:21:6;;;;:83;;-1:-1:-1;3796:16:6;;3783:42;;3814:10;3783:12;:42::i;:::-;3742:160;;;;;3847:8;:26;;;3846:27;:55;;;;3877:8;:24;;;3846:55;3742:205;;;;-1:-1:-1;3922:16:6;;;;:25;3742:205;:251;;;;-1:-1:-1;3967:17:6;;;;:26;3742:251;:364;;;;;4040:66;4055:8;:16;;;4073:8;:14;;;4089:8;:16;;;4040:14;:66::i;:::-;4013:8;:23;;;:93;;3742:364;3734:445;;;;-1:-1:-1;;;3734:445:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4190:22;;;;:10;:22;;;;;;:31;;:38;;-1:-1:-1;;;;4190:38:6;-1:-1:-1;;;4190:38:6;;;4244:27;4201:10;;-1:-1:-1;;;;;;;;;;;4244:27:6;;4286:16;;;;:23;:27;4282:389;;4329:53;4346:10;4358:8;:16;;;:23;4329:16;:53::i;:::-;4282:389;;;4450:7;:39;;4411:16;;4403:25;;:7;:25;;;;;;:36;;:43;:86;4399:272;;4542:16;;4534:25;;;;:7;:25;;;;;:36;;:43;4505:73;;4522:10;;4505:16;:73::i;4399:272::-;4609:51;4620:8;:16;;;4638:8;:21;;;4609:10;:51::i;2097:1038:11:-;325:24;338:10;325:12;:24::i;:::-;317:60;;;;;-1:-1:-1;;;317:60:11;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;317:60:11;;;;;;;;;;;;;;;2674:378:::1;2687:9;2719:2;2744:6;2773:8;2804:12;2839:15;2877:14;2914:24;2961:21;3005:9;3037:14;2674:12;:378::i;:::-;3067:61;::::0;;;;;::::1;::::0;::::1;::::0;;;;;-1:-1:-1;;;;;3067:61:11;::::1;::::0;3102:1:::1;::::0;3082:10:::1;::::0;-1:-1:-1;;;;;;;;;;;3067:61:11;;;;;;;;;::::1;2097:1038:::0;;;;;;;;;;;:::o;1401:113:9:-;1463:4;1485:22;1502:4;1485:16;:22::i;570:159:7:-;660:7;686:36;703:7;712:2;716:5;686:16;:36::i;:::-;679:43;570:159;-1:-1:-1;;;;570:159:7:o;1044:142:10:-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;1174:5:10::1;1129:11:::0;;;:7:::1;:11;::::0;;;;;;;-1:-1:-1;;;;;1129:30:10;;::::1;::::0;;:19:::1;::::0;;::::1;:30:::0;;;;:42:::1;;:50:::0;;-1:-1:-1;;1129:50:10::1;::::0;;1044:142::o;1030:1166:6:-;1190:22;;;;:10;:22;;;;;:30;:35;:66;;;;-1:-1:-1;1255:1:6;1229:16;;;:7;:16;;;;;:23;:27;;1190:66;:138;;;;;1289:39;1304:7;1313:5;1320:7;1289:14;:39::i;:::-;1276:9;:52;;1190:138;:215;;;;-1:-1:-1;1366:7:6;:39;1348:14;;:57;;1190:215;1182:254;;;;;-1:-1:-1;;;1182:254:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;1447:18;1497:16;;;:7;:16;;;;;:38;;;;1469:23;;1468:80;;1542:5;;1469:67;;:27;:67::i;:::-;1468:73;;:80::i;:::-;1447:101;;1584:562;;;;;;;;1616:7;1584:562;;;;1706:5;1584:562;;;;1741:9;1584:562;;;;2064:1;1584:562;;;;2123:12;1584:562;;;;1645:10;-1:-1:-1;;;;;1584:562:6;;;;;1784:5;1793:1;1784:10;1783:106;;;-1:-1:-1;1831:16:6;;;;:7;:16;;;;;;;;1856:10;1831:36;;:24;;:36;;;;;:44;:57;-1:-1:-1;1783:106:6;:161;;;;1942:1;1925:7;:14;:18;1783:161;1584:562;;;;1975:5;1584:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1559:22;;;:10;:22;;;;;;:587;;;;;;;;1584:562;1559:587;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;1559:587:6;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;1559:587:6;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;1559:587:6;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;1559:587:6;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;;;;;;1559:587:6;;;-1:-1:-1;;;;;;1559:587:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;;:587;;;;;;;;;;;:::i;:::-;-1:-1:-1;;2162:27:6;;2178:10;;-1:-1:-1;;;;;;;;;;;;2162:27:6;;;;1030:1166;;;;;;:::o;4086:203:8:-;4177:4;4200:41;4223:7;4232:8;4200:22;:41::i;:::-;:82;;;-1:-1:-1;;;;;;;4245:27:8;;;;;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;4086:203::o;1771:41:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1771:41:15;;;;-1:-1:-1;;;1771:41:15;;;;;-1:-1:-1;;;1771:41:15;;;;:::o;4843:630:8:-;-1:-1:-1;;;;;5045:16:8;;5037:69;;;;-1:-1:-1;;;5037:69:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5137:18:8;;5145:10;5137:18;;:64;;;5159:34;5176:4;5182:10;5159:16;:34::i;:::-;:42;;5197:4;5159:42;5137:64;5116:166;;;;-1:-1:-1;;;5116:166:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5293:30;5303:4;5309:2;5313;5317:5;5293:9;:30::i;:::-;5372:2;-1:-1:-1;;;;;5339:47:8;5366:4;-1:-1:-1;;;;;5339:47:8;5354:10;-1:-1:-1;;;;;5339:47:8;-1:-1:-1;;;;;;;;;;;5376:2:8;5380:5;5339:47;;;;;;;;;;;;;;;;;;;;;;;;5397:69;5428:10;5440:4;5446:2;5450;5454:5;5461:4;;5397:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5397:30:8;;-1:-1:-1;;;5397:69:8:i;:::-;4843:630;;;;;;:::o;1359:116:12:-;888:10;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;1440:28:::1;1459:8;1440:18;:28::i;:::-;1359:116:::0;:::o;1163:123:0:-;-1:-1:-1;;;;;1243:10:0;;;;;;:6;:10;;;;;:21;;;:36;;1269:9;1243:25;:36::i;:::-;-1:-1:-1;;;;;1219:10:0;;;;;;;:6;:10;;;;;:21;;:60;1163:123::o;733:289::-;888:10:12;:8;:10::i;:::-;880:55;;;;;-1:-1:-1;;;880:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;880:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;816:10:0;::::1;;::::0;;;:6:::1;:10;::::0;;;;:21:::1;;::::0;:31;-1:-1:-1;816:31:0::1;808:64;;;::::0;;-1:-1:-1;;;808:64:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;808:64:0;;;;;;;;;;;;;::::1;;901:26;::::0;883:12:::1;::::0;-1:-1:-1;;;;;901:7:0;::::1;::::0;916:6;;883:12;901:26;883:12;901:26;916:6;901:7;:26:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;882:45;;;945:7;937:37;;;::::0;;-1:-1:-1;;;937:37:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;937:37:0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;;984:10:0;;::::1;;::::0;;;:6:::1;:10;::::0;;;;:21:::1;;:31:::0;;;;;::::1;::::0;;733:289::o;3362:645:11:-;325:24;338:10;325:12;:24::i;:::-;317:60;;;;;-1:-1:-1;;;317:60:11;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;317:60:11;;;;;;;;;;;;;;;3563:1:::1;3542:11:::0;;;:7:::1;:11;::::0;;;;:18;:22;;;;:77:::1;;;3598:14;:21;3584:3;:10;:35;3542:77;3534:107;;;::::0;;-1:-1:-1;;;3534:107:11;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;3534:107:11;;;;;;;;;;;;;::::1;;3657:9;3652:349;3676:3;:10;3672:1;:14;3652:349;;;3707:42;3719:2;3723:3;3727:1;3723:6;;;;;;;;;;;;;;3731:14;3746:1;3731:17;;;;;;;;;;;;;;3707:11;:42::i;:::-;3872:11;::::0;;;:7:::1;:11;::::0;;;;:22:::1;;:25:::0;;:22;;:11;:25:::1;;;;;::::0;;;::::1;::::0;;::::1;::::0;3931:6;;-1:-1:-1;;;;;3872:25:11;;::::1;::::0;;3784:10:::1;::::0;-1:-1:-1;;;;;;;;;;;3769:221:11;3931:3;;3935:1;;3931:6;::::1;;;;;;;;;;;3971:7;:11;3979:2;3971:11;;;;;;;;;;;:18;;;3769:221;;;;;;;;;;;;;;;;;;;;;;;;3688:3;;3652:349;;;;3362:645:::0;;;:::o;4901:464:6:-;4982:24;;:::i;:::-;5009:22;;;;:10;:22;;;;;;;;;4982:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4982:49:6;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5009:22;;4982:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4982:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;-1:-1:-1;;5050:16:6;;4982:49;;-1:-1:-1;;5050:21:6;;;;:66;;-1:-1:-1;5091:17:6;;;;:25;;5112:4;5091:25;5050:66;:113;;;;-1:-1:-1;5136:18:6;;;;:27;5050:113;5042:142;;;;;-1:-1:-1;;;5042:142:6;;;;;;;;;;;;-1:-1:-1;;;5042:142:6;;;;;;;;;;;;;;;5195:37;5212:10;5224:7;5195:16;:37::i;:::-;5247:22;;;;:10;:22;;;;;:32;;;-1:-1:-1;;;5247:32:6;;;;5243:116;;;5295:53;5308:8;:16;;;5326:8;:21;;;5295:12;:53::i;933:419:18:-;986:13;1011:10;1044:1;1055:68;1062:6;;1055:68;;1084:7;;;;;;1110:2;1105:7;;1055:68;;;1132:16;1161:5;1151:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1151:16:18;;1132:35;;1182:6;1177:141;1194:5;1192:1;:7;1177:141;;;1228:2;1224:1;:6;1220:10;;1265:21;1283:1;1265:11;:21::i;:::-;1244:3;1260:1;1256;1248:5;:9;:13;1244:18;;;;;;;;;;;:42;-1:-1:-1;;;;;1244:42:18;;;;;;;;-1:-1:-1;1305:2:18;1300:7;;;-1:-1:-1;1201:3:18;;1177:141;;;-1:-1:-1;1341:3:18;933:419;-1:-1:-1;;;;933:419:18:o;86:515::-;305:10;;292;;163:13;;213:1;;250;;163:13;;292:23;281:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;281:35:18;-1:-1:-1;262:54:18;-1:-1:-1;262:54:18;365:6;;405:76;421:3;:10;417:1;:14;405:76;;;464:3;468:1;464:6;;;;;;;;;;;;;;;;452:4;457:3;;;;;;452:9;;;;;;;;;;;:18;-1:-1:-1;;;;;452:18:18;;;;;;;;-1:-1:-1;433:3:18;;405:76;;;-1:-1:-1;499:1:18;490:76;506:3;:10;502:1;:14;490:76;;;549:3;553:1;549:6;;;;;;;;;;;;;;;;537:4;542:3;;;;;;537:9;;;;;;;;;;;:18;-1:-1:-1;;;;;537:18:18;;;;;;;;-1:-1:-1;518:3:18;;490:76;;;-1:-1:-1;589:4:18;;86:515;-1:-1:-1;;;;;;;86:515:18:o;4777:404:7:-;4893:19;4927:1;4915:9;:13;:51;;-1:-1:-1;;;;;4943:12:7;;;;;;:6;:12;;;;;:23;;;4915:51;;;4931:9;4915:51;4893:73;;4981:9;4976:157;5000:3;:10;4996:1;:14;4976:157;;;5045:77;5061:40;5073:4;5079:2;5083:3;5087:1;5083:6;;;;;;;;;;;;;;5091;5098:1;5091:9;;;;;;;;;;;;;;5061:11;:40::i;:::-;5045:77;;;;;;;;;;;;-1:-1:-1;;;5045:77:7;;;;:11;;:77;:15;:77::i;:::-;5031:91;-1:-1:-1;5012:3:7;;4976:157;;;;5142:32;5156:4;5162:11;5142:13;:32::i;:::-;4777:404;;;;;:::o;7455:558:8:-;7698:15;:2;-1:-1:-1;;;;;7698:13:8;;:15::i;:::-;7695:312;;;7856:52;;;-1:-1:-1;;;;;7754:154:8;;7771:2;-1:-1:-1;;;;;7754:43:8;;7798:8;7808:4;7814:3;7819:6;7827:4;7754:78;;;;;;;;;;;;;-1:-1:-1;;;;;7754:78:8;;;;;;-1:-1:-1;;;;;7754:78:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7754:78:8;-1:-1:-1;;;;;;7754:154:8;;7729:267;;;;-1:-1:-1;;;7729:267:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7535:160:6;7621:4;7644:11;;;:7;:11;;;;;;:26;;;-1:-1:-1;;;;;7644:44:6;;;:26;;:44;;7535:160::o;1979:93:12:-;2059:6;;-1:-1:-1;;;;;2059:6:12;2045:10;:20;;1979:93::o;3175:162:10:-;3251:4;3274:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;3274:30:10;;;;:19;;:30;;;;;:42;;;;;;:56;;;3320:10;:8;:10::i;4251:1359:11:-;4670:23;4712:9;4707:120;4731:24;:31;4727:1;:35;4707:120;;;4800:24;4825:1;4800:27;;;;;;;;;;;;;;4781:46;;;;4764:3;;;;;4707:120;;;;4870:1;4846:14;:21;:25;:75;;;;-1:-1:-1;4875:46:11;4846:75;:119;;;;;4941:15;4960:5;4941:24;4846:119;:168;;;;;5009:5;4985:21;:29;4846:168;4838:214;;;;;-1:-1:-1;;;4838:214:11;;;;;;;;;;;;-1:-1:-1;;;4838:214:11;;;;;;;;;;;;;;;5063:11;;;;:7;:11;;;;;;;;:24;;;:39;;;5149:18;;5112:34;;;;:55;;;;5212:18;;;;-1:-1:-1;5177:32:11;;:53;5240:74;;;;;;;5277:15;5240:74;;5294:18;;;;5240:74;;;;:30;;;;:74;;5228:1;5240:74;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5324:11:11;;;;:7;:11;;;;;;;;:43;;;;:26;;;;;:43;;;;:::i;:::-;-1:-1:-1;5377:11:11;;;;:7;:11;;;;;;;;:63;;;;:36;;;;;:63;;;;:::i;:::-;-1:-1:-1;;5450:11:11;;;;:7;:11;;;;;;:33;;;:57;;;;5517:21;;;;:33;;-1:-1:-1;;;;5517:33:11;-1:-1:-1;;;5517:33:11;;;;;;;;;;;-1:-1:-1;;;;;;5560:43:11;-1:-1:-1;;;;;5560:43:11;;;;;;;;;;-1:-1:-1;;;;4251:1359:11:o;1307:134:17:-;1365:7;1391:43;1395:1;1398;1391:43;;;;;;;;;;;;;;;;;:3;:43::i;1771:153:9:-;1867:5;1846:11;;;:7;:11;;;;;;;;;:18;;:26;;-1:-1:-1;;;;1846:26:9;;;1887:30;;;;;;;1854:2;;1887:30;;;;;;;;;1771:153;;:::o;1615:150::-;1688:11;;;;:7;:11;;;;;;;;;:18;;:25;;-1:-1:-1;;;;1688:25:9;-1:-1:-1;;;1688:25:9;;;1728:30;;;;;;;1696:2;;1728:30;;;;;;;;;1615:150;;:::o;1930:107::-;1989:4;2012:11;;;:7;:11;;;;;:18;;;-1:-1:-1;;;2012:18:9;;;;;1930:107::o;4108:137:11:-;-1:-1:-1;;;;;4195:17:11;;4172:4;4195:17;;;:6;:17;;;;;:29;;;;:43;;;4228:10;:8;:10::i;7018:511:6:-;7182:14;;7123:7;;;;7178:303;;7262:16;;;;:7;:16;;;;;;;;7287:10;7262:36;;:24;;;:36;;;;;:44;7234:16;;;;;;;:23;:73;;:27;:73::i;:::-;7217:90;;7178:303;;;7343:6;7338:133;7355:7;:14;7351:1;:18;7338:133;;;7412:7;:16;7420:7;7412:16;;;;;;;;;;;:24;;:36;7437:7;7445:1;7437:10;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7412:36:6;;;;;;;;;;;-1:-1:-1;7412:36:6;:44;7394:62;;;;;7371:3;;7338:133;;;;7178:303;7497:25;:14;7516:5;7497:18;:25::i;:::-;7490:32;7018:511;-1:-1:-1;;;;;7018:511:6:o;5466:1546::-;5548:15;5566:22;;;:10;:22;;;;;:30;;5634;;;;:37;5607:24;;5634:174;;5781:16;;;;:7;:16;;;;;:27;;5634:174;;;5713:22;;;;:10;:22;;;;;:30;;5634:174;5607:201;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5607:201:6;;;;;;;;;;;;;;;;-1:-1:-1;;5833:14:6;;5819:11;5877:22;;;:10;:22;;;;;:34;;;5607:201;;-1:-1:-1;;;5833:18:6;;;;5877:34;-1:-1:-1;5819:11:6;-1:-1:-1;;5935:15:6;;;:22;-1:-1:-1;5935:46:6;;5978:3;5935:46;;;5968:7;5960:5;:15;5935:46;5921:60;-1:-1:-1;5992:22:6;6045:5;6028:713;6057:3;6052:1;:8;6028:713;;6081:14;6098:7;6106:1;6098:10;;;;;;;;;;;;;;;;;;;6169:1;6126:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6126:32:6;;;;:24;;:32;;;;;;;:40;6098:10;;-1:-1:-1;6126:44:6;6122:609;;6208:16;;;;:7;:16;;;;;;;;-1:-1:-1;;;;;6208:32:6;;;;;:24;;;;:32;;;;;;:40;6340:22;;;:10;:22;;;;;:28;;;6295:32;;;;;;;;6190:58;;;;6295:74;;:44;:74::i;:::-;-1:-1:-1;;;;;6266:14:6;;;;;;;:6;:14;;;;;;;;:25;;:103;;;;;;;;6500:22;;;:10;:22;;;;;:29;;;6612:16;;;:7;:16;;;;;:32;;;:24;;:32;;;;;;:40;6393:260;;;;;;;;;;;6500:29;;;;;6266:14;;6408:10;;-1:-1:-1;;;;;;;;;;;6393:260:6;;;;;;;;6715:1;6672:16;;;:7;:16;;;;;;;;-1:-1:-1;;;;;6672:32:6;;;;:24;;:32;;;;;:44;6122:609;-1:-1:-1;6062:3:6;;6028:713;;;-1:-1:-1;6764:22:6;;;;:10;:22;;;;;:29;;;6750:69;;-1:-1:-1;;;;;6764:29:6;6795:7;6804:14;6750:13;:69::i;:::-;6830:22;;;;:10;:22;;;;;:34;;:40;;;6884:10;;;6880:126;;;6910:22;;;;:10;:22;;;;;;:32;;:39;;-1:-1:-1;;;;6910:39:6;-1:-1:-1;;;6910:39:6;;;6968:27;6921:10;;-1:-1:-1;;;;;;;;;;;6968:27:6;;5466:1546;;;;;;;;:::o;5617:1165:11:-;6199:11;;;;:7;:11;;;;;:18;:23;:37;;;;;6235:1;6226:6;:10;6199:37;6191:67;;;;;-1:-1:-1;;;6191:67:11;;;;;;;;;;;;-1:-1:-1;;;6191:67:11;;;;;;;;;;;;;;;6290:6;6269:7;:11;6277:2;6269:11;;;;;;;;;;;:18;;:27;;;;6329:8;6306:7;:11;6314:2;6306:11;;;;;;;;;;;:20;;:31;;;;6393:4;6347:7;:11;6355:2;6347:11;;;;;;;;;;;:19;;:31;6367:10;-1:-1:-1;;;;;6347:31:11;-1:-1:-1;;;;;6347:31:11;;;;;;;;;;;;:43;;;:50;;;;;;;;;;;;;;;;;;6451:4;6407:7;:11;6415:2;6407:11;;;;;;;;;;;:19;;:30;6427:9;-1:-1:-1;;;;;6407:30:11;-1:-1:-1;;;;;6407:30:11;;;;;;;;;;;;:41;;;:48;;;;;;;;;;;;;;;;;;6466:262;6476:2;6498:12;6530:15;6565:14;6599:24;6643:21;6684:9;6713:14;6466:9;:262::i;:::-;6739:36;6753:9;6764:2;6768:6;6739:13;:36::i;:::-;5617:1165;;;;;;;;;;;:::o;2043:114:9:-;-1:-1:-1;;;;;2129:12:9;2106:4;2129:12;;;:6;:12;;;;;:21;;;;;;;2043:114::o;2354:1317:7:-;2447:7;2558:11;;;:7;:11;;;;;:30;;:37;2447:7;;2518:15;;-1:-1:-1;;2558:41:7;2544:835;2629:19;2651:11;;;:7;:11;;;;;:30;;:33;;2682:1;;2651:33;;;;;;;;;;;;;;;;;;:36;;2701:12;2716:11;;;:7;:11;;;;;:30;;:33;;2651:36;;-1:-1:-1;2701:12:7;;2747:1;;2716:33;;;;;;;;;;;;;;;;2750:1;2716:36;;;;;;;;;2766:19;2804:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2804:28:7;;;;:19;;:28;;;;;:37;;;2716:36;;-1:-1:-1;2766:19:7;2804:52;-1:-1:-1;2800:569:7;;2906:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2906:28:7;;;;:19;;:28;;;;;:37;;;2890:66;;2950:5;;2891:53;;:10;;:14;:53::i;2890:66::-;2876:80;-1:-1:-1;2978:16:7;2974:37;;-1:-1:-1;3010:1:7;2974:37;3042:34;3070:5;3043:21;:11;3059:4;3043:15;:21::i;:::-;3042:27;;:34::i;:::-;3029:47;;;;3094:5;;;;;2800:569;3152:40;3186:5;3153:27;:10;3168:11;3153:14;:27::i;3152:40::-;3138:54;-1:-1:-1;3214:16:7;3210:37;;-1:-1:-1;3246:1:7;3210:37;3278:11;;-1:-1:-1;3278:11:7;;3320:34;3348:5;3321:21;:11;3337:4;3321:15;:21::i;3320:34::-;3307:47;;;;-1:-1:-1;;;;;2609:3:7;2544:835;;;-1:-1:-1;3436:11:7;;;;:7;:11;;;;;:20;;;3418:39;;:9;;3432:2;:24;3418:13;:39::i;:::-;3507:17;3538:11;;;:7;:11;;;;;:32;;;3406:51;;-1:-1:-1;3507:17:7;3527:56;;3577:5;;3528:43;;:5;;:9;:43::i;3527:56::-;3614:11;;;;:7;:11;;;;;:34;;;3507:76;;-1:-1:-1;3600:64:7;;3614:49;;3507:76;3614:38;:49::i;:::-;3600:9;;:13;:64::i;:::-;3593:71;2354:1317;-1:-1:-1;;;;;;;2354:1317:7:o;2304:459:17:-;2362:7;2603:6;2599:45;;-1:-1:-1;2632:1:17;2625:8;;2599:45;2666:5;;;2670:1;2666;:5;:1;2689:5;;;;;:10;2681:56;;;;-1:-1:-1;;;2681:56:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3218:130;3276:7;3302:39;3306:1;3309;3302:39;;;;;;;;;;;;;;;;;:3;:39::i;762:516:14:-;852:4;;868:382;892:37;888:1;:41;868:382;;;999:1;954:30;985:1;954:33;;;;;;;;;-1:-1:-1;;;;;954:33:14;:47;950:290;;1021:27;1065:30;1096:1;1065:33;;;;;;;;;1129:30;;;-1:-1:-1;;;1129:30:14;;-1:-1:-1;;;;;1129:30:14;;;;;;;;;1065:33;;;;-1:-1:-1;1121:51:14;;;;1065:33;;1129:21;;:30;;;;;;;;;;;;;;1065:33;1129:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1129:30:14;-1:-1:-1;;;;;1121:51:14;;1117:109;;;1203:4;1196:11;;;;;;1117:109;950:290;;931:3;;868:382;;;-1:-1:-1;1266:5:14;;762:516;-1:-1:-1;;;762:516:14:o;4413:306:7:-;4504:19;4538:1;4526:9;:13;:51;;-1:-1:-1;;;;;4554:12:7;;;;;;:6;:12;;;;;:23;;;4526:51;;;4542:9;4526:51;4504:73;;4601:69;4617:32;4629:4;4635:2;4639;4643:5;4617:11;:32::i;:::-;4601:69;;;;;;;;;;;;-1:-1:-1;;;4601:69:7;;;;:11;;:69;:15;:69::i;:::-;4587:83;;4680:32;4694:4;4700:11;4680:13;:32::i;6933:516:8:-;7151:15;:2;-1:-1:-1;;;;;7151:13:8;;:15::i;:::-;7148:295;;;7302:47;;;-1:-1:-1;;;;;7207:142:8;;7224:2;-1:-1:-1;;;;;7207:38:8;;7246:8;7256:4;7262:2;7266:5;7273:4;7207:71;;;;;;;;;;;;;-1:-1:-1;;;;;7207:71:8;;;;;;-1:-1:-1;;;;;7207:71:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7207:71:8;-1:-1:-1;;;;;;7207:142:8;;7182:250;;;;-1:-1:-1;;;7182:250:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1671:225:12;-1:-1:-1;;;;;1744:22:12;;1736:73;;;;-1:-1:-1;;;1736:73:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1845:6;;1824:38;;-1:-1:-1;;;;;1824:38:12;;;;1845:6;;1824:38;;1845:6;;1824:38;1872:6;:17;;-1:-1:-1;;;;;;1872:17:12;-1:-1:-1;;;;;1872:17:12;;;;;;;;;;1671:225::o;6788:766:11:-;6892:11;;;;:7;:11;;;;;:22;;:25;;6879:668;;6892:11;:25;;;;;;;;;;;;;;;;6970:11;;;:7;:11;;;;;;;:18;;6892:25;7011:20;;;6879:668;;;;;;;7114:34;;;;6879:668;;7173:32;;;;6879:668;;;;7230:11;;;;;;;:30;;;;:33;;-1:-1:-1;;;;;6892:25:11;;;;6940:7;;6970:18;;7011:20;;7054:12;;6879:668;;;;;;7230:30;6892:25;7230:33;;;;;;;;;;;;;;7264:1;7230:36;;;;;;;;;6879:668;;7312:11;;;;:7;:11;;;;;;;;;:26;;6879:668;;;;;;;;;;;;;;;;;7312:26;;6879:668;;7312:26;6879:668;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6879:668:11;;;;;;;;;;;;;;;;-1:-1:-1;;;7361:11:11;;;;:7;:11;;;;;;;;;:36;;6879:668;;;;;;;;;;;;;;;;;;;-1:-1:-1;7361:36:11;-1:-1:-1;6879:668:11;;7361:36;6879:668;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7420:11:11;;;;:7;:11;;;;;:33;;;;7476:21;;;;;7420:33;;-1:-1:-1;7476:21:11;-1:-1:-1;;;7476:21:11;;;;-1:-1:-1;;;;;;7520:26:11;6879:12;:668::i;607:320:18:-;660:4;695:1;690;:6;;;676:187;;-1:-1:-1;724:16:18;:20;;:16;719:26;712:33;;676:187;778:1;766:14;;:2;:14;;:32;;;;;796:2;790:1;784:14;;;;766:32;762:101;;;-1:-1:-1;826:25:18;;;:16;821:31;814:38;;2429:241:9;2530:12;2563:34;2577:4;2583:2;2587;2591:5;2563:13;:34::i;:::-;2562:35;2554:54;;;;;-1:-1:-1;;;2554:54:9;;;;;;;;;;;;-1:-1:-1;;;2554:54:9;;;;;;;;;;;;;;;2625:38;2643:4;2649:2;2653;2657:5;2625:17;:38::i;1877:187:17:-;1963:7;1998:12;1990:6;;;;1982:29;;;;-1:-1:-1;;;1982:29:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2033:5:17;;;1877:187::o;5187:290:7:-;5278:1;5266:9;:13;:32;;;;;5297:1;5283:11;:15;5266:32;5262:209;;;-1:-1:-1;;;;;5338:12:7;;;;;;:6;:12;;;;;:23;;;:40;;5366:11;5338:27;:40::i;:::-;-1:-1:-1;;;;;5312:12:7;;;;;;:6;:12;;;;;:23;;:66;5262:209;;;5397:9;5393:78;;-1:-1:-1;;;;;5425:12:7;;;;;;;;:6;:12;;;;;:23;;:37;5187:290::o;590:797:16:-;650:4;1298:20;;1143:66;1337:15;;;;;:42;;-1:-1:-1;1356:23:16;;;1329:51;-1:-1:-1;;590:797:16:o;976:255:13:-;1082:11;;;;:7;:11;;;;;:21;;;-1:-1:-1;;;1082:21:13;;;;1081:22;;:67;;-1:-1:-1;1107:11:13;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1107:30:13;;;;:19;;:30;;;;;:41;;;;;;;;1081:67;1073:100;;;;;-1:-1:-1;;;1073:100:13;;;;;;;;;;;;-1:-1:-1;;;1073:100:13;;;;;;;;;;;;;;;1183:41;1203:9;1214:2;1218:5;1183:19;:41::i;3969:338:17:-;4055:7;4155:12;4148:5;4140:28;;;;-1:-1:-1;;;4140:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4178:9;4194:1;4190;:5;;;;;;;3969:338;-1:-1:-1;;;;;3969:338:17:o;2163:213:9:-;2262:4;2285:18;2300:2;2285:14;:18::i;:::-;:44;;;;2307:22;2324:4;2307:16;:22::i;:::-;2285:68;;;;2333:20;2350:2;2333:16;:20::i;:::-;2285:84;;;-1:-1:-1;;2358:10:9;;2163:213;-1:-1:-1;;;2163:213:9:o;3677:683:7:-;3837:68;;;;;;;;;;;-1:-1:-1;;;3837:68:7;;;;;;;;3777:12;3837:11;;;:7;:11;;;;;-1:-1:-1;;;;;3837:25:7;;;;:19;;:25;;;;;;:33;:68;;3875:5;;3837:37;:68::i;:::-;3801:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;3801:25:7;;;;:19;;:25;;;;;:104;3915:28;3929:2;3809;3937:5;3915:13;:28::i;:::-;3961:33;3978:4;3984:2;3988:5;3961:16;:33::i;:::-;3954:40;;4010:9;4005:327;4029:11;;;;:7;:11;;;;;:26;;:33;4025:37;;4005:327;;;4083:21;4107:11;;;:7;:11;;;;;:26;;:29;;4134:1;;4107:29;;;;;;;;;;;;;;;;;;4185:11;;;:7;:11;;;;;;:36;;:39;;-1:-1:-1;;;;;4107:29:7;;;;-1:-1:-1;4185:36:7;4222:1;;4185:39;;;;;;;;;;;;;;;;;-1:-1:-1;4274:47:7;4315:5;4275:34;:4;4185:39;4275:8;:34::i;4274:47::-;-1:-1:-1;;;;;4238:21:7;;;;;;;:6;:21;;;;;:32;;;;:83;;;;;;;;-1:-1:-1;4064:3:7;4005:327;;1308:1006;1404:18;1425:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1425:30:7;;;;:19;;:30;;;;;:38;:49;;1468:5;1425:42;:49::i;:::-;1489:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1489:30:7;;;;:19;;:30;;;;;:38;1404:70;;-1:-1:-1;1485:761:7;;1554:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1554:30:7;;;;:19;;:30;;;;;:39;;;;;;;;1549:225;;-1:-1:-1;;;;;1613:17:7;;;;;;:6;:17;;;;;;;;:24;;:33;;;;;;;;;;;;;;;;;;1664:11;;;:7;:11;;;;;:22;;;:38;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1664:38:7;;;;;1720:30;;;;:19;;;;:30;;1549:225;1788:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1788:30:7;;;;:19;;:30;;;;;1830:15;1788:39;;;;:57;1485:761;;;1956:20;1999:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1999:30:7;;;;:19;;:30;;;;;:39;;;1979:60;;:15;;:19;:60::i;:::-;2053:19;2076:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2076:30:7;;;;:19;;:30;;;;;:38;1956:83;;-1:-1:-1;2053:19:7;2075:74;;2138:10;;2076:56;;1956:83;2076:42;:56::i;2075:74::-;2164:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2164:30:7;;;;:19;;:30;;;;;2206:15;:29;;;;2164:39;;;;:71;-1:-1:-1;;1485:761:7;2256:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2256:30:7;;;;;:19;;;;:30;;;;;;:51;;;;-1:-1:-1;1308:1006:7:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.1;\n\nimport './interfaces/IERC1155Metadata.sol';\nimport \"./utils/SafeMath.sol\";\nimport './utils/StringUtils.sol';\nimport './lib/Callable.sol';\n\ncontract StashBlox is Callable, IERC1155Metadata, StringUtils {\n\n    using SafeMath for uint256;\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        _config.callbackAutoExecuteMaxAddresses = 50;\n        _config.baseURI = \"http://stashblox.com/tokens/\";\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @dev Function to withdraw ETH from the contract.\n     * @param to recipent address\n     * @param amount amount to withdraw\n     */\n    function withdraw(address to, uint256 amount) external onlyOwner {\n        require(_users[to].ETHBalance >= amount, \"Insufficient balance\");\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Withdrawal failed\");\n        _users[to].ETHBalance -= amount;\n    }\n\n    /**\n     * @dev Function to make an ETH deposit that can be used to pay token transfer .\n     * @param to recipent address\n     */\n    function deposit(address to) external payable {\n        _users[to].ETHBalance = _users[to].ETHBalance.add(msg.value);\n    }\n\n    /**\n     * @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer()).\n     */\n    receive() external payable {\n        _users[msg.sender].ETHBalance = _users[msg.sender].ETHBalance.add(msg.value);\n    }\n\n    /**\n     * @param id Token ID\n     * @return URI string\n     */\n    function uri(uint256 id) external view override returns (string memory) {\n        return _strConcat(_config.baseURI, _toHexString(id));\n    }\n\n\n}\n",
  "sourcePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
  "ast": {
    "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
    "exportedSymbols": {
      "StashBlox": [
        139
      ]
    },
    "id": 140,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "45:23:0"
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol",
        "file": "./interfaces/IERC1155Metadata.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 140,
        "sourceUnit": 271,
        "src": "70:43:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol",
        "file": "./utils/SafeMath.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 140,
        "sourceUnit": 3650,
        "src": "114:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol",
        "file": "./utils/StringUtils.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 140,
        "sourceUnit": 3970,
        "src": "145:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol",
        "file": "./lib/Callable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 140,
        "sourceUnit": 1040,
        "src": "179:28:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 6,
              "name": "Callable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1039,
              "src": "231:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Callable_$1039",
                "typeString": "contract Callable"
              }
            },
            "id": 7,
            "nodeType": "InheritanceSpecifier",
            "src": "231:8:0"
          },
          {
            "baseName": {
              "id": 8,
              "name": "IERC1155Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 270,
              "src": "241:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1155Metadata_$270",
                "typeString": "contract IERC1155Metadata"
              }
            },
            "id": 9,
            "nodeType": "InheritanceSpecifier",
            "src": "241:16:0"
          },
          {
            "baseName": {
              "id": 10,
              "name": "StringUtils",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3969,
              "src": "259:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StringUtils_$3969",
                "typeString": "contract StringUtils"
              }
            },
            "id": 11,
            "nodeType": "InheritanceSpecifier",
            "src": "259:11:0"
          }
        ],
        "contractDependencies": [
          258,
          270,
          320,
          343,
          1039,
          1660,
          2117,
          2346,
          2506,
          3027,
          3119,
          3205,
          3296,
          3406,
          3969
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 139,
        "linearizedBaseContracts": [
          139,
          3969,
          270,
          1039,
          2346,
          3205,
          2506,
          3027,
          2117,
          3296,
          3119,
          343,
          1660,
          3406,
          258,
          320
        ],
        "name": "StashBlox",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 14,
            "libraryName": {
              "id": 12,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3649,
              "src": "284:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3649",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "278:27:0",
            "typeName": {
              "id": 13,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "297:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "body": {
              "id": 35,
              "nodeType": "Block",
              "src": "422:159:0",
              "statements": [
                {
                  "expression": {
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 18,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3393,
                        "src": "432:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3365_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 20,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "callbackAutoExecuteMaxAddresses",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3358,
                      "src": "432:39:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "3530",
                      "id": 21,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "474:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_50_by_1",
                        "typeString": "int_const 50"
                      },
                      "value": "50"
                    },
                    "src": "432:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 23,
                  "nodeType": "ExpressionStatement",
                  "src": "432:44:0"
                },
                {
                  "expression": {
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 24,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3393,
                        "src": "486:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3365_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 26,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "baseURI",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3360,
                      "src": "486:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "687474703a2f2f7374617368626c6f782e636f6d2f746f6b656e732f",
                      "id": 27,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "504:30:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_699ad49e673d0ba571e0814a1cc2e9c5b4688dea54cab55db91df34a385ab8a4",
                        "typeString": "literal_string \"http://stashblox.com/tokens/\""
                      },
                      "value": "http://stashblox.com/tokens/"
                    },
                    "src": "486:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 29,
                  "nodeType": "ExpressionStatement",
                  "src": "486:48:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 31,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "563:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 32,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "563:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 30,
                      "name": "_transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3106,
                      "src": "544:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 33,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "544:30:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34,
                  "nodeType": "ExpressionStatement",
                  "src": "544:30:0"
                }
              ]
            },
            "documentation": {
              "id": 15,
              "nodeType": "StructuredDocumentation",
              "src": "311:91:0",
              "text": " @dev Initializes the contract setting the deployer as the initial owner."
            },
            "id": 36,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "419:2:0"
            },
            "returnParameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "422:0:0"
            },
            "scope": 139,
            "src": "407:174:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 77,
              "nodeType": "Block",
              "src": "798:224:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 52,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 47,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3397,
                              "src": "816:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 49,
                            "indexExpression": {
                              "id": 48,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39,
                              "src": "823:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "816:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3308_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 50,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3304,
                          "src": "816:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 51,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41,
                          "src": "841:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "816:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "849:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 46,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "808:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 54,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "808:64:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 55,
                  "nodeType": "ExpressionStatement",
                  "src": "808:64:0"
                },
                {
                  "assignments": [
                    57,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 57,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 77,
                      "src": "883:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 56,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "883:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 64,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 62,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "924:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 58,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39,
                          "src": "901:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 59,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "901:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 61,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 60,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41,
                          "src": "916:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "901:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 63,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "901:26:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "882:45:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 66,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 57,
                        "src": "945:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5769746864726177616c206661696c6564",
                        "id": 67,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "954:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        },
                        "value": "Withdrawal failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        }
                      ],
                      "id": 65,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "937:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 68,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "937:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69,
                  "nodeType": "ExpressionStatement",
                  "src": "937:37:0"
                },
                {
                  "expression": {
                    "id": 75,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 70,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3397,
                          "src": "984:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 72,
                        "indexExpression": {
                          "id": 71,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39,
                          "src": "991:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "984:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3308_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 73,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3304,
                      "src": "984:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 74,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 41,
                      "src": "1009:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "984:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 76,
                  "nodeType": "ExpressionStatement",
                  "src": "984:31:0"
                }
              ]
            },
            "documentation": {
              "id": 37,
              "nodeType": "StructuredDocumentation",
              "src": "587:141:0",
              "text": " @dev Function to withdraw ETH from the contract.\n @param to recipent address\n @param amount amount to withdraw"
            },
            "functionSelector": "f3fef3a3",
            "id": 78,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 44,
                "modifierName": {
                  "id": 43,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3056,
                  "src": "788:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "788:9:0"
              }
            ],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 42,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "751:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 38,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "751:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "763:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 40,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "763:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "750:28:0"
            },
            "returnParameters": {
              "id": 45,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "798:0:0"
            },
            "scope": 139,
            "src": "733:289:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 98,
              "nodeType": "Block",
              "src": "1209:77:0",
              "statements": [
                {
                  "expression": {
                    "id": 96,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 84,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3397,
                          "src": "1219:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 86,
                        "indexExpression": {
                          "id": 85,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 81,
                          "src": "1226:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1219:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3308_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 87,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3304,
                      "src": "1219:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 93,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1269:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 94,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1269:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 88,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3397,
                              "src": "1243:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 90,
                            "indexExpression": {
                              "id": 89,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 81,
                              "src": "1250:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1243:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3308_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 91,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3304,
                          "src": "1243:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 92,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3482,
                        "src": "1243:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 95,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1243:36:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1219:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 97,
                  "nodeType": "ExpressionStatement",
                  "src": "1219:60:0"
                }
              ]
            },
            "documentation": {
              "id": 79,
              "nodeType": "StructuredDocumentation",
              "src": "1028:130:0",
              "text": " @dev Function to make an ETH deposit that can be used to pay token transfer .\n @param to recipent address"
            },
            "functionSelector": "f340fa01",
            "id": 99,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 82,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 81,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 99,
                  "src": "1180:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 80,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1180:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1179:12:0"
            },
            "returnParameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1209:0:0"
            },
            "scope": 139,
            "src": "1163:123:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 119,
              "nodeType": "Block",
              "src": "1468:93:0",
              "statements": [
                {
                  "expression": {
                    "id": 117,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 103,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3397,
                          "src": "1478:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 106,
                        "indexExpression": {
                          "expression": {
                            "id": 104,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1485:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 105,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1485:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1478:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3308_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 107,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3304,
                      "src": "1478:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 114,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1544:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 115,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1544:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 108,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3397,
                              "src": "1510:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 111,
                            "indexExpression": {
                              "expression": {
                                "id": 109,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1517:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 110,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1517:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1510:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3308_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 112,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3304,
                          "src": "1510:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3482,
                        "src": "1510:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 116,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1510:44:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1478:76:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 118,
                  "nodeType": "ExpressionStatement",
                  "src": "1478:76:0"
                }
              ]
            },
            "documentation": {
              "id": 100,
              "nodeType": "StructuredDocumentation",
              "src": "1292:144:0",
              "text": " @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer())."
            },
            "id": 120,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 101,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1448:2:0"
            },
            "returnParameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1468:0:0"
            },
            "scope": 139,
            "src": "1441:120:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              269
            ],
            "body": {
              "id": 137,
              "nodeType": "Block",
              "src": "1707:69:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 130,
                          "name": "_config",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3393,
                          "src": "1735:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Config_$3365_storage",
                            "typeString": "struct StashBloxData.Config storage ref"
                          }
                        },
                        "id": 131,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "baseURI",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3360,
                        "src": "1735:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 133,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 123,
                            "src": "1765:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 132,
                          "name": "_toHexString",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3890,
                          "src": "1752:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (string memory)"
                          }
                        },
                        "id": 134,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1752:16:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 129,
                      "name": "_strConcat",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3750,
                      "src": "1724:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (string memory,string memory) pure returns (string memory)"
                      }
                    },
                    "id": 135,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1724:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 128,
                  "id": 136,
                  "nodeType": "Return",
                  "src": "1717:52:0"
                }
              ]
            },
            "documentation": {
              "id": 121,
              "nodeType": "StructuredDocumentation",
              "src": "1567:63:0",
              "text": " @param id Token ID\n @return URI string"
            },
            "functionSelector": "0e89341c",
            "id": 138,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 125,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1674:8:0"
            },
            "parameters": {
              "id": 124,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 123,
                  "mutability": "mutable",
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 138,
                  "src": "1648:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 122,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1648:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1647:12:0"
            },
            "returnParameters": {
              "id": 128,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 127,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 138,
                  "src": "1692:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 126,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1692:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1691:15:0"
            },
            "scope": 139,
            "src": "1635:141:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 140,
        "src": "209:1571:0"
      }
    ],
    "src": "45:1736:0"
  },
  "legacyAST": {
    "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
    "exportedSymbols": {
      "StashBlox": [
        139
      ]
    },
    "id": 140,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "45:23:0"
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol",
        "file": "./interfaces/IERC1155Metadata.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 140,
        "sourceUnit": 271,
        "src": "70:43:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol",
        "file": "./utils/SafeMath.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 140,
        "sourceUnit": 3650,
        "src": "114:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol",
        "file": "./utils/StringUtils.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 140,
        "sourceUnit": 3970,
        "src": "145:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol",
        "file": "./lib/Callable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 140,
        "sourceUnit": 1040,
        "src": "179:28:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 6,
              "name": "Callable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1039,
              "src": "231:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Callable_$1039",
                "typeString": "contract Callable"
              }
            },
            "id": 7,
            "nodeType": "InheritanceSpecifier",
            "src": "231:8:0"
          },
          {
            "baseName": {
              "id": 8,
              "name": "IERC1155Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 270,
              "src": "241:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1155Metadata_$270",
                "typeString": "contract IERC1155Metadata"
              }
            },
            "id": 9,
            "nodeType": "InheritanceSpecifier",
            "src": "241:16:0"
          },
          {
            "baseName": {
              "id": 10,
              "name": "StringUtils",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3969,
              "src": "259:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StringUtils_$3969",
                "typeString": "contract StringUtils"
              }
            },
            "id": 11,
            "nodeType": "InheritanceSpecifier",
            "src": "259:11:0"
          }
        ],
        "contractDependencies": [
          258,
          270,
          320,
          343,
          1039,
          1660,
          2117,
          2346,
          2506,
          3027,
          3119,
          3205,
          3296,
          3406,
          3969
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 139,
        "linearizedBaseContracts": [
          139,
          3969,
          270,
          1039,
          2346,
          3205,
          2506,
          3027,
          2117,
          3296,
          3119,
          343,
          1660,
          3406,
          258,
          320
        ],
        "name": "StashBlox",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 14,
            "libraryName": {
              "id": 12,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3649,
              "src": "284:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3649",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "278:27:0",
            "typeName": {
              "id": 13,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "297:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "body": {
              "id": 35,
              "nodeType": "Block",
              "src": "422:159:0",
              "statements": [
                {
                  "expression": {
                    "id": 22,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 18,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3393,
                        "src": "432:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3365_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 20,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "callbackAutoExecuteMaxAddresses",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3358,
                      "src": "432:39:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "3530",
                      "id": 21,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "474:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_50_by_1",
                        "typeString": "int_const 50"
                      },
                      "value": "50"
                    },
                    "src": "432:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 23,
                  "nodeType": "ExpressionStatement",
                  "src": "432:44:0"
                },
                {
                  "expression": {
                    "id": 28,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 24,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3393,
                        "src": "486:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3365_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 26,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "baseURI",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3360,
                      "src": "486:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "687474703a2f2f7374617368626c6f782e636f6d2f746f6b656e732f",
                      "id": 27,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "504:30:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_699ad49e673d0ba571e0814a1cc2e9c5b4688dea54cab55db91df34a385ab8a4",
                        "typeString": "literal_string \"http://stashblox.com/tokens/\""
                      },
                      "value": "http://stashblox.com/tokens/"
                    },
                    "src": "486:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 29,
                  "nodeType": "ExpressionStatement",
                  "src": "486:48:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 31,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "563:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 32,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "563:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 30,
                      "name": "_transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3106,
                      "src": "544:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 33,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "544:30:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 34,
                  "nodeType": "ExpressionStatement",
                  "src": "544:30:0"
                }
              ]
            },
            "documentation": {
              "id": 15,
              "nodeType": "StructuredDocumentation",
              "src": "311:91:0",
              "text": " @dev Initializes the contract setting the deployer as the initial owner."
            },
            "id": 36,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 16,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "419:2:0"
            },
            "returnParameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "422:0:0"
            },
            "scope": 139,
            "src": "407:174:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 77,
              "nodeType": "Block",
              "src": "798:224:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 52,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 47,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3397,
                              "src": "816:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 49,
                            "indexExpression": {
                              "id": 48,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 39,
                              "src": "823:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "816:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3308_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 50,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3304,
                          "src": "816:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 51,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41,
                          "src": "841:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "816:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "849:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 46,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "808:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 54,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "808:64:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 55,
                  "nodeType": "ExpressionStatement",
                  "src": "808:64:0"
                },
                {
                  "assignments": [
                    57,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 57,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 77,
                      "src": "883:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 56,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "883:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 64,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 62,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "924:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 58,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39,
                          "src": "901:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 59,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "901:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 61,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 60,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 41,
                          "src": "916:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "901:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 63,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "901:26:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "882:45:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 66,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 57,
                        "src": "945:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5769746864726177616c206661696c6564",
                        "id": 67,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "954:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        },
                        "value": "Withdrawal failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        }
                      ],
                      "id": 65,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "937:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 68,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "937:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 69,
                  "nodeType": "ExpressionStatement",
                  "src": "937:37:0"
                },
                {
                  "expression": {
                    "id": 75,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 70,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3397,
                          "src": "984:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 72,
                        "indexExpression": {
                          "id": 71,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 39,
                          "src": "991:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "984:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3308_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 73,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3304,
                      "src": "984:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 74,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 41,
                      "src": "1009:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "984:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 76,
                  "nodeType": "ExpressionStatement",
                  "src": "984:31:0"
                }
              ]
            },
            "documentation": {
              "id": 37,
              "nodeType": "StructuredDocumentation",
              "src": "587:141:0",
              "text": " @dev Function to withdraw ETH from the contract.\n @param to recipent address\n @param amount amount to withdraw"
            },
            "functionSelector": "f3fef3a3",
            "id": 78,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 44,
                "modifierName": {
                  "id": 43,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3056,
                  "src": "788:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "788:9:0"
              }
            ],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 42,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "751:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 38,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "751:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 41,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 78,
                  "src": "763:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 40,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "763:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "750:28:0"
            },
            "returnParameters": {
              "id": 45,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "798:0:0"
            },
            "scope": 139,
            "src": "733:289:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 98,
              "nodeType": "Block",
              "src": "1209:77:0",
              "statements": [
                {
                  "expression": {
                    "id": 96,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 84,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3397,
                          "src": "1219:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 86,
                        "indexExpression": {
                          "id": 85,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 81,
                          "src": "1226:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1219:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3308_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 87,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3304,
                      "src": "1219:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 93,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1269:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 94,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1269:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 88,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3397,
                              "src": "1243:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 90,
                            "indexExpression": {
                              "id": 89,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 81,
                              "src": "1250:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1243:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3308_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 91,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3304,
                          "src": "1243:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 92,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3482,
                        "src": "1243:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 95,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1243:36:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1219:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 97,
                  "nodeType": "ExpressionStatement",
                  "src": "1219:60:0"
                }
              ]
            },
            "documentation": {
              "id": 79,
              "nodeType": "StructuredDocumentation",
              "src": "1028:130:0",
              "text": " @dev Function to make an ETH deposit that can be used to pay token transfer .\n @param to recipent address"
            },
            "functionSelector": "f340fa01",
            "id": 99,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 82,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 81,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 99,
                  "src": "1180:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 80,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1180:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1179:12:0"
            },
            "returnParameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1209:0:0"
            },
            "scope": 139,
            "src": "1163:123:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 119,
              "nodeType": "Block",
              "src": "1468:93:0",
              "statements": [
                {
                  "expression": {
                    "id": 117,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 103,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3397,
                          "src": "1478:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 106,
                        "indexExpression": {
                          "expression": {
                            "id": 104,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1485:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 105,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1485:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1478:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3308_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 107,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3304,
                      "src": "1478:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 114,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1544:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 115,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1544:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 108,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3397,
                              "src": "1510:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3308_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 111,
                            "indexExpression": {
                              "expression": {
                                "id": 109,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1517:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 110,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1517:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1510:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3308_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 112,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3304,
                          "src": "1510:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3482,
                        "src": "1510:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 116,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1510:44:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1478:76:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 118,
                  "nodeType": "ExpressionStatement",
                  "src": "1478:76:0"
                }
              ]
            },
            "documentation": {
              "id": 100,
              "nodeType": "StructuredDocumentation",
              "src": "1292:144:0",
              "text": " @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer())."
            },
            "id": 120,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 101,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1448:2:0"
            },
            "returnParameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1468:0:0"
            },
            "scope": 139,
            "src": "1441:120:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              269
            ],
            "body": {
              "id": 137,
              "nodeType": "Block",
              "src": "1707:69:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 130,
                          "name": "_config",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3393,
                          "src": "1735:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Config_$3365_storage",
                            "typeString": "struct StashBloxData.Config storage ref"
                          }
                        },
                        "id": 131,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "baseURI",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3360,
                        "src": "1735:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 133,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 123,
                            "src": "1765:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 132,
                          "name": "_toHexString",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3890,
                          "src": "1752:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (string memory)"
                          }
                        },
                        "id": 134,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1752:16:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 129,
                      "name": "_strConcat",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3750,
                      "src": "1724:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (string memory,string memory) pure returns (string memory)"
                      }
                    },
                    "id": 135,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1724:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 128,
                  "id": 136,
                  "nodeType": "Return",
                  "src": "1717:52:0"
                }
              ]
            },
            "documentation": {
              "id": 121,
              "nodeType": "StructuredDocumentation",
              "src": "1567:63:0",
              "text": " @param id Token ID\n @return URI string"
            },
            "functionSelector": "0e89341c",
            "id": 138,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 125,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1674:8:0"
            },
            "parameters": {
              "id": 124,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 123,
                  "mutability": "mutable",
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 138,
                  "src": "1648:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 122,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1648:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1647:12:0"
            },
            "returnParameters": {
              "id": 128,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 127,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 138,
                  "src": "1692:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 126,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1692:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1691:15:0"
            },
            "scope": 139,
            "src": "1635:141:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 140,
        "src": "209:1571:0"
      }
    ],
    "src": "45:1736:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.1+commit.f4a555be.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-10-21T13:10:21.825Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptCallback(uint256)": {
        "details": "Accept a callback",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "approveCallback(uint256)": {
        "details": "Approve a callback",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "approveHolder(uint256,address)": {
        "details": "Function to approve holder for a private token.",
        "params": {
          "holder": "The authorized address",
          "id": "the token id"
        }
      },
      "authorizeMaintener(uint256,address)": {
        "details": "Function to authorize an address to maintain a token.",
        "params": {
          "maintener": "The authorized address"
        }
      },
      "authorizeTokenizer(address)": {
        "details": "Function to authorize an address to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "averageAge(address,uint256)": {
        "details": "Function to get the average age of the token for the given address.",
        "params": {
          "account": "the address from where to transfer the tokens",
          "id": "The token ID"
        },
        "returns": {
          "_0": "average age in seconds"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "Get the specified address' balance for token with specified ID. Attempting to query the zero account for a balance will result in a revert.",
        "params": {
          "account": "The address of the token holder",
          "id": "ID of the token"
        },
        "returns": {
          "_0": "The account's balance of the token type requested"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "Get the balance of multiple account/token pairs. If any of the query accounts is the zero account, this query will revert.",
        "params": {
          "accounts": "The addresses of the token holders",
          "ids": "IDs of the tokens"
        },
        "returns": {
          "_0": "Balances for each account and token id pair"
        }
      },
      "cloneToken(uint256,uint256[],uint256[])": {
        "details": "Function to mint tokens in batch.",
        "params": {
          "id": "Identifier of the template",
          "ids": "list of IDs of the tokens to be minted",
          "metadataHashes": "list of metadata file hashes"
        }
      },
      "constructor": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "createToken(address,uint256,uint256,uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)": {
        "details": "Function to mint an amount of a token with the given ID.",
        "params": {
          "feesRecipients": "list of addresses receiving transfer fees",
          "feesRecipientsPercentage": "list of percentage, each one for the corresponding feesRecipients",
          "id": "ID of the token to be minted",
          "isPrivate": "true if holder need approval",
          "legalAuthority": "address of the legal authority",
          "metadataHash": "Metadata file hash",
          "minHoldingForCallback": "minimum holding to propose a callback",
          "recipient": "The address that will own the minted tokens",
          "supply": "Amount of the token to be minted",
          "transactionFees": "transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]"
        }
      },
      "deposit(address)": {
        "details": "Function to make an ETH deposit that can be used to pay token transfer .",
        "params": {
          "to": "recipent address"
        }
      },
      "executeCallback(uint256,uint256)": {
        "details": "Accept a callback. Caller need to recall the function to continue the callback until completed.",
        "params": {
          "callbackId": "callback proposition ID",
          "maxCall": "maximal call to excute"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "The account of the Tokens",
          "operator": "Address of authorized operator"
        },
        "returns": {
          "_0": "True if the operator is approved, false if not"
        }
      },
      "isLockedAddress(address)": {
        "details": "Function to check if an address is lockec.",
        "params": {
          "addr": "The address to check"
        }
      },
      "isLockedToken(uint256)": {
        "details": "Function to check if a token is locked.",
        "params": {
          "id": "The token ID"
        }
      },
      "isMaintener(uint256,address)": {
        "details": "Function to check if an address is authorized to maintain a token.",
        "params": {
          "id": "the token id",
          "maintener": "The authorized address"
        },
        "returns": {
          "_0": "true if it's a maintener address"
        }
      },
      "isTokenizer(address)": {
        "details": "Function to check if an address is authorized to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "lockAddress(address)": {
        "details": "Function to lock an address.",
        "params": {
          "addr": "The address to lock"
        }
      },
      "lockToken(uint256,uint256)": {
        "details": "Function to lock a token.",
        "params": {
          "id": "The token ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proposeCallback(uint256,uint256,uint256,address[],uint256)": {
        "details": "Propose to buy the whole supply of a token. The proposer must hold minHoldingForCallback% of the total supply. StashBlox must approve the price with acceptCallback();",
        "params": {
          "callees": "list of calless. Empty list means all holders.",
          "price": "proposed price",
          "tokenId": "Token ID"
        }
      },
      "refuseCallback(uint256)": {
        "details": "Refuse a callback if the price is not enough.",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "revokeHolder(uint256,address)": {
        "details": "Function to revoke holder for a private token.",
        "params": {
          "holder": "The authorized address",
          "id": "the token id"
        }
      },
      "revokeMaintener(uint256,address)": {
        "details": "Function to revoke the authorization to maintain a token.",
        "params": {
          "id": "the token id",
          "maintener": "The authorized address"
        }
      },
      "revokeTokenizer(address)": {
        "details": "Function to revoke the authorization to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155BatchReceived` on `to` and act appropriately.",
        "params": {
          "data": "Data forwarded to `onERC1155Received` if `to` is a contract receiver",
          "from": "Source address",
          "ids": "IDs of each token type",
          "to": "Target address",
          "values": "Transfer amounts per token type"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.",
        "params": {
          "data": "Data forwarded to `onERC1155Received` if `to` is a contract receiver",
          "from": "Source address",
          "id": "ID of the token type",
          "to": "Target address",
          "value": "Transfer amount"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator. An operator is allowed to transfer all tokens of the sender on their behalf. Because an account already has operator privileges for itself, this function will revert if the account attempts to set the approval status for itself.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "address to set the approval"
        }
      },
      "setCallbackAutoExecuteMaxAddresses(uint256)": {
        "details": "Maximum addresses to execute automatically the callback when is accepted.",
        "params": {
          "newMax": "new maximum"
        }
      },
      "setProxyRegistryAddress(address[10])": {
        "details": "Function to update the operator whitelist",
        "params": {
          "proxyAddresses": "List of addresses"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `_interfaceID` and"
        }
      },
      "transactionFees(address,uint256,uint256)": {
        "details": "Function to get the transaction price to transfer tokens.",
        "params": {
          "account": "the address from where to transfer the tokens",
          "id": "The token ID",
          "value": "The amount to transfer"
        },
        "returns": {
          "_0": "transfer price"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockAddress(address)": {
        "details": "Function to unlock an address.",
        "params": {
          "addr": "The address to unlock"
        }
      },
      "unlockToken(uint256,uint256)": {
        "details": "Function to unlock a token.",
        "params": {
          "id": "The token ID"
        }
      },
      "updateToken(uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)": {
        "details": "Function to update a token with the given ID.",
        "params": {
          "feesRecipients": "list of addresses receiving transfer fees",
          "feesRecipientsPercentage": "list of percentage, each one for the corresponding feesRecipients",
          "id": "ID of the token to be updated",
          "isPrivate": "true if holder need approval",
          "legalAuthority": "address of the legal authority",
          "metadataHash": "Metadata file hash",
          "minHoldingForCallback": "minimum holding to propose a callback",
          "transactionFees": "transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]"
        }
      },
      "uri(uint256)": {
        "params": {
          "id": "Token ID"
        },
        "returns": {
          "_0": "URI string"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Function to withdraw ETH from the contract.",
        "params": {
          "amount": "amount to withdraw",
          "to": "recipent address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of an operator for a given account."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "version": 1
  }
}