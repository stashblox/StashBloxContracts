{
  "contractName": "StashBlox",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_CallbackId",
          "type": "uint256"
        }
      ],
      "name": "CallbackUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_documentHash",
          "type": "uint256"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_callbacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "escrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "callCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "needLegalApproval",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "approvedByLegal",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "refused",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_config",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "callbackAutoExecuteMaxAddresses",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lumpSumTransactionFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueTransactionFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_users",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isTokenizer",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "ETHBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "acceptCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "approveCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "authorizeMaintener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "authorizeTokenizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "metadataHashes",
          "type": "uint256[]"
        }
      ],
      "name": "cloneToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "transactionFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "address[]",
          "name": "feesRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feesRecipientsPercentage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCall",
          "type": "uint256"
        }
      ],
      "name": "executeCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isLockedAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLockedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "isMaintener",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "isTokenizer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "lockAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "lockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "callees",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "proposeCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "refuseCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "revokeMaintener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "revokeTokenizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMax",
          "type": "uint256"
        }
      ],
      "name": "setCallbackAutoExecuteMaxAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[10]",
          "name": "proxyAddresses",
          "type": "address[10]"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transactionFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "unlockAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "unlockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "transactionFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "address[]",
          "name": "feesRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feesRecipientsPercentage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_CallbackId\",\"type\":\"uint256\"}],\"name\":\"CallbackUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_documentHash\",\"type\":\"uint256\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_callbacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"escrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needLegalApproval\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"approvedByLegal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackAutoExecuteMaxAddresses\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lumpSumTransactionFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueTransactionFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTokenizer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ETHBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"acceptCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"approveCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"authorizeMaintener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"authorizeTokenizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"metadataHashes\",\"type\":\"uint256[]\"}],\"name\":\"cloneToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"transactionFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[]\",\"name\":\"feesRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feesRecipientsPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCall\",\"type\":\"uint256\"}],\"name\":\"executeCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isLockedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLockedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"isMaintener\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"isTokenizer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"proposeCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"refuseCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"revokeMaintener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"revokeTokenizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setCallbackAutoExecuteMaxAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"proxyAddresses\",\"type\":\"address[10]\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transactionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"transactionFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[]\",\"name\":\"feesRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feesRecipientsPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptCallback(uint256)\":{\"details\":\"Accept a callback\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"approveCallback(uint256)\":{\"details\":\"Approve a callback\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"authorizeMaintener(uint256,address)\":{\"details\":\"Function to authorize an address to maintain a token.\",\"params\":{\"maintener\":\"The authorized address\"}},\"authorizeTokenizer(address)\":{\"details\":\"Function to authorize an address to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"balanceOf(address,uint256)\":{\"details\":\"Get the specified address' balance for token with specified ID. Attempting to query the zero account for a balance will result in a revert.\",\"params\":{\"account\":\"The address of the token holder\",\"id\":\"ID of the token\"},\"returns\":{\"_0\":\"The account's balance of the token type requested\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Get the balance of multiple account/token pairs. If any of the query accounts is the zero account, this query will revert.\",\"params\":{\"accounts\":\"The addresses of the token holders\",\"ids\":\"IDs of the tokens\"},\"returns\":{\"_0\":\"Balances for each account and token id pair\"}},\"cloneToken(uint256,uint256[],uint256[])\":{\"details\":\"Function to mint tokens in batch.\",\"params\":{\"id\":\"Identifier of the template\",\"ids\":\"list of IDs of the tokens to be minted\",\"metadataHashes\":\"list of metadata file hashes\"}},\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"createToken(address,uint256,uint256,uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)\":{\"details\":\"Function to mint an amount of a token with the given ID.\",\"params\":{\"feesRecipients\":\"list of addresses receiving transfer fees\",\"feesRecipientsPercentage\":\"list of percentage, each one for the corresponding feesRecipients\",\"id\":\"ID of the token to be minted\",\"isPrivate\":\"true if holder need approval\",\"legalAuthority\":\"address of the legal authority\",\"metadataHash\":\"Metadata file hash\",\"minHoldingForCallback\":\"minimum holding to propose a callback\",\"recipient\":\"The address that will own the minted tokens\",\"supply\":\"Amount of the token to be minted\",\"transactionFees\":\"transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]\"}},\"deposit(address)\":{\"details\":\"Function to make an ETH deposit that can be used to pay token transfer .\",\"params\":{\"to\":\"recipent address\"}},\"executeCallback(uint256,uint256)\":{\"details\":\"Accept a callback. Caller need to recall the function to continue the callback until completed.\",\"params\":{\"callbackId\":\"callback proposition ID\",\"maxCall\":\"maximal call to excute\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"The account of the Tokens\",\"operator\":\"Address of authorized operator\"},\"returns\":{\"_0\":\"True if the operator is approved, false if not\"}},\"isLockedAddress(address)\":{\"details\":\"Function to check if an address is lockec.\",\"params\":{\"addr\":\"The address to check\"}},\"isLockedToken(uint256)\":{\"details\":\"Function to check if a token is locked.\",\"params\":{\"id\":\"The token ID\"}},\"isMaintener(uint256,address)\":{\"details\":\"Function to check if an address is authorized to maintain a token.\",\"params\":{\"id\":\"the token id\",\"maintener\":\"The authorized address\"},\"returns\":{\"_0\":\"true if it's a maintener address\"}},\"isTokenizer(address)\":{\"details\":\"Function to check if an address is authorized to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"lockAddress(address)\":{\"details\":\"Function to lock an address.\",\"params\":{\"addr\":\"The address to lock\"}},\"lockToken(uint256,uint256)\":{\"details\":\"Function to lock a token.\",\"params\":{\"id\":\"The token ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proposeCallback(uint256,uint256,uint256,address[],uint256)\":{\"details\":\"Propose to buy the whole supply of a token. The proposer must hold minHoldingForCallback% of the total supply. StashBlox must approve the price with acceptCallback();\",\"params\":{\"callees\":\"list of calless. Empty list means all holders.\",\"price\":\"proposed price\",\"tokenId\":\"Token ID\"}},\"refuseCallback(uint256)\":{\"details\":\"Refuse a callback if the price is not enough.\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"revokeMaintener(uint256,address)\":{\"details\":\"Function to revoke the authorization to maintain a token.\",\"params\":{\"id\":\"the token id\",\"maintener\":\"The authorized address\"}},\"revokeTokenizer(address)\":{\"details\":\"Function to revoke the authorization to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155BatchReceived` on `to` and act appropriately.\",\"params\":{\"data\":\"Data forwarded to `onERC1155Received` if `to` is a contract receiver\",\"from\":\"Source address\",\"ids\":\"IDs of each token type\",\"to\":\"Target address\",\"values\":\"Transfer amounts per token type\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.\",\"params\":{\"data\":\"Data forwarded to `onERC1155Received` if `to` is a contract receiver\",\"from\":\"Source address\",\"id\":\"ID of the token type\",\"to\":\"Target address\",\"value\":\"Transfer amount\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator. An operator is allowed to transfer all tokens of the sender on their behalf. Because an account already has operator privileges for itself, this function will revert if the account attempts to set the approval status for itself.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"address to set the approval\"}},\"setCallbackAutoExecuteMaxAddresses(uint256)\":{\"details\":\"Maximum addresses to execute automatically the callback when is accepted.\",\"params\":{\"newMax\":\"new maximum\"}},\"setProxyRegistryAddress(address[10])\":{\"details\":\"Function to update the operator whitelist\",\"params\":{\"proxyAddresses\":\"List of addresses\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `_interfaceID` and\"}},\"transactionFees(address,uint256,uint256)\":{\"details\":\"Function to get the transaction price to transfer tokens.\",\"params\":{\"account\":\"the address from where to transfer the tokens\",\"id\":\"The token ID\",\"value\":\"The amount to transfer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockAddress(address)\":{\"details\":\"Function to unlock an address.\",\"params\":{\"addr\":\"The address to unlock\"}},\"unlockToken(uint256,uint256)\":{\"details\":\"Function to unlock a token.\",\"params\":{\"id\":\"The token ID\"}},\"updateToken(uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)\":{\"details\":\"Function to update a token with the given ID.\",\"params\":{\"feesRecipients\":\"list of addresses receiving transfer fees\",\"feesRecipientsPercentage\":\"list of percentage, each one for the corresponding feesRecipients\",\"id\":\"ID of the token to be updated\",\"isPrivate\":\"true if holder need approval\",\"legalAuthority\":\"address of the legal authority\",\"metadataHash\":\"Metadata file hash\",\"minHoldingForCallback\":\"minimum holding to propose a callback\",\"transactionFees\":\"transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]\"}},\"uri(uint256)\":{\"params\":{\"id\":\"Token ID\"},\"returns\":{\"_0\":\"URI string\"}},\"withdraw(address,uint256)\":{\"details\":\"Function to withdraw ETH from the contract.\",\"params\":{\"amount\":\"amount to withdraw\",\"to\":\"recipent address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol\":\"StashBlox\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol\":{\"keccak256\":\"0x1d67f07c026f2174d2308648c4ecabcb226a46beaf201a1230c3c08ec84af3e9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ba0f88aa559a9781fe55ad7797a286190981cfca576fc85177ebda50897020d5\",\"dweb:/ipfs/QmRPNq6TvuytVa4GR1JUTp5SEnuZPzrd8JwK1azguhS7qT\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155.sol\":{\"keccak256\":\"0xe0121db1d8ff46e6f422f69cb0e2d826b6b3fc701ee2af64644965ed3e527f3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://70bf80157d73b53af3e3fe94f1b995fa521bb143a44ae79b6c2d3d923a59b331\",\"dweb:/ipfs/QmNPwXgdkYJcZofamebRCqiDPtMRqhaQsyRBeqUd2841YV\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol\":{\"keccak256\":\"0x121c132f1a15fafd91c187380702cb32d60beab1a4054670efc987e36bc2b70f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://425182c1ecd27456fc2f1c3fd82444b17a13f2e4e503bb3f7b973e83d2ceb1bb\",\"dweb:/ipfs/QmU54fpZCpdGtjUAbQkr4cYikCzKKQqjS3LPNQpYpJXiA8\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Receiver.sol\":{\"keccak256\":\"0xa2e894006f84deca9f9d37735ce39044f101b5d035cb5e21242c55e52de6e881\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2444dcc76058c4d324fde1a42484f86cacaf2348faabfd334bb053c435082b64\",\"dweb:/ipfs/Qmb94fe1Y1Wqq6h9pxpCfsn58ZMdjGSmJ5hC5Ex2yB1gNm\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x1588ef316db84c168b02bc9a38926a11fae69741da7dacb4314631318b90e777\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d51ab1e9deae9cac01eb549b89a1d11410c12301933d1679bdfd5e5ab8ff691\",\"dweb:/ipfs/QmdQW8fZkocPQxNQm6wgse6k3Mqt87sS8QiQFE96U6rkGj\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC173.sol\":{\"keccak256\":\"0x7d35a40f601c5245c540eb35f11a2227389b965acdee1abab1c88c7360c10050\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9fb40310238de5d7a8b39154b1baff899f089984f62ed052ec07f86b9d5603ba\",\"dweb:/ipfs/QmQBLGwAEiAFQpJC6d61qgGDi1n93v2eWKAaRABhckNzW3\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol\":{\"keccak256\":\"0xe6f175eb447c6281ded9a9d9eb88691125c7d5d43df0c150286bafcd48c99933\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://733e7d959bf70be3d803b01e8080ff00f77c16b73350bffb8061e49adc9bc7da\",\"dweb:/ipfs/QmNRvUbraKZVU76mC26giKMUgzk4Wn1mppnMHPxnd2kVHd\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/ChargeableTransfer.sol\":{\"keccak256\":\"0xa34dd990138c06d499e7ab3a02e8e20d9e82ae6a12cf5ed9c76406910fce5688\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e44fd72362f39a6c3e7e4d7c5bec051ad323275f29f3afb6ff73ae5fef3d4e25\",\"dweb:/ipfs/QmZn6BedkENQTTuUge51VXYwzaza6nuKxdgzDKs5vjHkKW\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/ERC1155.sol\":{\"keccak256\":\"0x8cdaa38bed5317468a4aff088b3d62b809a31d047b227f86a2bf3b4e799119c4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8e7876f0a12f9cce0cbd6a3a648f3088e92b618aac347ab529c94857c516ef8\",\"dweb:/ipfs/QmWGP1XcNwtTLD1HomZrCCQhzwmVQAyjYALZZCFJPfhTPm\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Lockable.sol\":{\"keccak256\":\"0x9c2f1ad02548c08d402b65a8f2c0ec92e5486d0285a3c697704892888416e919\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ada06ed6e79200a0bee93393fcccda998e501ba728a44fc0980131efb7a21eed\",\"dweb:/ipfs/QmfNdFxsakfBLjvLHzdee7kBfFeRVjFG342DCUCTGDKRoX\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Maintenable.sol\":{\"keccak256\":\"0x79c9bd531cea8bbc2a55f7c7d8227f461aca4439bd3f665ecd2397d8039cd88c\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://dcab4c48704216208defe9edb326da78978605ec9da35f3249a3c92afea18547\",\"dweb:/ipfs/QmXMyEGUaorQJxXJuZ4t7PGiGWosu5xBWNo2moWHbNX3Db\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Mintable.sol\":{\"keccak256\":\"0xcf765982eea05e57e6477b729f5e7c592b681f5ee2a4436ac0340f09afed178e\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://236ff024de902da82b1f45a4782c009d9136e10466c5984ee7485ec0c1550280\",\"dweb:/ipfs/QmPkb5xFQvJ9XQd3pEKiYrtGX35BuTugkz3oNf5pKeGawg\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Ownable.sol\":{\"keccak256\":\"0x7277af30b6a568bb1a7168705dfc5247bf0afb1347106875f031e4c02102182f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7ac6fdbe5aeda2bf609f3ffc1ddfd2ef873944037190673f480f604d577bcca0\",\"dweb:/ipfs/QmP1nxoyfmyff9s3bBMSfuikv5cucRE7ZzFEq3sxuX5cBL\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Privatizable.sol\":{\"keccak256\":\"0x4fea6e1f82389473601b6c4ddf4ff141b9b6f734eb6c13a7efaea3d2e29e7e4a\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://2b7439e16639db454ea9390c7a55611a5606dce978b6ee46f389ddb6207cbc34\",\"dweb:/ipfs/QmcWjuAysBNgia9QxZmqsW6dGbnc6hd2chK3r4EcmiovCd\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Proxyable.sol\":{\"keccak256\":\"0x4c97a434c7583ffbf1243eb1fb1f9be3ce0868b1d864e2629d5d8fa1d235c1d2\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://0886f802cd53f0178d7de5f9d1e6cdde0edb583859ed46c7522415315f18f573\",\"dweb:/ipfs/QmRg1eU2Zd2cyrnooSuHqZxY4T8sZXT3Q6RjQevfDFGJhk\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/StashBloxData.sol\":{\"keccak256\":\"0x82548fd0ae4daeb3e639f87329a6faa42e963ef7eafaa8eb30dfc1b9c6f1eda4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://53299820d4df5157e33095c94fd5949dad0d6e53bf02428648d36d9e6b7db51d\",\"dweb:/ipfs/QmZKVHBTzHTRmhB2vD6jLMRQ3rFxwUAaFp2WEjsqvoaqG4\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x0dc4de30066c07be6906b80d9e520fd774cb390e34214c2267c566f30c192eac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd2eff6112eef024b2c10eca51411b26c58766e172c26efaf49b77b06f1cbe9f\",\"dweb:/ipfs/QmSL8DnsgxrCpGAiqpxz17SVzJTD1tULFBo1iuFfnknv2z\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol\":{\"keccak256\":\"0xcc6d500a21adcca1c123ed1bf04715f8b1fa116d83b9742c3f5729d43a3f7e89\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8154509e193b9dd26c3a6cd3c413f7e2dd376a9d37458e74976e37c77c225422\",\"dweb:/ipfs/QmSUCBLGPGwRg7t9gFMvCWH6A54jSvzvHXBScpmZE5N4uq\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol\":{\"keccak256\":\"0x700249db0ed6aa2be4fc7675c9cdb5cdcc4e49abec52eefa58c2b02092784188\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4a8babf975072c842269b5cb10aedfed77307629626cc6ab6173e68462eaebb\",\"dweb:/ipfs/QmVSAHYR99a4Q6jrrSqvRxMEnD2dhNAUPLyGA9KGJGTLDL\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "immutableReferences": {},
  "sourceMap": "243:1572:0:-:0;;;441:174;;;;;;;;;-1:-1:-1;639:30:12;658:10;639:18;:30::i;:::-;508:2:0;466:7;:44;520:48;;;;;;;;;;;;;;;;;;;;;;;:15;;:48;:::i;:::-;-1:-1:-1;578:30:0;597:10;578:18;:30::i;:::-;243:1572;;1672:225:12;-1:-1:-1;;;;;1745:22:12;;1737:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1846:6;;1825:38;;-1:-1:-1;;;;;1825:38:12;;;;1846:6;;1825:38;;1846:6;;1825:38;1873:6;:17;;-1:-1:-1;;;;;;1873:17:12;-1:-1:-1;;;;;1873:17:12;;;;;;;;;;1672:225::o;243:1572:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;243:1572:0;;;-1:-1:-1;243:1572:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "243:1572:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1551:10;1544:18;;;;:6;:18;;;;;:29;;;:44;;1578:9;1544:33;:44::i;:::-;1519:10;1512:18;;;;:6;:18;;;;;:29;;:76;243:1572;;;;;1843:234:8;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1843:234:8;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1248:255;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1248:255:8;-1:-1:-1;;;;;;1248:255:8;;:::i;:::-;;;;;;;;;;;;;;;;;;1669:141:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:141:0;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6063:770:8;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6063:770:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6063:770:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6063:770:8;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6063:770:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6063:770:8;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6063:770:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6063:770:8;;;;;;;;;;-1:-1:-1;6063:770:8;;-1:-1:-1;6063:770:8;-1:-1:-1;6063:770:8;:::i;:::-;;1699:22:15;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3057:453:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3057:453:6;;:::i;975:99:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;975:99:9;-1:-1:-1;;;;;975:99:9;;:::i;536:144:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;536:144:6;;:::i;1727:39:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1727:39:15;-1:-1:-1;;;;;1727:39:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:47;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1819:47:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1819:47:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;511:151:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;511:151:14;;-1:-1:-1;511:151:14;;-1:-1:-1;;;;511:151:14:i;2318:823:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2318:823:10;;;;;;;;-1:-1:-1;2318:823:10;;-1:-1:-1;;;;2318:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2318:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2318:823:10;;;;;;;;-1:-1:-1;2318:823:10;;-1:-1:-1;;;;;2318:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2318:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2318:823:10;;-1:-1:-1;;2318:823:10;;;-1:-1:-1;;;2318:823:10;;;;;;;;;;-1:-1:-1;;;;;2318:823:10;;:::i;2401:631:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2401:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2401:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2401:631:8;;;;;;;;-1:-1:-1;2401:631:8;;-1:-1:-1;;;;;2401:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2401:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2401:631:8;;-1:-1:-1;2401:631:8;;-1:-1:-1;;;;;2401:631:8:i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1479:132:10;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1479:132:10;;;;;;-1:-1:-1;;;;;1479:132:10;;:::i;628:119:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;628:119:11;-1:-1:-1;;;;;628:119:11;;:::i;884:117::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;884:117:11;-1:-1:-1;;;;;884:117:11;;:::i;798:144:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;798:144:10;;;;;;-1:-1:-1;;;;;798:144:10;;:::i;1125:86:12:-;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1125:86:12;;;;;;;;;;;;;;2325:630:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2325:630:6;;:::i;3510:296:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3510:296:8;;;;;;;;;;:::i;535:129:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;535:129:9;;;;;;;:::i;1180:102::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1180:102:9;-1:-1:-1;;;;;1180:102:9;;:::i;318:125::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;318:125:9;;;;;;;:::i;768:105::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;768:105:9;;:::i;1147:116:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1147:116:11;-1:-1:-1;;;;;1147:116:11;;:::i;3611:1066:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3611:1066:6;;:::i;2102:1038:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2102:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2102:1038:11;;;;;;;;-1:-1:-1;2102:1038:11;;-1:-1:-1;;;;2102:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2102:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2102:1038:11;;;;;;;;-1:-1:-1;2102:1038:11;;-1:-1:-1;;;;;2102:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2102:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2102:1038:11;;-1:-1:-1;;2102:1038:11;;;-1:-1:-1;;;2102:1038:11;;;;;;;;;;-1:-1:-1;;;;;2102:1038:11;;:::i;1399:113:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1399:113:9;-1:-1:-1;;;;;1399:113:9;;:::i;540:159:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;540:159:7;;;;;;;;;;;;;:::i;1111:142:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1111:142:10;;;;;;-1:-1:-1;;;;;1111:142:10;;:::i;1030:1166:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1030:1166:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1030:1166:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1030:1166:6;;-1:-1:-1;;1030:1166:6;;;-1:-1:-1;1030:1166:6;;-1:-1:-1;;1030:1166:6:i;4087:203:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;4087:203:8;;;;;;;;;;:::i;1772:41:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1772:41:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1772:41:15;;;;;;;;;;;;;;;;;;;;;;;;;;4844:630:8;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4844:630:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4844:630:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4844:630:8;;;;;;;;;;-1:-1:-1;4844:630:8;;-1:-1:-1;4844:630:8;-1:-1:-1;4844:630:8;:::i;1360:116:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1360:116:12;-1:-1:-1;;;;;1360:116:12;;:::i;1197:123:0:-;;;;;;;;;;;;;;;;-1:-1:-1;1197:123:0;-1:-1:-1;;;;;1197:123:0;;:::i;767:289::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;767:289:0;;;;;;;;:::i;3367:645:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3367:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3367:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3367:645:11;;;;;;;;-1:-1:-1;3367:645:11;;-1:-1:-1;;;;;3367:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;3367:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3367:645:11;;-1:-1:-1;3367:645:11;;-1:-1:-1;;;;;3367:645:11:i;4901:464:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4901:464:6;;;;;;;:::i;867:176:17:-;925:7;956:5;;;979:6;;;;971:46;;;;;-1:-1:-1;;;971:46:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:1;-1:-1:-1;867:176:17;;;;;:::o;1843:234:8:-;1921:7;-1:-1:-1;;;;;1948:21:8;;1940:77;;;;-1:-1:-1;;;1940:77:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2034:11:8;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2034:28:8;;;;;;:19;;;;:28;;;:36;;1843:234::o;1248:255::-;1328:4;-1:-1:-1;;;;;;1346:42:8;;-1:-1:-1;;;1346:42:8;;:99;;-1:-1:-1;;;;;;;1402:43:8;;-1:-1:-1;;;1402:43:8;1346:99;1342:135;;;-1:-1:-1;1464:4:8;1457:11;;1342:135;-1:-1:-1;1491:5:8;1248:255;;;;:::o;1669:141:0:-;1769:15;1758:45;;;;;;;;;;;;;-1:-1:-1;;1758:45:0;;;;;;;;;;;;;;;;;;;;;;;;;;1726:13;;1758:45;;;;1769:15;;1758:45;;1769:15;1758:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1786:16;1799:2;1786:12;:16::i;:::-;1758:10;:45::i;6063:770:8:-;6294:27;;;6286:86;;;;-1:-1:-1;;;6286:86:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6390:16:8;;6382:69;;;;-1:-1:-1;;;6382:69:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6482:18:8;;6490:10;6482:18;;:64;;;6504:34;6521:4;6527:10;6504:16;:34::i;:::-;:42;;6542:4;6504:42;6482:64;6461:166;;;;-1:-1:-1;;;6461:166:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6638:37;6653:4;6659:2;6663:3;;6638:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6638:37:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6668:6:8;;-1:-1:-1;6668:6:8;;;;6638:37;;;6668:6;;6638:37;6668:6;6638:37;;;;;;;;;-1:-1:-1;6638:14:8;;-1:-1:-1;;;6638:37:8:i;:::-;6723:2;-1:-1:-1;;;;;6691:48:8;6717:4;-1:-1:-1;;;;;6691:48:8;6705:10;-1:-1:-1;;;;;6691:48:8;;6727:3;;6732:6;;6691:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6691:48:8;;;;;;;;;;;;;;;;;-1:-1:-1;6691:48:8;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6691:48:8;;;;;;;;-1:-1:-1;6691:48:8;;-1:-1:-1;;;;;;;6691:48:8;6750:76;6786:10;6798:4;6804:2;6808:3;;6750:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6750:76:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6813:6:8;;-1:-1:-1;6813:6:8;;;;6750:76;;;6813:6;;6750:76;6813:6;6750:76;;;;;;;;;-1:-1:-1;;6750:76:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6821:4:8;;-1:-1:-1;6821:4:8;;;;6750:76;;6821:4;;;;6750:76;;;;;;;;;-1:-1:-1;6750:35:8;;-1:-1:-1;;;6750:76:8:i;:::-;6063:770;;;;;;;;:::o;1699:22:15:-;;;;;;;;;;;;;;;;;;-1:-1:-1;;1699:22:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3057:453:6:-;3121:24;;:::i;:::-;3148:22;;;;:10;:22;;;;;;;;;3121:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3121:49:6;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3148:22;;3121:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3121:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;3121:49:6;;;;-1:-1:-1;;3189:16:6;;3121:49;;-1:-1:-1;;3189:21:6;;;;:88;;-1:-1:-1;3248:16:6;;3230:47;;3266:10;3230:17;:47::i;:::-;3189:133;;;;-1:-1:-1;3297:16:6;;;;:25;3189:133;:179;;;;-1:-1:-1;3342:17:6;;;;:26;3189:179;3181:223;;;;;-1:-1:-1;;;3181:223:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;3415:22;;;;:10;:22;;;;;;:38;;:45;;-1:-1:-1;;;;3415:45:6;-1:-1:-1;;;3415:45:6;;;3476:27;3426:10;;-1:-1:-1;;;;;;;;;;;3476:27:6;;3057:453;;:::o;975:99:9:-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;1039:12:9::1;;::::0;;;:6:::1;:12;::::0;;;;:28;;-1:-1:-1;;1039:28:9::1;;;::::0;;975:99::o;536:144:6:-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;625:7:6::1;:48:::0;536:144::o;1727:39:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1819:47::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1819:47:15;;;;-1:-1:-1;;;1819:47:15;;;;;-1:-1:-1;;;1819:47:15;;;;;-1:-1:-1;;;1819:47:15;;;;;-1:-1:-1;;;1819:47:15;;;;;-1:-1:-1;;;1819:47:15;;;;;:::o;511:151:14:-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;608:47:14::1;:30;641:14:::0;608:47:::1;;:::i;:::-;;511:151:::0;:::o;2318:823:10:-;2753:2;494:28;507:2;511:10;494:12;:28::i;:::-;486:64;;;;;-1:-1:-1;;;486:64:10;;;;;;;;;;;;-1:-1:-1;;;486:64:10;;;;;;;;;;;;;;;2796:1:::1;2775:11:::0;;;:7:::1;:11;::::0;;;;:18;2767:48:::1;;;::::0;;-1:-1:-1;;;2767:48:10;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2767:48:10;;;;;;;;;;;;;::::1;;2826:262;2836:2;2858:12;2890:15;2925:14;2959:24;3003:21;3044:9;3073:14;2826:9;:262::i;:::-;3104:30;::::0;;;;;;;3117:2;;3104:30:::1;::::0;;;;;::::1;::::0;;::::1;2318:823:::0;;;;;;;;;:::o;2401:631:8:-;2550:16;2609:3;:10;2590:8;:15;:29;2582:90;;;;-1:-1:-1;;;2582:90:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2683:30;2730:8;:15;2716:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2716:30:8;;2683:63;;2762:9;2757:238;2781:8;:15;2777:1;:19;2757:238;;;2848:1;-1:-1:-1;;;;;2825:25:8;:8;2834:1;2825:11;;;;;;;;;;;;;;-1:-1:-1;;;;;2825:25:8;;;2817:90;;;;-1:-1:-1;;;2817:90:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2940:7;:15;2948:3;2952:1;2948:6;;;;;;;;;;;;;;2940:15;;;;;;;;;;;:23;;:36;2964:8;2973:1;2964:11;;;;;;;;;;;;;;-1:-1:-1;;;;;2940:36:8;-1:-1:-1;;;;;2940:36:8;;;;;;;;;;;;:44;;;2921:13;2935:1;2921:16;;;;;;;;;;;;;;;;;:63;2798:3;;2757:238;;;-1:-1:-1;3012:13:8;2401:631;-1:-1:-1;;;2401:631:8:o;1479:132:10:-;1554:4;1577:27;1590:2;1594:9;1577:12;:27::i;628:119:11:-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;704:17:11::1;;::::0;;;:6:::1;:17;::::0;;;;:36;;-1:-1:-1;;704:36:11::1;736:4;704:36;::::0;;628:119::o;884:117::-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;957:17:11::1;989:5;957:17:::0;;;:6:::1;:17;::::0;;;;:37;;-1:-1:-1;;957:37:11::1;::::0;;884:117::o;798:144:10:-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;886:11:10::1;::::0;;;:7:::1;:11;::::0;;;;;;;-1:-1:-1;;;;;886:30:10;;::::1;::::0;;:19:::1;::::0;;::::1;:30:::0;;;;:42:::1;;:49:::0;;-1:-1:-1;;886:49:10::1;931:4;886:49;::::0;;798:144::o;1125:86:12:-;1198:6;;-1:-1:-1;;;;;1198:6:12;1125:86;:::o;2325:630:6:-;2388:24;;:::i;:::-;2415:22;;;;:10;:22;;;;;;;;;2388:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2388:49:6;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2415:22;;2388:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2388:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;2388:49:6;;;;-1:-1:-1;;2456:16:6;;2388:49;;-1:-1:-1;;2456:21:6;;;;:66;;-1:-1:-1;2497:16:6;;;;:25;2456:66;:112;;;;-1:-1:-1;2542:17:6;;;;:26;2456:112;:294;;;;-1:-1:-1;2602:16:6;;2589:42;;2620:10;2589:12;:42::i;:::-;:110;;;-1:-1:-1;2670:16:6;;2652:47;;2688:10;2652:17;:47::i;:::-;2589:160;;;;2734:8;:15;;;-1:-1:-1;;;;;2720:29:6;:10;-1:-1:-1;;;;;2720:29:6;;2589:160;2448:338;;;;;-1:-1:-1;;;2448:338:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;2797:22;;;;:10;:22;;;;;;;;:30;;:37;;-1:-1:-1;;;;2797:37:6;-1:-1:-1;;;2797:37:6;;;2882:23;;;;2851:15;;;;-1:-1:-1;;;;;2844:23:6;;;:6;:23;;;;;;2830:4;2844:34;:61;;;;;;;;2921:27;2808:10;;-1:-1:-1;;;;;;;;;;;2921:27:6;;2325:630;;:::o;3510:296:8:-;3606:10;-1:-1:-1;;;;;3606:22:8;;;;3598:79;;;;-1:-1:-1;;;3598:79:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3706:10;3687:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;3687:40:8;;;;;;;;;;;;:51;;-1:-1:-1;;3687:51:8;;;;;;;;;;3753:46;;;;;;;3687:40;;3706:10;3753:46;;;;;;;;;;;3510:296;;:::o;535:129:9:-;613:2;494:28:10;507:2;511:10;494:12;:28::i;:::-;486:64;;;;;-1:-1:-1;;;486:64:10;;;;;;;;;;;;-1:-1:-1;;;486:64:10;;;;;;;;;;;;;;;627:30:9::1;640:2;644:12;627;:30::i;:::-;535:129:::0;;;:::o;1180:102::-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;1246:12:9::1;1270:5;1246:12:::0;;;:6:::1;:12;::::0;;;;:29;;-1:-1:-1;;1246:29:9::1;::::0;;1180:102::o;318:125::-;394:2;494:28:10;507:2;511:10;494:12;:28::i;:::-;486:64;;;;;-1:-1:-1;;;486:64:10;;;;;;;;;;;;-1:-1:-1;;;486:64:10;;;;;;;;;;;;;;;408:28:9::1;419:2;423:12;408:10;:28::i;768:105::-:0;826:4;848:18;863:2;848:14;:18::i;1147:116:11:-;1210:4;1233:23;1246:9;1233:12;:23::i;3611:1066:6:-;3674:24;;:::i;:::-;3701:22;;;;:10;:22;;;;;;;;;3674:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3674:49:6;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3701:22;;3674:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3674:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;3674:49:6;;;;-1:-1:-1;;3742:16:6;;3674:49;;-1:-1:-1;;3742:21:6;;;;:83;;-1:-1:-1;3796:16:6;;3783:42;;3814:10;3783:12;:42::i;:::-;3742:160;;;;;3847:8;:26;;;3846:27;:55;;;;3877:8;:24;;;3846:55;3742:205;;;;-1:-1:-1;3922:16:6;;;;:25;3742:205;:251;;;;-1:-1:-1;3967:17:6;;;;:26;3742:251;:364;;;;;4040:66;4055:8;:16;;;4073:8;:14;;;4089:8;:16;;;4040:14;:66::i;:::-;4013:8;:23;;;:93;;3742:364;3734:445;;;;-1:-1:-1;;;3734:445:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4190:22;;;;:10;:22;;;;;;:31;;:38;;-1:-1:-1;;;;4190:38:6;-1:-1:-1;;;4190:38:6;;;4244:27;4201:10;;-1:-1:-1;;;;;;;;;;;4244:27:6;;4286:16;;;;:23;:27;4282:389;;4329:53;4346:10;4358:8;:16;;;:23;4329:16;:53::i;:::-;4282:389;;;4450:7;:39;;4411:16;;4403:25;;:7;:25;;;;;;:36;;:43;:86;4399:272;;4542:16;;4534:25;;;;:7;:25;;;;;:36;;:43;4505:73;;4522:10;;4505:16;:73::i;4399:272::-;4609:51;4620:8;:16;;;4638:8;:21;;;4609:10;:51::i;2102:1038:11:-;330:24;343:10;330:12;:24::i;:::-;322:60;;;;;-1:-1:-1;;;322:60:11;;;;;;;;;;;;-1:-1:-1;;;322:60:11;;;;;;;;;;;;;;;2679:378:::1;2692:9;2724:2;2749:6;2778:8;2809:12;2844:15;2882:14;2919:24;2966:21;3010:9;3042:14;2679:12;:378::i;:::-;3072:61;::::0;;;;;::::1;::::0;::::1;::::0;;;;;-1:-1:-1;;;;;3072:61:11;::::1;::::0;3107:1:::1;::::0;3087:10:::1;::::0;-1:-1:-1;;;;;;;;;;;3072:61:11;;;;;;;;;::::1;2102:1038:::0;;;;;;;;;;;:::o;1399:113:9:-;1461:4;1483:22;1500:4;1483:16;:22::i;540:159:7:-;630:7;656:36;673:7;682:2;686:5;656:16;:36::i;:::-;649:43;540:159;-1:-1:-1;;;;540:159:7:o;1111:142:10:-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;1241:5:10::1;1196:11:::0;;;:7:::1;:11;::::0;;;;;;;-1:-1:-1;;;;;1196:30:10;;::::1;::::0;;:19:::1;::::0;;::::1;:30:::0;;;;:42:::1;;:50:::0;;-1:-1:-1;;1196:50:10::1;::::0;;1111:142::o;1030:1166:6:-;1190:22;;;;:10;:22;;;;;:30;:35;:66;;;;-1:-1:-1;1255:1:6;1229:16;;;:7;:16;;;;;:23;:27;;1190:66;:138;;;;;1289:39;1304:7;1313:5;1320:7;1289:14;:39::i;:::-;1276:9;:52;;1190:138;:215;;;;-1:-1:-1;1366:7:6;:39;1348:14;;:57;;1190:215;1182:254;;;;;-1:-1:-1;;;1182:254:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;1447:18;1497:16;;;:7;:16;;;;;:38;;;;1469:23;;1468:80;;1542:5;;1469:67;;:27;:67::i;:::-;1468:73;;:80::i;:::-;1447:101;;1584:562;;;;;;;;1616:7;1584:562;;;;1706:5;1584:562;;;;1741:9;1584:562;;;;2064:1;1584:562;;;;2123:12;1584:562;;;;1645:10;-1:-1:-1;;;;;1584:562:6;;;;;1784:5;1793:1;1784:10;1783:106;;;-1:-1:-1;1831:16:6;;;;:7;:16;;;;;;;;1856:10;1831:36;;:24;;:36;;;;;:44;:57;-1:-1:-1;1783:106:6;:161;;;;1942:1;1925:7;:14;:18;1783:161;1584:562;;;;1975:5;1584:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1559:22;;;:10;:22;;;;;;:587;;;;;;;;1584:562;1559:587;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;1559:587:6;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;1559:587:6;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;1559:587:6;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;1559:587:6;;;-1:-1:-1;;;1559:587:6;-1:-1:-1;;;;;;;;;1559:587:6;;;-1:-1:-1;;;;;;1559:587:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;;:587;;;;;;;;;;;:::i;:::-;-1:-1:-1;;2162:27:6;;2178:10;;-1:-1:-1;;;;;;;;;;;;2162:27:6;;;;1030:1166;;;;;;:::o;4087:203:8:-;4178:4;4201:41;4224:7;4233:8;4201:22;:41::i;:::-;:82;;;-1:-1:-1;;;;;;;4246:27:8;;;;;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;4087:203::o;1772:41:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1772:41:15;;;;-1:-1:-1;;;1772:41:15;;;;;-1:-1:-1;;;1772:41:15;;;;:::o;4844:630:8:-;-1:-1:-1;;;;;5046:16:8;;5038:69;;;;-1:-1:-1;;;5038:69:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5138:18:8;;5146:10;5138:18;;:64;;;5160:34;5177:4;5183:10;5160:16;:34::i;:::-;:42;;5198:4;5160:42;5138:64;5117:166;;;;-1:-1:-1;;;5117:166:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5294:30;5304:4;5310:2;5314;5318:5;5294:9;:30::i;:::-;5373:2;-1:-1:-1;;;;;5340:47:8;5367:4;-1:-1:-1;;;;;5340:47:8;5355:10;-1:-1:-1;;;;;5340:47:8;-1:-1:-1;;;;;;;;;;;5377:2:8;5381:5;5340:47;;;;;;;;;;;;;;;;;;;;;;;;5398:69;5429:10;5441:4;5447:2;5451;5455:5;5462:4;;5398:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5398:30:8;;-1:-1:-1;;;5398:69:8:i;:::-;4844:630;;;;;;:::o;1360:116:12:-;889:10;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;1441:28:::1;1460:8;1441:18;:28::i;:::-;1360:116:::0;:::o;1197:123:0:-;-1:-1:-1;;;;;1277:10:0;;;;;;:6;:10;;;;;:21;;;:36;;1303:9;1277:25;:36::i;:::-;-1:-1:-1;;;;;1253:10:0;;;;;;;:6;:10;;;;;:21;;:60;1197:123::o;767:289::-;889:10:12;:8;:10::i;:::-;881:55;;;;;-1:-1:-1;;;881:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;881:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;850:10:0;::::1;;::::0;;;:6:::1;:10;::::0;;;;:21:::1;;::::0;:31;-1:-1:-1;850:31:0::1;842:64;;;::::0;;-1:-1:-1;;;842:64:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;842:64:0;;;;;;;;;;;;;::::1;;935:26;::::0;917:12:::1;::::0;-1:-1:-1;;;;;935:7:0;::::1;::::0;950:6;;917:12;935:26;917:12;935:26;950:6;935:7;:26:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;916:45;;;979:7;971:37;;;::::0;;-1:-1:-1;;;971:37:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;971:37:0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;;1018:10:0;;::::1;;::::0;;;:6:::1;:10;::::0;;;;:21:::1;;:31:::0;;;;;::::1;::::0;;767:289::o;3367:645:11:-;330:24;343:10;330:12;:24::i;:::-;322:60;;;;;-1:-1:-1;;;322:60:11;;;;;;;;;;;;-1:-1:-1;;;322:60:11;;;;;;;;;;;;;;;3568:1:::1;3547:11:::0;;;:7:::1;:11;::::0;;;;:18;:22;;;;:77:::1;;;3603:14;:21;3589:3;:10;:35;3547:77;3539:107;;;::::0;;-1:-1:-1;;;3539:107:11;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;3539:107:11;;;;;;;;;;;;;::::1;;3662:9;3657:349;3681:3;:10;3677:1;:14;3657:349;;;3712:42;3724:2;3728:3;3732:1;3728:6;;;;;;;;;;;;;;3736:14;3751:1;3736:17;;;;;;;;;;;;;;3712:11;:42::i;:::-;3877:11;::::0;;;:7:::1;:11;::::0;;;;:22:::1;;:25:::0;;:22;;:11;:25:::1;;;;;::::0;;;::::1;::::0;;::::1;::::0;3936:6;;-1:-1:-1;;;;;3877:25:11;;::::1;::::0;;3789:10:::1;::::0;-1:-1:-1;;;;;;;;;;;3774:221:11;3936:3;;3940:1;;3936:6;::::1;;;;;;;;;;;3976:7;:11;3984:2;3976:11;;;;;;;;;;;:18;;;3774:221;;;;;;;;;;;;;;;;;;;;;;;;3693:3;;3657:349;;;;3367:645:::0;;;:::o;4901:464:6:-;4982:24;;:::i;:::-;5009:22;;;;:10;:22;;;;;;;;;4982:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4982:49:6;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5009:22;;4982:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4982:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;4982:49:6;;;;-1:-1:-1;;5050:16:6;;4982:49;;-1:-1:-1;;5050:21:6;;;;:66;;-1:-1:-1;5091:17:6;;;;:25;;5112:4;5091:25;5050:66;:113;;;;-1:-1:-1;5136:18:6;;;;:27;5050:113;5042:142;;;;;-1:-1:-1;;;5042:142:6;;;;;;;;;;;;-1:-1:-1;;;5042:142:6;;;;;;;;;;;;;;;5195:37;5212:10;5224:7;5195:16;:37::i;:::-;5247:22;;;;:10;:22;;;;;:32;;;-1:-1:-1;;;5247:32:6;;;;5243:116;;;5295:53;5308:8;:16;;;5326:8;:21;;;5295:12;:53::i;933:419:18:-;986:13;1011:10;1044:1;1055:68;1062:6;;1055:68;;1084:7;;;;;;1110:2;1105:7;;1055:68;;;1132:16;1161:5;1151:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1151:16:18;;1132:35;;1182:6;1177:141;1194:5;1192:1;:7;1177:141;;;1228:2;1224:1;:6;1220:10;;1265:21;1283:1;1265:11;:21::i;:::-;1244:3;1260:1;1256;1248:5;:9;:13;1244:18;;;;;;;;;;;:42;-1:-1:-1;;;;;1244:42:18;;;;;;;;-1:-1:-1;1305:2:18;1300:7;;;-1:-1:-1;1201:3:18;;1177:141;;;-1:-1:-1;1341:3:18;933:419;-1:-1:-1;;;;933:419:18:o;86:515::-;305:10;;292;;163:13;;213:1;;250;;163:13;;292:23;281:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;281:35:18;-1:-1:-1;262:54:18;-1:-1:-1;262:54:18;365:6;;405:76;421:3;:10;417:1;:14;405:76;;;464:3;468:1;464:6;;;;;;;;;;;;;;;;452:4;457:3;;;;;;452:9;;;;;;;;;;;:18;-1:-1:-1;;;;;452:18:18;;;;;;;;-1:-1:-1;433:3:18;;405:76;;;-1:-1:-1;499:1:18;490:76;506:3;:10;502:1;:14;490:76;;;549:3;553:1;549:6;;;;;;;;;;;;;;;;537:4;542:3;;;;;;537:9;;;;;;;;;;;:18;-1:-1:-1;;;;;537:18:18;;;;;;;;-1:-1:-1;518:3:18;;490:76;;;-1:-1:-1;589:4:18;;86:515;-1:-1:-1;;;;;;;86:515:18:o;4333:404:7:-;4449:19;4483:1;4471:9;:13;:51;;-1:-1:-1;;;;;4499:12:7;;;;;;:6;:12;;;;;:23;;;4471:51;;;4487:9;4471:51;4449:73;;4537:9;4532:157;4556:3;:10;4552:1;:14;4532:157;;;4601:77;4617:40;4629:4;4635:2;4639:3;4643:1;4639:6;;;;;;;;;;;;;;4647;4654:1;4647:9;;;;;;;;;;;;;;4617:11;:40::i;:::-;4601:77;;;;;;;;;;;;-1:-1:-1;;;4601:77:7;;;;:11;;:77;:15;:77::i;:::-;4587:91;-1:-1:-1;4568:3:7;;4532:157;;;;4698:32;4712:4;4718:11;4698:13;:32::i;:::-;4333:404;;;;;:::o;7456:558:8:-;7699:15;:2;-1:-1:-1;;;;;7699:13:8;;:15::i;:::-;7696:312;;;7857:52;;;-1:-1:-1;;;;;7755:154:8;;7772:2;-1:-1:-1;;;;;7755:43:8;;7799:8;7809:4;7815:3;7820:6;7828:4;7755:78;;;;;;;;;;;;;-1:-1:-1;;;;;7755:78:8;;;;;;-1:-1:-1;;;;;7755:78:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7755:78:8;-1:-1:-1;;;;;;7755:154:8;;7730:267;;;;-1:-1:-1;;;7730:267:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7535:160:6;7621:4;7644:11;;;:7;:11;;;;;;:26;;;-1:-1:-1;;;;;7644:44:6;;;:26;;:44;;7535:160::o;1980:93:12:-;2060:6;;-1:-1:-1;;;;;2060:6:12;2046:10;:20;;1980:93::o;3242:162:10:-;3318:4;3341:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;3341:30:10;;;;:19;;:30;;;;;:42;;;;;;:56;;;3387:10;:8;:10::i;4256:1359:11:-;4675:23;4717:9;4712:120;4736:24;:31;4732:1;:35;4712:120;;;4805:24;4830:1;4805:27;;;;;;;;;;;;;;4786:46;;;;4769:3;;;;;4712:120;;;;4875:1;4851:14;:21;:25;:75;;;;-1:-1:-1;4880:46:11;4851:75;:119;;;;;4946:15;4965:5;4946:24;4851:119;:168;;;;;5014:5;4990:21;:29;4851:168;4843:214;;;;;-1:-1:-1;;;4843:214:11;;;;;;;;;;;;-1:-1:-1;;;4843:214:11;;;;;;;;;;;;;;;5068:11;;;;:7;:11;;;;;;;;:24;;;:39;;;5154:18;;5117:34;;;;:55;;;;5217:18;;;;-1:-1:-1;5182:32:11;;:53;5245:74;;;;;;;5282:15;5245:74;;5299:18;;;;5245:74;;;;:30;;;;:74;;5233:1;5245:74;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;5329:11:11;;;;:7;:11;;;;;;;;:43;;;;:26;;;;;:43;;;;:::i;:::-;-1:-1:-1;5382:11:11;;;;:7;:11;;;;;;;;:63;;;;:36;;;;;:63;;;;:::i;:::-;-1:-1:-1;;5455:11:11;;;;:7;:11;;;;;;:33;;;:57;;;;5522:21;;;;:33;;-1:-1:-1;;;;5522:33:11;-1:-1:-1;;;5522:33:11;;;;;;;;;;;-1:-1:-1;;;;;;5565:43:11;-1:-1:-1;;;;;5565:43:11;;;;;;;;;;-1:-1:-1;;;;4256:1359:11:o;1769:153:9:-;1865:5;1844:11;;;:7;:11;;;;;;;;;:18;;:26;;-1:-1:-1;;;;1844:26:9;;;1885:30;;;;;;;1852:2;;1885:30;;;;;;;;;1769:153;;:::o;1613:150::-;1686:11;;;;:7;:11;;;;;;;;;:18;;:25;;-1:-1:-1;;;;1686:25:9;-1:-1:-1;;;1686:25:9;;;1726:30;;;;;;;1694:2;;1726:30;;;;;;;;;1613:150;;:::o;1928:107::-;1987:4;2010:11;;;:7;:11;;;;;:18;;;-1:-1:-1;;;2010:18:9;;;;;1928:107::o;4113:137:11:-;-1:-1:-1;;;;;4200:17:11;;4177:4;4200:17;;;:6;:17;;;;;:29;;;;:43;;;4233:10;:8;:10::i;7018:511:6:-;7182:14;;7123:7;;;;7178:303;;7262:16;;;;:7;:16;;;;;;;;7287:10;7262:36;;:24;;;:36;;;;;:44;7234:16;;;;;;;:23;:73;;:27;:73::i;:::-;7217:90;;7178:303;;;7343:6;7338:133;7355:7;:14;7351:1;:18;7338:133;;;7412:7;:16;7420:7;7412:16;;;;;;;;;;;:24;;:36;7437:7;7445:1;7437:10;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7412:36:6;;;;;;;;;;;-1:-1:-1;7412:36:6;:44;7394:62;;;;;7371:3;;7338:133;;;;7178:303;7497:25;:14;7516:5;7497:18;:25::i;:::-;7490:32;7018:511;-1:-1:-1;;;;;7018:511:6:o;5466:1546::-;5548:15;5566:22;;;:10;:22;;;;;:30;;5634;;;;:37;5607:24;;5634:174;;5781:16;;;;:7;:16;;;;;:27;;5634:174;;;5713:22;;;;:10;:22;;;;;:30;;5634:174;5607:201;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5607:201:6;;;;;;;;;;;;;;;;-1:-1:-1;;5833:14:6;;5819:11;5877:22;;;:10;:22;;;;;:34;;;5607:201;;-1:-1:-1;;;5833:18:6;;;;5877:34;-1:-1:-1;5819:11:6;-1:-1:-1;;5935:15:6;;;:22;-1:-1:-1;5935:46:6;;5978:3;5935:46;;;5968:7;5960:5;:15;5935:46;5921:60;-1:-1:-1;5992:22:6;6045:5;6028:713;6057:3;6052:1;:8;6028:713;;6081:14;6098:7;6106:1;6098:10;;;;;;;;;;;;;;;;;;;6169:1;6126:16;;;:7;:16;;;;;;-1:-1:-1;;;;;6126:32:6;;;;:24;;:32;;;;;;;:40;6098:10;;-1:-1:-1;6126:44:6;6122:609;;6208:16;;;;:7;:16;;;;;;;;-1:-1:-1;;;;;6208:32:6;;;;;:24;;;;:32;;;;;;:40;6340:22;;;:10;:22;;;;;:28;;;6295:32;;;;;;;;6190:58;;;;6295:74;;:44;:74::i;:::-;-1:-1:-1;;;;;6266:14:6;;;;;;;:6;:14;;;;;;;;:25;;:103;;;;;;;;6500:22;;;:10;:22;;;;;:29;;;6612:16;;;:7;:16;;;;;:32;;;:24;;:32;;;;;;:40;6393:260;;;;;;;;;;;6500:29;;;;;6266:14;;6408:10;;-1:-1:-1;;;;;;;;;;;6393:260:6;;;;;;;;6715:1;6672:16;;;:7;:16;;;;;;;;-1:-1:-1;;;;;6672:32:6;;;;:24;;:32;;;;;:44;6122:609;-1:-1:-1;6062:3:6;;6028:713;;;-1:-1:-1;6764:22:6;;;;:10;:22;;;;;:29;;;6750:69;;-1:-1:-1;;;;;6764:29:6;6795:7;6804:14;6750:13;:69::i;:::-;6830:22;;;;:10;:22;;;;;:34;;:40;;;6884:10;;;6880:126;;;6910:22;;;;:10;:22;;;;;;:32;;:39;;-1:-1:-1;;;;6910:39:6;-1:-1:-1;;;6910:39:6;;;6968:27;6921:10;;-1:-1:-1;;;;;;;;;;;6968:27:6;;5466:1546;;;;;;;;:::o;5622:1165:11:-;6204:11;;;;:7;:11;;;;;:18;:23;:37;;;;;6240:1;6231:6;:10;6204:37;6196:67;;;;;-1:-1:-1;;;6196:67:11;;;;;;;;;;;;-1:-1:-1;;;6196:67:11;;;;;;;;;;;;;;;6295:6;6274:7;:11;6282:2;6274:11;;;;;;;;;;;:18;;:27;;;;6334:8;6311:7;:11;6319:2;6311:11;;;;;;;;;;;:20;;:31;;;;6398:4;6352:7;:11;6360:2;6352:11;;;;;;;;;;;:19;;:31;6372:10;-1:-1:-1;;;;;6352:31:11;-1:-1:-1;;;;;6352:31:11;;;;;;;;;;;;:43;;;:50;;;;;;;;;;;;;;;;;;6456:4;6412:7;:11;6420:2;6412:11;;;;;;;;;;;:19;;:30;6432:9;-1:-1:-1;;;;;6412:30:11;-1:-1:-1;;;;;6412:30:11;;;;;;;;;;;;:41;;;:48;;;;;;;;;;;;;;;;;;6471:262;6481:2;6503:12;6535:15;6570:14;6604:24;6648:21;6689:9;6718:14;6471:9;:262::i;:::-;6744:36;6758:9;6769:2;6773:6;6744:13;:36::i;:::-;5622:1165;;;;;;;;;;;:::o;2041:114:9:-;-1:-1:-1;;;;;2127:12:9;2104:4;2127:12;;;:6;:12;;;;;:21;;;;;;;2041:114::o;1925:1318:7:-;2018:7;2129:11;;;:7;:11;;;;;:30;;:37;2018:7;;2089:15;;-1:-1:-1;;2129:41:7;2115:835;2200:19;2222:11;;;:7;:11;;;;;:30;;:33;;2253:1;;2222:33;;;;;;;;;;;;;;;;;;:36;;2272:12;2287:11;;;:7;:11;;;;;:30;;:33;;2222:36;;-1:-1:-1;2272:12:7;;2318:1;;2287:33;;;;;;;;;;;;;;;;2321:1;2287:36;;;;;;;;;2337:19;2375:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2375:28:7;;;;:19;;:28;;;;;:37;;;2287:36;;-1:-1:-1;2337:19:7;2375:52;-1:-1:-1;2371:569:7;;2477:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;2477:28:7;;;;:19;;:28;;;;;:37;;;2461:66;;2521:5;;2462:53;;:10;;:14;:53::i;2461:66::-;2447:80;-1:-1:-1;2549:16:7;2545:37;;-1:-1:-1;2581:1:7;2545:37;2613:34;2641:5;2614:21;:11;2630:4;2614:15;:21::i;:::-;2613:27;;:34::i;:::-;2600:47;;;;2665:5;;;;;2371:569;2723:40;2757:5;2724:27;:10;2739:11;2724:14;:27::i;2723:40::-;2709:54;-1:-1:-1;2785:16:7;2781:37;;-1:-1:-1;2817:1:7;2781:37;2849:11;;-1:-1:-1;2849:11:7;;2891:34;2919:5;2892:21;:11;2908:4;2892:15;:21::i;2891:34::-;2878:47;;;;-1:-1:-1;;;;;2180:3:7;2115:835;;;-1:-1:-1;3007:11:7;;;;:7;:11;;;;;:20;;;2989:39;;:9;;3003:2;:24;2989:13;:39::i;:::-;3078:17;3109:11;;;:7;:11;;;;;:32;;;2977:51;;-1:-1:-1;3078:17:7;3098:56;;3148:5;;3099:43;;:5;;:9;:43::i;3098:56::-;3186:11;;;;:7;:11;;;;;:34;;;3078:76;;-1:-1:-1;3172:64:7;;3186:49;;3078:76;3186:38;:49::i;:::-;3172:9;;:13;:64::i;:::-;3165:71;1925:1318;-1:-1:-1;;;;;;;1925:1318:7:o;2304:459:17:-;2362:7;2603:6;2599:45;;-1:-1:-1;2632:1:17;2625:8;;2599:45;2666:5;;;2670:1;2666;:5;:1;2689:5;;;;;:10;2681:56;;;;-1:-1:-1;;;2681:56:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3218:130;3276:7;3302:39;3306:1;3309;3302:39;;;;;;;;;;;;;;;;;:3;:39::i;763:516:14:-;853:4;;869:382;893:37;889:1;:41;869:382;;;1000:1;955:30;986:1;955:33;;;;;;;;;-1:-1:-1;;;;;955:33:14;:47;951:290;;1022:27;1066:30;1097:1;1066:33;;;;;;;;;1130:30;;;-1:-1:-1;;;1130:30:14;;-1:-1:-1;;;;;1130:30:14;;;;;;;;;1066:33;;;;-1:-1:-1;1122:51:14;;;;1066:33;;1130:21;;:30;;;;;;;;;;;;;;1066:33;1130:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1130:30:14;-1:-1:-1;;;;;1122:51:14;;1118:109;;;1204:4;1197:11;;;;;;1118:109;951:290;;932:3;;869:382;;;-1:-1:-1;1267:5:14;;763:516;-1:-1:-1;;;763:516:14:o;3938:306:7:-;4029:19;4063:1;4051:9;:13;:51;;-1:-1:-1;;;;;4079:12:7;;;;;;:6;:12;;;;;:23;;;4051:51;;;4067:9;4051:51;4029:73;;4126:69;4142:32;4154:4;4160:2;4164;4168:5;4142:11;:32::i;:::-;4126:69;;;;;;;;;;;;-1:-1:-1;;;4126:69:7;;;;:11;;:69;:15;:69::i;:::-;4112:83;;4205:32;4219:4;4225:11;4205:13;:32::i;6934:516:8:-;7152:15;:2;-1:-1:-1;;;;;7152:13:8;;:15::i;:::-;7149:295;;;7303:47;;;-1:-1:-1;;;;;7208:142:8;;7225:2;-1:-1:-1;;;;;7208:38:8;;7247:8;7257:4;7263:2;7267:5;7274:4;7208:71;;;;;;;;;;;;;-1:-1:-1;;;;;7208:71:8;;;;;;-1:-1:-1;;;;;7208:71:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7208:71:8;-1:-1:-1;;;;;;7208:142:8;;7183:250;;;;-1:-1:-1;;;7183:250:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1672:225:12;-1:-1:-1;;;;;1745:22:12;;1737:73;;;;-1:-1:-1;;;1737:73:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1846:6;;1825:38;;-1:-1:-1;;;;;1825:38:12;;;;1846:6;;1825:38;;1846:6;;1825:38;1873:6;:17;;-1:-1:-1;;;;;;1873:17:12;-1:-1:-1;;;;;1873:17:12;;;;;;;;;;1672:225::o;6793:766:11:-;6897:11;;;;:7;:11;;;;;:22;;:25;;6884:668;;6897:11;:25;;;;;;;;;;;;;;;;6975:11;;;:7;:11;;;;;;;:18;;6897:25;7016:20;;;6884:668;;;;;;;7119:34;;;;6884:668;;7178:32;;;;6884:668;;;;7235:11;;;;;;;:30;;;;:33;;-1:-1:-1;;;;;6897:25:11;;;;6945:7;;6975:18;;7016:20;;7059:12;;6884:668;;;;;;7235:30;6897:25;7235:33;;;;;;;;;;;;;;7269:1;7235:36;;;;;;;;;6884:668;;7317:11;;;;:7;:11;;;;;;;;;:26;;6884:668;;;;;;;;;;;;;;;;;7317:26;;6884:668;;7317:26;6884:668;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6884:668:11;;;;;;;;;;;;;;;;-1:-1:-1;;;7366:11:11;;;;:7;:11;;;;;;;;;:36;;6884:668;;;;;;;;;;;;;;;;;;;-1:-1:-1;7366:36:11;-1:-1:-1;6884:668:11;;7366:36;6884:668;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;7425:11:11;;;;:7;:11;;;;;:33;;;;7481:21;;;;;7425:33;;-1:-1:-1;7481:21:11;-1:-1:-1;;;7481:21:11;;;;-1:-1:-1;;;;;;7525:26:11;6884:12;:668::i;607:320:18:-;660:4;695:1;690;:6;;;676:187;;-1:-1:-1;724:16:18;:20;;:16;719:26;712:33;;676:187;778:1;766:14;;:2;:14;;:32;;;;;796:2;790:1;784:14;;;;766:32;762:101;;;-1:-1:-1;826:25:18;;;:16;821:31;814:38;;2427:241:9;2528:12;2561:34;2575:4;2581:2;2585;2589:5;2561:13;:34::i;:::-;2560:35;2552:54;;;;;-1:-1:-1;;;2552:54:9;;;;;;;;;;;;-1:-1:-1;;;2552:54:9;;;;;;;;;;;;;;;2623:38;2641:4;2647:2;2651;2655:5;2623:17;:38::i;1877:187:17:-;1963:7;1998:12;1990:6;;;;1982:29;;;;-1:-1:-1;;;1982:29:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2033:5:17;;;1877:187::o;4743:290:7:-;4834:1;4822:9;:13;:32;;;;;4853:1;4839:11;:15;4822:32;4818:209;;;-1:-1:-1;;;;;4894:12:7;;;;;;:6;:12;;;;;:23;;;:40;;4922:11;4894:27;:40::i;:::-;-1:-1:-1;;;;;4868:12:7;;;;;;:6;:12;;;;;:23;;:66;4818:209;;;4953:9;4949:78;;-1:-1:-1;;;;;4981:12:7;;;;;;;;:6;:12;;;;;:23;;:37;4743:290::o;590:797:16:-;650:4;1298:20;;1143:66;1337:15;;;;;:42;;-1:-1:-1;1356:23:16;;;1329:51;-1:-1:-1;;590:797:16:o;1307:134:17:-;1365:7;1391:43;1395:1;1398;1391:43;;;;;;;;;;;;;;;;;:3;:43::i;879:1006:7:-;975:18;996:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;996:30:7;;;;:19;;:30;;;;;:38;:49;;1039:5;996:42;:49::i;:::-;1060:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1060:30:7;;;;:19;;:30;;;;;:38;975:70;;-1:-1:-1;1056:761:7;;1125:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1125:30:7;;;;:19;;:30;;;;;:39;;;;;;;;1120:225;;-1:-1:-1;;;;;1184:17:7;;;;;;:6;:17;;;;;;;;:24;;:33;;;;;;;;;;;;;;;;;;1235:11;;;:7;:11;;;;;:22;;;:38;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1235:38:7;;;;;1291:30;;;;:19;;;;:30;;1120:225;1359:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1359:30:7;;;;:19;;:30;;;;;1401:15;1359:39;;;;:57;1056:761;;;1527:20;1570:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1570:30:7;;;;:19;;:30;;;;;:39;;;1550:60;;:15;;:19;:60::i;:::-;1624:19;1647:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1647:30:7;;;;:19;;:30;;;;;:38;1527:83;;-1:-1:-1;1624:19:7;1646:74;;1709:10;;1647:56;;1527:83;1647:42;:56::i;1646:74::-;1735:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1735:30:7;;;;:19;;:30;;;;;1777:15;:29;;;;1735:39;;;;:71;-1:-1:-1;;1056:761:7;1827:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1827:30:7;;;;;:19;;;;:30;;;;;;:51;;;;-1:-1:-1;879:1006:7:o;3969:338:17:-;4055:7;4155:12;4148:5;4140:28;;;;-1:-1:-1;;;4140:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4178:9;4194:1;4190;:5;;;;;;;3969:338;-1:-1:-1;;;;;3969:338:17:o;2161:213:9:-;2260:4;2283:18;2298:2;2283:14;:18::i;:::-;:44;;;;2305:22;2322:4;2305:16;:22::i;:::-;2283:68;;;;2331:20;2348:2;2331:16;:20::i;:::-;2283:84;;;-1:-1:-1;;2356:10:9;;2161:213;-1:-1:-1;;;2161:213:9:o;3249:683:7:-;3409:68;;;;;;;;;;;-1:-1:-1;;;3409:68:7;;;;;;;;3349:12;3409:11;;;:7;:11;;;;;-1:-1:-1;;;;;3409:25:7;;;;:19;;:25;;;;;;:33;:68;;3447:5;;3409:37;:68::i;:::-;3373:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;3373:25:7;;;;:19;;:25;;;;;:104;3487:28;3501:2;3381;3509:5;3487:13;:28::i;:::-;3533:33;3550:4;3556:2;3560:5;3533:16;:33::i;:::-;3526:40;;3582:9;3577:327;3601:11;;;;:7;:11;;;;;:26;;:33;3597:37;;3577:327;;;3655:21;3679:11;;;:7;:11;;;;;:26;;:29;;3706:1;;3679:29;;;;;;;;;;;;;;;;;;3757:11;;;:7;:11;;;;;;:36;;:39;;-1:-1:-1;;;;;3679:29:7;;;;-1:-1:-1;3757:36:7;3794:1;;3757:39;;;;;;;;;;;;;;;;;-1:-1:-1;3846:47:7;3887:5;3847:34;:4;3757:39;3847:8;:34::i;3846:47::-;-1:-1:-1;;;;;3810:21:7;;;;;;;:6;:21;;;;;:32;;;;:83;;;;;;;;-1:-1:-1;3636:3:7;3577:327;;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.7.1;\n\nimport './interfaces/IERC1155Metadata.sol';\nimport \"./utils/SafeMath.sol\";\nimport './utils/StringUtils.sol';\nimport './lib/Callable.sol';\nimport './lib/Privatizable.sol';\n\ncontract StashBlox is Callable, IERC1155Metadata, StringUtils {\n\n    using SafeMath for uint256;\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        _config.callbackAutoExecuteMaxAddresses = 50;\n        _config.baseURI = \"http://stashblox.com/tokens/\";\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @dev Function to withdraw ETH from the contract.\n     * @param to recipent address\n     * @param amount amount to withdraw\n     */\n    function withdraw(address to, uint256 amount) external onlyOwner {\n        require(_users[to].ETHBalance >= amount, \"Insufficient balance\");\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Withdrawal failed\");\n        _users[to].ETHBalance -= amount;\n    }\n\n    /**\n     * @dev Function to make an ETH deposit that can be used to pay token transfer .\n     * @param to recipent address\n     */\n    function deposit(address to) external payable {\n        _users[to].ETHBalance = _users[to].ETHBalance.add(msg.value);\n    }\n\n    /**\n     * @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer()).\n     */\n    receive() external payable {\n        _users[msg.sender].ETHBalance = _users[msg.sender].ETHBalance.add(msg.value);\n    }\n\n    /**\n     * @param id Token ID\n     * @return URI string\n     */\n    function uri(uint256 id) external view override returns (string memory) {\n        return _strConcat(_config.baseURI, _toHexString(id));\n    }\n\n\n\n}\n",
  "sourcePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
  "ast": {
    "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
    "exportedSymbols": {
      "StashBlox": [
        140
      ]
    },
    "id": 141,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "46:23:0"
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol",
        "file": "./interfaces/IERC1155Metadata.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 272,
        "src": "71:43:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol",
        "file": "./utils/SafeMath.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3632,
        "src": "115:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol",
        "file": "./utils/StringUtils.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3952,
        "src": "146:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol",
        "file": "./lib/Callable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 1041,
        "src": "180:28:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Privatizable.sol",
        "file": "./lib/Privatizable.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3188,
        "src": "209:32:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7,
              "name": "Callable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1040,
              "src": "265:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Callable_$1040",
                "typeString": "contract Callable"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "265:8:0"
          },
          {
            "baseName": {
              "id": 9,
              "name": "IERC1155Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 271,
              "src": "275:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1155Metadata_$271",
                "typeString": "contract IERC1155Metadata"
              }
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "275:16:0"
          },
          {
            "baseName": {
              "id": 11,
              "name": "StringUtils",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3951,
              "src": "293:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StringUtils_$3951",
                "typeString": "contract StringUtils"
              }
            },
            "id": 12,
            "nodeType": "InheritanceSpecifier",
            "src": "293:11:0"
          }
        ],
        "contractDependencies": [
          259,
          271,
          321,
          344,
          1040,
          1638,
          2095,
          2324,
          2488,
          3009,
          3101,
          3278,
          3388,
          3951
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 140,
        "linearizedBaseContracts": [
          140,
          3951,
          271,
          1040,
          2324,
          2488,
          3009,
          2095,
          3278,
          3101,
          344,
          1638,
          3388,
          259,
          321
        ],
        "name": "StashBlox",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 15,
            "libraryName": {
              "id": 13,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3631,
              "src": "318:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3631",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "312:27:0",
            "typeName": {
              "id": 14,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "331:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "body": {
              "id": 36,
              "nodeType": "Block",
              "src": "456:159:0",
              "statements": [
                {
                  "expression": {
                    "id": 23,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3375,
                        "src": "466:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3347_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 21,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "callbackAutoExecuteMaxAddresses",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3340,
                      "src": "466:39:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "3530",
                      "id": 22,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "508:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_50_by_1",
                        "typeString": "int_const 50"
                      },
                      "value": "50"
                    },
                    "src": "466:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 24,
                  "nodeType": "ExpressionStatement",
                  "src": "466:44:0"
                },
                {
                  "expression": {
                    "id": 29,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 25,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3375,
                        "src": "520:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3347_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 27,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "baseURI",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3342,
                      "src": "520:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "687474703a2f2f7374617368626c6f782e636f6d2f746f6b656e732f",
                      "id": 28,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "538:30:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_699ad49e673d0ba571e0814a1cc2e9c5b4688dea54cab55db91df34a385ab8a4",
                        "typeString": "literal_string \"http://stashblox.com/tokens/\""
                      },
                      "value": "http://stashblox.com/tokens/"
                    },
                    "src": "520:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 30,
                  "nodeType": "ExpressionStatement",
                  "src": "520:48:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 32,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "597:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 33,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "597:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 31,
                      "name": "_transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3088,
                      "src": "578:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "578:30:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35,
                  "nodeType": "ExpressionStatement",
                  "src": "578:30:0"
                }
              ]
            },
            "documentation": {
              "id": 16,
              "nodeType": "StructuredDocumentation",
              "src": "345:91:0",
              "text": " @dev Initializes the contract setting the deployer as the initial owner."
            },
            "id": 37,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "453:2:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "456:0:0"
            },
            "scope": 140,
            "src": "441:174:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 78,
              "nodeType": "Block",
              "src": "832:224:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 48,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3379,
                              "src": "850:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 50,
                            "indexExpression": {
                              "id": 49,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "857:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "850:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3290_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 51,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3286,
                          "src": "850:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 52,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "875:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "850:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 54,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "883:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 47,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "842:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "842:64:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "842:64:0"
                },
                {
                  "assignments": [
                    58,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 58,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "917:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 57,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "917:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 65,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 63,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "958:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 59,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "935:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 60,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "935:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 62,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 61,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "950:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "935:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "935:26:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "916:45:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 67,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58,
                        "src": "979:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5769746864726177616c206661696c6564",
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "988:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        },
                        "value": "Withdrawal failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        }
                      ],
                      "id": 66,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "971:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 69,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "971:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 70,
                  "nodeType": "ExpressionStatement",
                  "src": "971:37:0"
                },
                {
                  "expression": {
                    "id": 76,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 71,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3379,
                          "src": "1018:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 73,
                        "indexExpression": {
                          "id": 72,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1025:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1018:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3290_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 74,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3286,
                      "src": "1018:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 75,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "1043:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1018:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 77,
                  "nodeType": "ExpressionStatement",
                  "src": "1018:31:0"
                }
              ]
            },
            "documentation": {
              "id": 38,
              "nodeType": "StructuredDocumentation",
              "src": "621:141:0",
              "text": " @dev Function to withdraw ETH from the contract.\n @param to recipent address\n @param amount amount to withdraw"
            },
            "functionSelector": "f3fef3a3",
            "id": 79,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 45,
                "modifierName": {
                  "id": 44,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3038,
                  "src": "822:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "822:9:0"
              }
            ],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 43,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "785:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "785:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "797:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "784:28:0"
            },
            "returnParameters": {
              "id": 46,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "832:0:0"
            },
            "scope": 140,
            "src": "767:289:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 99,
              "nodeType": "Block",
              "src": "1243:77:0",
              "statements": [
                {
                  "expression": {
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 85,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3379,
                          "src": "1253:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 87,
                        "indexExpression": {
                          "id": 86,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 82,
                          "src": "1260:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1253:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3290_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 88,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3286,
                      "src": "1253:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 94,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1303:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1303:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 89,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3379,
                              "src": "1277:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 91,
                            "indexExpression": {
                              "id": 90,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 82,
                              "src": "1284:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1277:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3290_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 92,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3286,
                          "src": "1277:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 93,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3464,
                        "src": "1277:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 96,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1277:36:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1253:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 98,
                  "nodeType": "ExpressionStatement",
                  "src": "1253:60:0"
                }
              ]
            },
            "documentation": {
              "id": 80,
              "nodeType": "StructuredDocumentation",
              "src": "1062:130:0",
              "text": " @dev Function to make an ETH deposit that can be used to pay token transfer .\n @param to recipent address"
            },
            "functionSelector": "f340fa01",
            "id": 100,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 82,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 100,
                  "src": "1214:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1214:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1213:12:0"
            },
            "returnParameters": {
              "id": 84,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1243:0:0"
            },
            "scope": 140,
            "src": "1197:123:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 120,
              "nodeType": "Block",
              "src": "1502:93:0",
              "statements": [
                {
                  "expression": {
                    "id": 118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 104,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3379,
                          "src": "1512:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 107,
                        "indexExpression": {
                          "expression": {
                            "id": 105,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1519:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1519:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1512:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3290_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 108,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3286,
                      "src": "1512:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 115,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1578:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1578:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 109,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3379,
                              "src": "1544:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 112,
                            "indexExpression": {
                              "expression": {
                                "id": 110,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1551:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1551:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1544:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3290_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 113,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3286,
                          "src": "1544:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 114,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3464,
                        "src": "1544:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1544:44:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1512:76:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 119,
                  "nodeType": "ExpressionStatement",
                  "src": "1512:76:0"
                }
              ]
            },
            "documentation": {
              "id": 101,
              "nodeType": "StructuredDocumentation",
              "src": "1326:144:0",
              "text": " @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer())."
            },
            "id": 121,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1482:2:0"
            },
            "returnParameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1502:0:0"
            },
            "scope": 140,
            "src": "1475:120:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              270
            ],
            "body": {
              "id": 138,
              "nodeType": "Block",
              "src": "1741:69:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 131,
                          "name": "_config",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3375,
                          "src": "1769:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Config_$3347_storage",
                            "typeString": "struct StashBloxData.Config storage ref"
                          }
                        },
                        "id": 132,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "baseURI",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3342,
                        "src": "1769:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 134,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 124,
                            "src": "1799:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 133,
                          "name": "_toHexString",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3872,
                          "src": "1786:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (string memory)"
                          }
                        },
                        "id": 135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1786:16:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 130,
                      "name": "_strConcat",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3732,
                      "src": "1758:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (string memory,string memory) pure returns (string memory)"
                      }
                    },
                    "id": 136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1758:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 129,
                  "id": 137,
                  "nodeType": "Return",
                  "src": "1751:52:0"
                }
              ]
            },
            "documentation": {
              "id": 122,
              "nodeType": "StructuredDocumentation",
              "src": "1601:63:0",
              "text": " @param id Token ID\n @return URI string"
            },
            "functionSelector": "0e89341c",
            "id": 139,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 126,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1708:8:0"
            },
            "parameters": {
              "id": 125,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 124,
                  "mutability": "mutable",
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1682:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 123,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1682:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1681:12:0"
            },
            "returnParameters": {
              "id": 129,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 128,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1726:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 127,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1726:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1725:15:0"
            },
            "scope": 140,
            "src": "1669:141:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 141,
        "src": "243:1572:0"
      }
    ],
    "src": "46:1770:0"
  },
  "legacyAST": {
    "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
    "exportedSymbols": {
      "StashBlox": [
        140
      ]
    },
    "id": 141,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "46:23:0"
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol",
        "file": "./interfaces/IERC1155Metadata.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 272,
        "src": "71:43:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol",
        "file": "./utils/SafeMath.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3632,
        "src": "115:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol",
        "file": "./utils/StringUtils.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3952,
        "src": "146:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol",
        "file": "./lib/Callable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 1041,
        "src": "180:28:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Privatizable.sol",
        "file": "./lib/Privatizable.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3188,
        "src": "209:32:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7,
              "name": "Callable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1040,
              "src": "265:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Callable_$1040",
                "typeString": "contract Callable"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "265:8:0"
          },
          {
            "baseName": {
              "id": 9,
              "name": "IERC1155Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 271,
              "src": "275:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1155Metadata_$271",
                "typeString": "contract IERC1155Metadata"
              }
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "275:16:0"
          },
          {
            "baseName": {
              "id": 11,
              "name": "StringUtils",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3951,
              "src": "293:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StringUtils_$3951",
                "typeString": "contract StringUtils"
              }
            },
            "id": 12,
            "nodeType": "InheritanceSpecifier",
            "src": "293:11:0"
          }
        ],
        "contractDependencies": [
          259,
          271,
          321,
          344,
          1040,
          1638,
          2095,
          2324,
          2488,
          3009,
          3101,
          3278,
          3388,
          3951
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 140,
        "linearizedBaseContracts": [
          140,
          3951,
          271,
          1040,
          2324,
          2488,
          3009,
          2095,
          3278,
          3101,
          344,
          1638,
          3388,
          259,
          321
        ],
        "name": "StashBlox",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 15,
            "libraryName": {
              "id": 13,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3631,
              "src": "318:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3631",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "312:27:0",
            "typeName": {
              "id": 14,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "331:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "body": {
              "id": 36,
              "nodeType": "Block",
              "src": "456:159:0",
              "statements": [
                {
                  "expression": {
                    "id": 23,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3375,
                        "src": "466:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3347_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 21,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "callbackAutoExecuteMaxAddresses",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3340,
                      "src": "466:39:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "3530",
                      "id": 22,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "508:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_50_by_1",
                        "typeString": "int_const 50"
                      },
                      "value": "50"
                    },
                    "src": "466:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 24,
                  "nodeType": "ExpressionStatement",
                  "src": "466:44:0"
                },
                {
                  "expression": {
                    "id": 29,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 25,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3375,
                        "src": "520:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3347_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 27,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "baseURI",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3342,
                      "src": "520:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "687474703a2f2f7374617368626c6f782e636f6d2f746f6b656e732f",
                      "id": 28,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "538:30:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_699ad49e673d0ba571e0814a1cc2e9c5b4688dea54cab55db91df34a385ab8a4",
                        "typeString": "literal_string \"http://stashblox.com/tokens/\""
                      },
                      "value": "http://stashblox.com/tokens/"
                    },
                    "src": "520:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 30,
                  "nodeType": "ExpressionStatement",
                  "src": "520:48:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 32,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "597:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 33,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "597:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 31,
                      "name": "_transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3088,
                      "src": "578:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "578:30:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35,
                  "nodeType": "ExpressionStatement",
                  "src": "578:30:0"
                }
              ]
            },
            "documentation": {
              "id": 16,
              "nodeType": "StructuredDocumentation",
              "src": "345:91:0",
              "text": " @dev Initializes the contract setting the deployer as the initial owner."
            },
            "id": 37,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "453:2:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "456:0:0"
            },
            "scope": 140,
            "src": "441:174:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 78,
              "nodeType": "Block",
              "src": "832:224:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 48,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3379,
                              "src": "850:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 50,
                            "indexExpression": {
                              "id": 49,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "857:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "850:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3290_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 51,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3286,
                          "src": "850:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 52,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "875:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "850:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 54,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "883:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 47,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "842:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "842:64:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "842:64:0"
                },
                {
                  "assignments": [
                    58,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 58,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "917:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 57,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "917:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 65,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 63,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "958:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 59,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "935:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 60,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "935:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 62,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 61,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "950:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "935:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "935:26:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "916:45:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 67,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58,
                        "src": "979:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5769746864726177616c206661696c6564",
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "988:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        },
                        "value": "Withdrawal failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        }
                      ],
                      "id": 66,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "971:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 69,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "971:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 70,
                  "nodeType": "ExpressionStatement",
                  "src": "971:37:0"
                },
                {
                  "expression": {
                    "id": 76,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 71,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3379,
                          "src": "1018:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 73,
                        "indexExpression": {
                          "id": 72,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1025:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1018:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3290_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 74,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3286,
                      "src": "1018:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 75,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "1043:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1018:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 77,
                  "nodeType": "ExpressionStatement",
                  "src": "1018:31:0"
                }
              ]
            },
            "documentation": {
              "id": 38,
              "nodeType": "StructuredDocumentation",
              "src": "621:141:0",
              "text": " @dev Function to withdraw ETH from the contract.\n @param to recipent address\n @param amount amount to withdraw"
            },
            "functionSelector": "f3fef3a3",
            "id": 79,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 45,
                "modifierName": {
                  "id": 44,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3038,
                  "src": "822:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "822:9:0"
              }
            ],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 43,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "785:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "785:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "797:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "784:28:0"
            },
            "returnParameters": {
              "id": 46,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "832:0:0"
            },
            "scope": 140,
            "src": "767:289:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 99,
              "nodeType": "Block",
              "src": "1243:77:0",
              "statements": [
                {
                  "expression": {
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 85,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3379,
                          "src": "1253:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 87,
                        "indexExpression": {
                          "id": 86,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 82,
                          "src": "1260:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1253:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3290_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 88,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3286,
                      "src": "1253:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 94,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1303:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1303:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 89,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3379,
                              "src": "1277:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 91,
                            "indexExpression": {
                              "id": 90,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 82,
                              "src": "1284:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1277:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3290_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 92,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3286,
                          "src": "1277:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 93,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3464,
                        "src": "1277:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 96,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1277:36:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1253:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 98,
                  "nodeType": "ExpressionStatement",
                  "src": "1253:60:0"
                }
              ]
            },
            "documentation": {
              "id": 80,
              "nodeType": "StructuredDocumentation",
              "src": "1062:130:0",
              "text": " @dev Function to make an ETH deposit that can be used to pay token transfer .\n @param to recipent address"
            },
            "functionSelector": "f340fa01",
            "id": 100,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 82,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 100,
                  "src": "1214:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1214:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1213:12:0"
            },
            "returnParameters": {
              "id": 84,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1243:0:0"
            },
            "scope": 140,
            "src": "1197:123:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 120,
              "nodeType": "Block",
              "src": "1502:93:0",
              "statements": [
                {
                  "expression": {
                    "id": 118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 104,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3379,
                          "src": "1512:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 107,
                        "indexExpression": {
                          "expression": {
                            "id": 105,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1519:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1519:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1512:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3290_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 108,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3286,
                      "src": "1512:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 115,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1578:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1578:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 109,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3379,
                              "src": "1544:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3290_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 112,
                            "indexExpression": {
                              "expression": {
                                "id": 110,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1551:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1551:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1544:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3290_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 113,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3286,
                          "src": "1544:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 114,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3464,
                        "src": "1544:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1544:44:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1512:76:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 119,
                  "nodeType": "ExpressionStatement",
                  "src": "1512:76:0"
                }
              ]
            },
            "documentation": {
              "id": 101,
              "nodeType": "StructuredDocumentation",
              "src": "1326:144:0",
              "text": " @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer())."
            },
            "id": 121,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1482:2:0"
            },
            "returnParameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1502:0:0"
            },
            "scope": 140,
            "src": "1475:120:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              270
            ],
            "body": {
              "id": 138,
              "nodeType": "Block",
              "src": "1741:69:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 131,
                          "name": "_config",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3375,
                          "src": "1769:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Config_$3347_storage",
                            "typeString": "struct StashBloxData.Config storage ref"
                          }
                        },
                        "id": 132,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "baseURI",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3342,
                        "src": "1769:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 134,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 124,
                            "src": "1799:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 133,
                          "name": "_toHexString",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3872,
                          "src": "1786:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (string memory)"
                          }
                        },
                        "id": 135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1786:16:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 130,
                      "name": "_strConcat",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3732,
                      "src": "1758:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (string memory,string memory) pure returns (string memory)"
                      }
                    },
                    "id": 136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1758:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 129,
                  "id": 137,
                  "nodeType": "Return",
                  "src": "1751:52:0"
                }
              ]
            },
            "documentation": {
              "id": 122,
              "nodeType": "StructuredDocumentation",
              "src": "1601:63:0",
              "text": " @param id Token ID\n @return URI string"
            },
            "functionSelector": "0e89341c",
            "id": 139,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 126,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1708:8:0"
            },
            "parameters": {
              "id": 125,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 124,
                  "mutability": "mutable",
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1682:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 123,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1682:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1681:12:0"
            },
            "returnParameters": {
              "id": 129,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 128,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1726:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 127,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1726:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1725:15:0"
            },
            "scope": 140,
            "src": "1669:141:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 141,
        "src": "243:1572:0"
      }
    ],
    "src": "46:1770:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.1+commit.f4a555be.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-10-20T21:31:25.943Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptCallback(uint256)": {
        "details": "Accept a callback",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "approveCallback(uint256)": {
        "details": "Approve a callback",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "authorizeMaintener(uint256,address)": {
        "details": "Function to authorize an address to maintain a token.",
        "params": {
          "maintener": "The authorized address"
        }
      },
      "authorizeTokenizer(address)": {
        "details": "Function to authorize an address to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "Get the specified address' balance for token with specified ID. Attempting to query the zero account for a balance will result in a revert.",
        "params": {
          "account": "The address of the token holder",
          "id": "ID of the token"
        },
        "returns": {
          "_0": "The account's balance of the token type requested"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "Get the balance of multiple account/token pairs. If any of the query accounts is the zero account, this query will revert.",
        "params": {
          "accounts": "The addresses of the token holders",
          "ids": "IDs of the tokens"
        },
        "returns": {
          "_0": "Balances for each account and token id pair"
        }
      },
      "cloneToken(uint256,uint256[],uint256[])": {
        "details": "Function to mint tokens in batch.",
        "params": {
          "id": "Identifier of the template",
          "ids": "list of IDs of the tokens to be minted",
          "metadataHashes": "list of metadata file hashes"
        }
      },
      "constructor": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "createToken(address,uint256,uint256,uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)": {
        "details": "Function to mint an amount of a token with the given ID.",
        "params": {
          "feesRecipients": "list of addresses receiving transfer fees",
          "feesRecipientsPercentage": "list of percentage, each one for the corresponding feesRecipients",
          "id": "ID of the token to be minted",
          "isPrivate": "true if holder need approval",
          "legalAuthority": "address of the legal authority",
          "metadataHash": "Metadata file hash",
          "minHoldingForCallback": "minimum holding to propose a callback",
          "recipient": "The address that will own the minted tokens",
          "supply": "Amount of the token to be minted",
          "transactionFees": "transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]"
        }
      },
      "deposit(address)": {
        "details": "Function to make an ETH deposit that can be used to pay token transfer .",
        "params": {
          "to": "recipent address"
        }
      },
      "executeCallback(uint256,uint256)": {
        "details": "Accept a callback. Caller need to recall the function to continue the callback until completed.",
        "params": {
          "callbackId": "callback proposition ID",
          "maxCall": "maximal call to excute"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "The account of the Tokens",
          "operator": "Address of authorized operator"
        },
        "returns": {
          "_0": "True if the operator is approved, false if not"
        }
      },
      "isLockedAddress(address)": {
        "details": "Function to check if an address is lockec.",
        "params": {
          "addr": "The address to check"
        }
      },
      "isLockedToken(uint256)": {
        "details": "Function to check if a token is locked.",
        "params": {
          "id": "The token ID"
        }
      },
      "isMaintener(uint256,address)": {
        "details": "Function to check if an address is authorized to maintain a token.",
        "params": {
          "id": "the token id",
          "maintener": "The authorized address"
        },
        "returns": {
          "_0": "true if it's a maintener address"
        }
      },
      "isTokenizer(address)": {
        "details": "Function to check if an address is authorized to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "lockAddress(address)": {
        "details": "Function to lock an address.",
        "params": {
          "addr": "The address to lock"
        }
      },
      "lockToken(uint256,uint256)": {
        "details": "Function to lock a token.",
        "params": {
          "id": "The token ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proposeCallback(uint256,uint256,uint256,address[],uint256)": {
        "details": "Propose to buy the whole supply of a token. The proposer must hold minHoldingForCallback% of the total supply. StashBlox must approve the price with acceptCallback();",
        "params": {
          "callees": "list of calless. Empty list means all holders.",
          "price": "proposed price",
          "tokenId": "Token ID"
        }
      },
      "refuseCallback(uint256)": {
        "details": "Refuse a callback if the price is not enough.",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "revokeMaintener(uint256,address)": {
        "details": "Function to revoke the authorization to maintain a token.",
        "params": {
          "id": "the token id",
          "maintener": "The authorized address"
        }
      },
      "revokeTokenizer(address)": {
        "details": "Function to revoke the authorization to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155BatchReceived` on `to` and act appropriately.",
        "params": {
          "data": "Data forwarded to `onERC1155Received` if `to` is a contract receiver",
          "from": "Source address",
          "ids": "IDs of each token type",
          "to": "Target address",
          "values": "Transfer amounts per token type"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.",
        "params": {
          "data": "Data forwarded to `onERC1155Received` if `to` is a contract receiver",
          "from": "Source address",
          "id": "ID of the token type",
          "to": "Target address",
          "value": "Transfer amount"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator. An operator is allowed to transfer all tokens of the sender on their behalf. Because an account already has operator privileges for itself, this function will revert if the account attempts to set the approval status for itself.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "address to set the approval"
        }
      },
      "setCallbackAutoExecuteMaxAddresses(uint256)": {
        "details": "Maximum addresses to execute automatically the callback when is accepted.",
        "params": {
          "newMax": "new maximum"
        }
      },
      "setProxyRegistryAddress(address[10])": {
        "details": "Function to update the operator whitelist",
        "params": {
          "proxyAddresses": "List of addresses"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `_interfaceID` and"
        }
      },
      "transactionFees(address,uint256,uint256)": {
        "details": "Function to get the transaction price to transfer tokens.",
        "params": {
          "account": "the address from where to transfer the tokens",
          "id": "The token ID",
          "value": "The amount to transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockAddress(address)": {
        "details": "Function to unlock an address.",
        "params": {
          "addr": "The address to unlock"
        }
      },
      "unlockToken(uint256,uint256)": {
        "details": "Function to unlock a token.",
        "params": {
          "id": "The token ID"
        }
      },
      "updateToken(uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)": {
        "details": "Function to update a token with the given ID.",
        "params": {
          "feesRecipients": "list of addresses receiving transfer fees",
          "feesRecipientsPercentage": "list of percentage, each one for the corresponding feesRecipients",
          "id": "ID of the token to be updated",
          "isPrivate": "true if holder need approval",
          "legalAuthority": "address of the legal authority",
          "metadataHash": "Metadata file hash",
          "minHoldingForCallback": "minimum holding to propose a callback",
          "transactionFees": "transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]"
        }
      },
      "uri(uint256)": {
        "params": {
          "id": "Token ID"
        },
        "returns": {
          "_0": "URI string"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Function to withdraw ETH from the contract.",
        "params": {
          "amount": "amount to withdraw",
          "to": "recipent address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of an operator for a given account."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "version": 1
  }
}