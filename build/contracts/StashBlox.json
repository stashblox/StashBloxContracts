{
  "contractName": "StashBlox",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_CallbackId",
          "type": "uint256"
        }
      ],
      "name": "CallbackUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_documentHash",
          "type": "uint256"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_callbacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "escrowedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "callCounter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "needLegalApproval",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "approvedByLegal",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "refused",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "accepted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_config",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "callbackAutoExecuteMaxAddresses",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "baseURI",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lumpSumTransactionFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueTransactionFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "locked",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_users",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isTokenizer",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isLocked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "ETHBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "acceptCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "approveCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "authorizeMaintener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "authorizeTokenizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "metadataHashes",
          "type": "uint256[]"
        }
      ],
      "name": "cloneToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "transactionFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "address[]",
          "name": "feesRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feesRecipientsPercentage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        }
      ],
      "name": "createToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCall",
          "type": "uint256"
        }
      ],
      "name": "executeCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isLockedAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLockedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "isMaintener",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "isTokenizer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "lockAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "lockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "callees",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "proposeCallback",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "callbackId",
          "type": "uint256"
        }
      ],
      "name": "refuseCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "maintener",
          "type": "address"
        }
      ],
      "name": "revokeMaintener",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenizer",
          "type": "address"
        }
      ],
      "name": "revokeTokenizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMax",
          "type": "uint256"
        }
      ],
      "name": "setCallbackAutoExecuteMaxAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[10]",
          "name": "proxyAddresses",
          "type": "address[10]"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transactionFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "unlockAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "documentHash",
          "type": "uint256"
        }
      ],
      "name": "unlockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metadataHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "transactionFees",
          "type": "uint256[3]"
        },
        {
          "internalType": "address[]",
          "name": "feesRecipients",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feesRecipientsPercentage",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minHoldingForCallback",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPrivate",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "legalAuthority",
          "type": "address"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_CallbackId\",\"type\":\"uint256\"}],\"name\":\"CallbackUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_documentHash\",\"type\":\"uint256\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_callbacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"escrowedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callCounter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"needLegalApproval\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"approvedByLegal\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refused\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"accepted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_config\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackAutoExecuteMaxAddresses\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lumpSumTransactionFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueTransactionFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_users\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTokenizer\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"ETHBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"acceptCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"approveCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"authorizeMaintener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"authorizeTokenizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"metadataHashes\",\"type\":\"uint256[]\"}],\"name\":\"cloneToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"transactionFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[]\",\"name\":\"feesRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feesRecipientsPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCall\",\"type\":\"uint256\"}],\"name\":\"executeCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isLockedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLockedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"isMaintener\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"isTokenizer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"lockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"callees\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"proposeCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"callbackId\",\"type\":\"uint256\"}],\"name\":\"refuseCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"maintener\",\"type\":\"address\"}],\"name\":\"revokeMaintener\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenizer\",\"type\":\"address\"}],\"name\":\"revokeTokenizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setCallbackAutoExecuteMaxAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[10]\",\"name\":\"proxyAddresses\",\"type\":\"address[10]\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transactionFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unlockAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"documentHash\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metadataHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"transactionFees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address[]\",\"name\":\"feesRecipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feesRecipientsPercentage\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minHoldingForCallback\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPrivate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"legalAuthority\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptCallback(uint256)\":{\"details\":\"Accept a callback\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"approveCallback(uint256)\":{\"details\":\"Approve a callback\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"authorizeMaintener(uint256,address)\":{\"details\":\"Function to authorize an address to maintain a token.\",\"params\":{\"maintener\":\"The authorized address\"}},\"authorizeTokenizer(address)\":{\"details\":\"Function to authorize an address to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"balanceOf(address,uint256)\":{\"details\":\"Get the specified address' balance for token with specified ID. Attempting to query the zero account for a balance will result in a revert.\",\"params\":{\"account\":\"The address of the token holder\",\"id\":\"ID of the token\"},\"returns\":{\"_0\":\"The account's balance of the token type requested\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Get the balance of multiple account/token pairs. If any of the query accounts is the zero account, this query will revert.\",\"params\":{\"accounts\":\"The addresses of the token holders\",\"ids\":\"IDs of the tokens\"},\"returns\":{\"_0\":\"Balances for each account and token id pair\"}},\"cloneToken(uint256,uint256[],uint256[])\":{\"details\":\"Function to mint tokens in batch.\",\"params\":{\"id\":\"Identifier of the template\",\"ids\":\"list of IDs of the tokens to be minted\",\"metadataHashes\":\"list of metadata file hashes\"}},\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"createToken(address,uint256,uint256,uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)\":{\"details\":\"Function to mint an amount of a token with the given ID.\",\"params\":{\"feesRecipients\":\"list of addresses receiving transfer fees\",\"feesRecipientsPercentage\":\"list of percentage, each one for the corresponding feesRecipients\",\"id\":\"ID of the token to be minted\",\"metadataHash\":\"Metadata file hash\",\"minHoldingForCallback\":\"minimum holding to propose a callback\",\"recipient\":\"The address that will own the minted tokens\",\"supply\":\"Amount of the token to be minted\",\"transactionFees\":\"transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]\"}},\"deposit(address)\":{\"details\":\"Function to make an ETH deposit that can be used to pay token transfer .\",\"params\":{\"to\":\"recipent address\"}},\"executeCallback(uint256,uint256)\":{\"details\":\"Accept a callback. Caller need to recall the function to continue the callback until completed.\",\"params\":{\"callbackId\":\"callback proposition ID\",\"maxCall\":\"maximal call to excute\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"The account of the Tokens\",\"operator\":\"Address of authorized operator\"},\"returns\":{\"_0\":\"True if the operator is approved, false if not\"}},\"isLockedAddress(address)\":{\"details\":\"Function to check if an address is lockec.\",\"params\":{\"addr\":\"The address to check\"}},\"isLockedToken(uint256)\":{\"details\":\"Function to check if a token is locked.\",\"params\":{\"id\":\"The token ID\"}},\"isMaintener(uint256,address)\":{\"details\":\"Function to check if an address is authorized to maintain a token.\",\"params\":{\"id\":\"the token id\",\"maintener\":\"The authorized address\"},\"returns\":{\"_0\":\"true if it's a maintener address\"}},\"isTokenizer(address)\":{\"details\":\"Function to check if an address is authorized to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"lockAddress(address)\":{\"details\":\"Function to lock an address.\",\"params\":{\"addr\":\"The address to lock\"}},\"lockToken(uint256,uint256)\":{\"details\":\"Function to lock a token.\",\"params\":{\"id\":\"The token ID\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proposeCallback(uint256,uint256,uint256,address[],uint256)\":{\"details\":\"Propose to buy the whole supply of a token. The proposer must hold minHoldingForCallback% of the total supply. StashBlox must approve the price with acceptCallback();\",\"params\":{\"callees\":\"list of calless. Empty list means all holders.\",\"price\":\"proposed price\",\"tokenId\":\"Token ID\"}},\"refuseCallback(uint256)\":{\"details\":\"Refuse a callback if the price is not enough.\",\"params\":{\"callbackId\":\"callback proposition ID\"}},\"revokeMaintener(uint256,address)\":{\"details\":\"Function to revoke the authorization to maintain a token.\",\"params\":{\"id\":\"the token id\",\"maintener\":\"The authorized address\"}},\"revokeTokenizer(address)\":{\"details\":\"Function to revoke the authorization to create a token.\",\"params\":{\"tokenizer\":\"The authorized address\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155BatchReceived` on `to` and act appropriately.\",\"params\":{\"data\":\"Data forwarded to `onERC1155Received` if `to` is a contract receiver\",\"from\":\"Source address\",\"ids\":\"IDs of each token type\",\"to\":\"Target address\",\"values\":\"Transfer amounts per token type\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.\",\"params\":{\"data\":\"Data forwarded to `onERC1155Received` if `to` is a contract receiver\",\"from\":\"Source address\",\"id\":\"ID of the token type\",\"to\":\"Target address\",\"value\":\"Transfer amount\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator. An operator is allowed to transfer all tokens of the sender on their behalf. Because an account already has operator privileges for itself, this function will revert if the account attempts to set the approval status for itself.\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"operator\":\"address to set the approval\"}},\"setCallbackAutoExecuteMaxAddresses(uint256)\":{\"details\":\"Maximum addresses to execute automatically the callback when is accepted.\",\"params\":{\"newMax\":\"new maximum\"}},\"setProxyRegistryAddress(address[10])\":{\"details\":\"Function to update the operator whitelist\",\"params\":{\"proxyAddresses\":\"List of addresses\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `_interfaceID` and\"}},\"transactionFees(address,uint256,uint256)\":{\"details\":\"Function to get the transaction price to transfer tokens.\",\"params\":{\"account\":\"the address from where to transfer the tokens\",\"id\":\"The token ID\",\"value\":\"The amount to transfer\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockAddress(address)\":{\"details\":\"Function to unlock an address.\",\"params\":{\"addr\":\"The address to unlock\"}},\"unlockToken(uint256,uint256)\":{\"details\":\"Function to unlock a token.\",\"params\":{\"id\":\"The token ID\"}},\"uri(uint256)\":{\"params\":{\"id\":\"Token ID\"},\"returns\":{\"_0\":\"URI string\"}},\"withdraw(address,uint256)\":{\"details\":\"Function to withdraw ETH from the contract.\",\"params\":{\"amount\":\"amount to withdraw\",\"to\":\"recipent address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForAll(address,address)\":{\"notice\":\"Queries the approval status of an operator for a given account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol\":\"StashBlox\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol\":{\"keccak256\":\"0x1d67f07c026f2174d2308648c4ecabcb226a46beaf201a1230c3c08ec84af3e9\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://ba0f88aa559a9781fe55ad7797a286190981cfca576fc85177ebda50897020d5\",\"dweb:/ipfs/QmRPNq6TvuytVa4GR1JUTp5SEnuZPzrd8JwK1azguhS7qT\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155.sol\":{\"keccak256\":\"0xe0121db1d8ff46e6f422f69cb0e2d826b6b3fc701ee2af64644965ed3e527f3f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://70bf80157d73b53af3e3fe94f1b995fa521bb143a44ae79b6c2d3d923a59b331\",\"dweb:/ipfs/QmNPwXgdkYJcZofamebRCqiDPtMRqhaQsyRBeqUd2841YV\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol\":{\"keccak256\":\"0x121c132f1a15fafd91c187380702cb32d60beab1a4054670efc987e36bc2b70f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://425182c1ecd27456fc2f1c3fd82444b17a13f2e4e503bb3f7b973e83d2ceb1bb\",\"dweb:/ipfs/QmU54fpZCpdGtjUAbQkr4cYikCzKKQqjS3LPNQpYpJXiA8\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Receiver.sol\":{\"keccak256\":\"0xa2e894006f84deca9f9d37735ce39044f101b5d035cb5e21242c55e52de6e881\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2444dcc76058c4d324fde1a42484f86cacaf2348faabfd334bb053c435082b64\",\"dweb:/ipfs/Qmb94fe1Y1Wqq6h9pxpCfsn58ZMdjGSmJ5hC5Ex2yB1gNm\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0x1588ef316db84c168b02bc9a38926a11fae69741da7dacb4314631318b90e777\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d51ab1e9deae9cac01eb549b89a1d11410c12301933d1679bdfd5e5ab8ff691\",\"dweb:/ipfs/QmdQW8fZkocPQxNQm6wgse6k3Mqt87sS8QiQFE96U6rkGj\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC173.sol\":{\"keccak256\":\"0x7d35a40f601c5245c540eb35f11a2227389b965acdee1abab1c88c7360c10050\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9fb40310238de5d7a8b39154b1baff899f089984f62ed052ec07f86b9d5603ba\",\"dweb:/ipfs/QmQBLGwAEiAFQpJC6d61qgGDi1n93v2eWKAaRABhckNzW3\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol\":{\"keccak256\":\"0xb9aa980f9ba87d646689ceea245305c14f82664f78437652ca83060d291a0a70\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://1b36f9cb1d0a7863b9063b52abaf9db029055f073c31b93ebe02fc20ccbeff73\",\"dweb:/ipfs/QmP5JhuPrqPMdKgC4YNKqBaMZEJSJVqBD4vysr6NyfdMgM\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/ChargeableTransfer.sol\":{\"keccak256\":\"0xe27c25aff4fdeb4a5ce67b84b2a8ca01e91a486e85d121c9cd421e5d2f905845\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f28f6d033ef7e0b7c46e37d4bda5c5e91c5a83498199274212fe5568bb129d1a\",\"dweb:/ipfs/QmZYfueEu5uGK3ecPEG2JpLQdBmPj76Vtv3qKYLCRFw7u3\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/ERC1155.sol\":{\"keccak256\":\"0x94fa6c7eb4eb82a5d8c319e0c921db2b84723826f2682a66e76d88124ce4dd2c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a1bf746d208f8525a3d422ce4b9ec675a9e685d891e599f808260c2baebf3d6\",\"dweb:/ipfs/QmXJ92Kph7PraKQHyPSCLfo4ghsL7JpNpZPnJ4qKuQGrdW\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Lockable.sol\":{\"keccak256\":\"0x2e78f028b44c27371dccf773623bfeede7756324a655db3648fb4345519ac53b\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://d52ee80bc81265ceb539083decfed95120dd22a35bcac286f32ce70e3b14185f\",\"dweb:/ipfs/QmcZFkfwaGtLNtnaLRe2keZjSvZZxQmiuZrjgEQV6L7anq\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Maintenable.sol\":{\"keccak256\":\"0x8aae3185c49caffbd0a4d7da03687606d2727897f636e84a48a45aaa2661f3f6\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://056f697a5d71948d5c38b327c3d1134765326c35b2c234a0f44ddf6f930c306d\",\"dweb:/ipfs/QmY8smKa23H1PmPKn6nqVWfbNNjobp9NQw3Ytz9PT9DDfa\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Mintable.sol\":{\"keccak256\":\"0xdcdf15b73af6083a542c4a7b02b7b74aec11cec44484c73397c5d8c78f66e5c1\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://11ce57bc9349bbef91b423519f74ff7911927802422aae725b15aa4422c6b32d\",\"dweb:/ipfs/QmbSgz3rWHoX3ZuhJx5evWVr4RiRtvk9pmnFcwdDPGQwv6\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Ownable.sol\":{\"keccak256\":\"0xdeb1d1c50cb127875732ce1be720e4d55b770871867c69d70b7e79a8ffe0d20f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63818d1f8880fbda5d71193ee34e25804e2fc466b4ffd998abb42b35fdbcae47\",\"dweb:/ipfs/QmQy44DJzURo25FddWoTq8Bdzwf34V8GBBP8wWtp1f81Yp\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Privatizable.sol\":{\"keccak256\":\"0xaf095614c4ee9f5854c833fd9534143a859727853220e96fbc9e4c0592a22304\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://f26c1e58f0b545f072c727b5c1edbe47fbca3e7533218d35123e9acb7b80bdf0\",\"dweb:/ipfs/QmRZ58wF5uDv2Gp1AtB3xUAqP7ej8ty2gwkmZ4RLRbp9qH\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/Proxyable.sol\":{\"keccak256\":\"0x0486089873ab16e1178eba5e5c0d84be9016be5644197d7f904defada292dcec\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://7428b3706106e816da0f53f131c56d74873b1dd624767aa30c1712b32969d23b\",\"dweb:/ipfs/QmWGemQGeeSHJZZXkz6HZy9ATKarKRyvhCq5FgdkAZYKvD\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/lib/StashBloxData.sol\":{\"keccak256\":\"0xe7fabb615f0aee4015b45827eb88e4d9b41179acbac239e8c7adb44fe009c6f4\",\"license\":\"GPL-3.0-or-later\",\"urls\":[\"bzz-raw://e5df935ffe3a17af3753641cadee312c8a9d9089ce23bc4c6c2de15601573cc9\",\"dweb:/ipfs/QmR3o3miPVJ5HJEid59ysAm5QnBKD4CqRcS1nKncTDfhCN\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x0dc4de30066c07be6906b80d9e520fd774cb390e34214c2267c566f30c192eac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd2eff6112eef024b2c10eca51411b26c58766e172c26efaf49b77b06f1cbe9f\",\"dweb:/ipfs/QmSL8DnsgxrCpGAiqpxz17SVzJTD1tULFBo1iuFfnknv2z\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol\":{\"keccak256\":\"0xcc6d500a21adcca1c123ed1bf04715f8b1fa116d83b9742c3f5729d43a3f7e89\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8154509e193b9dd26c3a6cd3c413f7e2dd376a9d37458e74976e37c77c225422\",\"dweb:/ipfs/QmSUCBLGPGwRg7t9gFMvCWH6A54jSvzvHXBScpmZE5N4uq\"]},\"/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol\":{\"keccak256\":\"0x700249db0ed6aa2be4fc7675c9cdb5cdcc4e49abec52eefa58c2b02092784188\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f4a8babf975072c842269b5cb10aedfed77307629626cc6ab6173e68462eaebb\",\"dweb:/ipfs/QmVSAHYR99a4Q6jrrSqvRxMEnD2dhNAUPLyGA9KGJGTLDL\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001d336200007a565b603260005560408051808201909152601c8082527f687474703a2f2f7374617368626c6f782e636f6d2f746f6b656e732f000000006020909201918252620000689160019162000137565b5062000074336200007a565b620001d3565b6001600160a01b038116620000db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806200522f6026913960400191505060405180910390fd5b600f546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200017a57805160ff1916838001178555620001aa565b82800160010185558215620001aa579182015b82811115620001aa5782518255916020019190600101906200018d565b50620001b8929150620001bc565b5090565b5b80821115620001b85760008155600101620001bd565b61504c80620001e36000396000f3fe6080604052600436106102335760003560e01c8063a22cb4651161012e578063d41d0aa3116100ab578063f2fde38b1161006f578063f2fde38b146110ff578063f340fa0114611132578063f3fef3a314611158578063f8a5a07c14611191578063fc3fcec7146112c85761026a565b8063d41d0aa314610ec4578063d842b67314610efd578063e985e9c514610fb3578063ed70554d14610fee578063f242432a1461106c5761026a565b8063c02f303c116100f2578063c02f303c14610c58578063c255620a14610c8b578063c40b87ae14610cb5578063cba54e6014610e52578063d1660e1814610e855761026a565b8063a22cb46514610b60578063aba7fe8a14610b9b578063b7eb5e0a14610bcb578063baa3411014610bfe578063bba75c8314610c2e5761026a565b8063414ed0ce116101bc5780637627b732116101805780637627b73214610a665780638870147b14610a995780638aeba37e14610acc5780638da5cb5b14610b055780638f96f13114610b365761026a565b8063414ed0ce146106385780634392e577146106ca5780634ab0d2531461072b5780634e1273f4146108ad5780635dafec1b14610a2d5761026a565b80632ed42bf7116102035780632ed42bf7146104ca57806331d5f78c1461055e57806334a90d0214610588578063369c37e9146105bb5780633cacd7d6146105e55761026a565b8062fdd58e1461026f57806301ffc9a7146102ba5780630e89341c146103025780632eb2c2d6146103a15761026a565b3661026a57336000908152600c602052604090206001015461025590346112f8565b336000908152600c6020526040902060010155005b600080fd5b34801561027b57600080fd5b506102a86004803603604081101561029257600080fd5b506001600160a01b03813516906020013561135b565b60408051918252519081900360200190f35b3480156102c657600080fd5b506102ee600480360360208110156102dd57600080fd5b50356001600160e01b0319166113ce565b604080519115158252519081900360200190f35b34801561030e57600080fd5b5061032c6004803603602081101561032557600080fd5b5035611415565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561036657818101518382015260200161034e565b50505050905090810190601f1680156103935780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104c8600480360360a08110156103b757600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156103ea57600080fd5b8201836020820111156103fc57600080fd5b803590602001918460208302840111600160201b8311171561041d57600080fd5b919390929091602081019035600160201b81111561043a57600080fd5b82018360208201111561044c57600080fd5b803590602001918460208302840111600160201b8311171561046d57600080fd5b919390929091602081019035600160201b81111561048a57600080fd5b82018360208201111561049c57600080fd5b803590602001918460018302840111600160201b831117156104bd57600080fd5b5090925090506114b6565b005b3480156104d657600080fd5b506104df61183c565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561052257818101518382015260200161050a565b50505050905090810190601f16801561054f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561056a57600080fd5b506104c86004803603602081101561058157600080fd5b50356118d2565b34801561059457600080fd5b506104c8600480360360208110156105ab57600080fd5b50356001600160a01b0316611ab0565b3480156105c757600080fd5b506104c8600480360360208110156105de57600080fd5b5035611b1d565b3480156105f157600080fd5b506106186004803603602081101561060857600080fd5b50356001600160a01b0316611b69565b604080519315158452911515602084015282820152519081900360600190f35b34801561064457600080fd5b506106626004803603602081101561065b57600080fd5b5035611b8f565b604080519b8c5260208c019a909a528a8a019890985260608a019690965260808901949094526001600160a01b0390921660a0880152151560c0870152151560e086015215156101008501521515610120840152151561014083015251908190036101600190f35b3480156106d657600080fd5b506104c860048036036101408110156106ee57600080fd5b81019080806101400190600a806020026040519081016040528092919082600a60200280828437600092019190915250919450611c029350505050565b34801561073757600080fd5b506104c8600480360361014081101561074f57600080fd5b6040805160608181018352843594602081013594810193909260a08401929091840190600390839083908082843760009201919091525091949392602081019250359050600160201b8111156107a457600080fd5b8201836020820111156107b657600080fd5b803590602001918460208302840111600160201b831117156107d757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561082657600080fd5b82018360208201111561083857600080fd5b803590602001918460208302840111600160201b8311171561085957600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020810135151590604001356001600160a01b0316611c5a565b3480156108b957600080fd5b506109dd600480360360408110156108d057600080fd5b810190602081018135600160201b8111156108ea57600080fd5b8201836020820111156108fc57600080fd5b803590602001918460208302840111600160201b8311171561091d57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561096c57600080fd5b82018360208201111561097e57600080fd5b803590602001918460208302840111600160201b8311171561099f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611d51945050505050565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610a19578181015183820152602001610a01565b505050509050019250505060405180910390f35b348015610a3957600080fd5b506102ee60048036036040811015610a5057600080fd5b50803590602001356001600160a01b0316611ed5565b348015610a7257600080fd5b506104c860048036036020811015610a8957600080fd5b50356001600160a01b0316611ee1565b348015610aa557600080fd5b506104c860048036036020811015610abc57600080fd5b50356001600160a01b0316611f4c565b348015610ad857600080fd5b506104c860048036036040811015610aef57600080fd5b50803590602001356001600160a01b0316611fb4565b348015610b1157600080fd5b50610b1a612032565b604080516001600160a01b039092168252519081900360200190f35b348015610b4257600080fd5b506104c860048036036020811015610b5957600080fd5b5035612041565b348015610b6c57600080fd5b506104c860048036036040811015610b8357600080fd5b506001600160a01b038135169060200135151561227a565b348015610ba757600080fd5b506104c860048036036040811015610bbe57600080fd5b5080359060200135612330565b348015610bd757600080fd5b506104c860048036036020811015610bee57600080fd5b50356001600160a01b0316612395565b348015610c0a57600080fd5b506104c860048036036040811015610c2157600080fd5b50803590602001356123fe565b348015610c3a57600080fd5b506102ee60048036036020811015610c5157600080fd5b503561245e565b348015610c6457600080fd5b506102ee60048036036020811015610c7b57600080fd5b50356001600160a01b0316612469565b348015610c9757600080fd5b506104c860048036036020811015610cae57600080fd5b5035612474565b348015610cc157600080fd5b506104c860048036036101a0811015610cd957600080fd5b60408051606081810183526001600160a01b03853516946020810135949381013593828201359360808301359391830192916101008301919060a0840190600390839083908082843760009201919091525091949392602081019250359050600160201b811115610d4957600080fd5b820183602082011115610d5b57600080fd5b803590602001918460208302840111600160201b83111715610d7c57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b811115610dcb57600080fd5b820183602082011115610ddd57600080fd5b803590602001918460208302840111600160201b83111715610dfe57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550508235935050506020810135151590604001356001600160a01b03166126e5565b348015610e5e57600080fd5b506102ee60048036036020811015610e7557600080fd5b50356001600160a01b0316612792565b348015610e9157600080fd5b506102a860048036036060811015610ea857600080fd5b506001600160a01b03813516906020810135906040013561279d565b348015610ed057600080fd5b506104c860048036036040811015610ee757600080fd5b50803590602001356001600160a01b03166127b2565b6104c8600480360360a0811015610f1357600080fd5b81359160208101359160408201359190810190608081016060820135600160201b811115610f4057600080fd5b820183602082011115610f5257600080fd5b803590602001918460208302840111600160201b83111715610f7357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550509135925061282d915050565b348015610fbf57600080fd5b506102ee60048036036040811015610fd657600080fd5b506001600160a01b0381358116916020013516612ab9565b348015610ffa57600080fd5b506110186004803603602081101561101157600080fd5b5035612afa565b60408051998a5260208a0198909852888801969096526060880194909452608087019290925260a08601526001600160a01b031660c0850152151560e0840152151561010083015251908190036101200190f35b6104c8600480360360a081101561108257600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a081016080820135600160201b8111156110c157600080fd5b8201836020820111156110d357600080fd5b803590602001918460018302840111600160201b831117156110f457600080fd5b509092509050612b56565b34801561110b57600080fd5b506104c86004803603602081101561112257600080fd5b50356001600160a01b0316612d9e565b6104c86004803603602081101561114857600080fd5b50356001600160a01b0316612df1565b34801561116457600080fd5b506104c86004803603604081101561117b57600080fd5b506001600160a01b038135169060200135612e36565b34801561119d57600080fd5b506104c8600480360360608110156111b457600080fd5b81359190810190604081016020820135600160201b8111156111d557600080fd5b8201836020820111156111e757600080fd5b803590602001918460208302840111600160201b8311171561120857600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561125757600080fd5b82018360208201111561126957600080fd5b803590602001918460208302840111600160201b8311171561128a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550612fa5945050505050565b3480156112d457600080fd5b506104c8600480360360408110156112eb57600080fd5b5080359060200135613136565b600082820183811015611352576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b60006001600160a01b0383166113a25760405162461bcd60e51b815260040180806020018281038252602b815260200180614dad602b913960400191505060405180910390fd5b506000908152600d602090815260408083206001600160a01b0394909416835260079093019052205490565b60006001600160e01b031982166301ffc9a760e01b14806113ff57506001600160e01b03198216636cdb3d1360e11b145b1561140c57506001611410565b5060005b919050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815260609361135593919290918301828280156114a35780601f10611478576101008083540402835291602001916114a3565b820191906000526020600020905b81548152906001019060200180831161148657829003601f168201915b50505050506114b1846132fa565b6133b6565b8483146114f45760405162461bcd60e51b815260040180806020018281038252602e815260200180614fb8602e913960400191505060405180910390fd5b6001600160a01b0387166115395760405162461bcd60e51b8152600401808060200182810382526028815260200180614e1e6028913960400191505060405180910390fd5b6001600160a01b03881633148061155b57506115558833612ab9565b15156001145b6115965760405162461bcd60e51b8152600401808060200182810382526037815260200180614f816037913960400191505060405180910390fd5b60008034116115c0576001600160a01b0389166000908152600c60205260409020600101546115c2565b345b905060005b8681101561160c576116008a8a8a8a858181106115e057fe5b905060200201358989868181106115f357fe5b90506020020135866134c0565b909103906001016115c7565b50876001600160a01b0316896001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8a8a8a8a6040518080602001806020018381038352878782818152602001925060200280828437600083820152601f01601f19169091018481038352858152602090810191508690860280828437600083820152604051601f909101601f19169092018290039850909650505050505050a4611762338a8a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020601f8d018190048102820181019092528b815292508b91508a908190840183828082843760009201919091525061352092505050565b6000341180156117725750600081115b1561180d57604051600090339083908381818185875af1925050503d80600081146117b9576040519150601f19603f3d011682016040523d82523d6000602084013e6117be565b606091505b5050905080611807576040805162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015290519081900360640190fd5b50611831565b34611831576001600160a01b0389166000908152600c602052604090206001018190555b505050505050505050565b6000805460018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815293949392918301828280156118c85780601f1061189d576101008083540402835291602001916118c8565b820191906000526020600020905b8154815290600101906020018083116118ab57829003601f168201915b5050505050905082565b6118da614bc4565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b9091041615156101408201526006820180548551818602810186019096528086529194929361016086019392908301828280156119e257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116119c4575b50505091909252505081519192505015801590611a0657508051611a069033613719565b8015611a155750610100810151155b8015611a245750610120810151155b611a75576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420617267756d656e7473206f72207065726d697373696f6e00604482015290519081900360640190fd5b6000828152600e6020526040808220600501805460ff60a81b1916600160a81b179055518391600080516020614dfe83398151915291a25050565b611ab861373d565b611af7576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805461ff001916610100179055565b611b2561373d565b611b64576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b600055565b600c602052600090815260409020805460019091015460ff808316926101009004169083565b600e6020526000908152604090208054600182015460028301546003840154600485015460059095015493949293919290916001600160a01b0381169060ff600160a01b8204811691600160a81b8104821691600160b01b8204811691600160b81b8104821691600160c01b909104168b565b611c0a61373d565b611c49576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b611c56600282600a614c38565b5050565b87611c65813361374e565b611cb0576040805162461bcd60e51b815260206004820152601760248201527624b739bab33334b1b4b2b73a103832b936b4b9b9b4b7b760491b604482015290519081900360640190fd5b6000898152600d6020526040902054611d00576040805162461bcd60e51b815260206004820152600d60248201526c2ab735b737bbb7103a37b5b2b760991b604482015290519081900360640190fd5b611d108989898989898989613788565b6040805189815290518a917f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd919081900360200190a2505050505050505050565b60608151835114611d935760405162461bcd60e51b8152600401808060200182810382526030815260200180614e726030913960400191505060405180910390fd5b6060835167ffffffffffffffff81118015611dad57600080fd5b50604051908082528060200260200182016040528015611dd7578160200160208202803683370190505b50905060005b8451811015611ecd5760006001600160a01b0316858281518110611dfd57fe5b60200260200101516001600160a01b03161415611e4b5760405162461bcd60e51b8152600401808060200182810382526034815260200180614ed86034913960400191505060405180910390fd5b600d6000858381518110611e5b57fe5b602002602001015181526020019081526020016000206007016000868381518110611e8257fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060000154828281518110611eba57fe5b6020908102919091010152600101611ddd565b509392505050565b6000611352838361374e565b611ee961373d565b611f28576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805460ff19166001179055565b611f5461373d565b611f93576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805460ff19169055565b611fbc61373d565b611ffb576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b6000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805460ff19166001179055565b600f546001600160a01b031690565b612049614bc4565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561215157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612133575b505050919092525050815191925050158015906121715750610100810151155b80156121805750610120810151155b80156121c557508051612193903361374e565b806121a5575080516121a59033613719565b806121c557508060a001516001600160a01b0316336001600160a01b0316145b612216576040805162461bcd60e51b815260206004820152601f60248201527f496e76616c696420617267756d656e7473206f72207065726d697373696f6e00604482015290519081900360640190fd5b6000828152600e60209081526040808320600501805460ff60b01b1916600160b01b1790558381015160a08501516001600160a01b03168452600c9092528083206001018054909201909155518391600080516020614dfe83398151915291a25050565b336001600160a01b03831614156122c25760405162461bcd60e51b815260040180806020018281038252602c815260200180614e46602c913960400191505060405180910390fd5b3360008181526010602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b8161233b813361374e565b612386576040805162461bcd60e51b815260206004820152601760248201527624b739bab33334b1b4b2b73a103832b936b4b9b9b4b7b760491b604482015290519081900360640190fd5b612390838361392c565b505050565b61239d61373d565b6123dc576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b6001600160a01b03166000908152600c60205260409020805461ff0019169055565b81612409813361374e565b612454576040805162461bcd60e51b815260206004820152601760248201527624b739bab33334b1b4b2b73a103832b936b4b9b9b4b7b760491b604482015290519081900360640190fd5b6123908383613982565b6000611355826139de565b6000611355826139fd565b61247c614bc4565b6000828152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561258457602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612566575b505050919092525050815191925050158015906125a8575080516125a8903361374e565b80156125c157508060c0015115806125c157508060e001515b80156125d05750610100810151155b80156125df5750610120810151155b801561260657506125fe81600001518260200151836101600151613a27565b816040015110155b6126415760405162461bcd60e51b8152600401808060200182810382526034815260200180614f2d6034913960400191505060405180910390fd5b6000828152600e6020526040808220600501805460ff60b81b1916600160b81b179055518391600080516020614dfe83398151915291a26101608101515115612699576126948282610160015151613ade565b611c56565b6000805482518252600d602052604090912060080154116126d35780516000908152600d6020526040902060080154612694908390613ade565b611c5681600001518260800151613982565b6126ee336139fd565b612739576040805162461bcd60e51b815260206004820152601760248201527624b739bab33334b1b4b2b73a103832b936b4b9b9b4b7b760491b604482015290519081900360640190fd5b61274c8b8b8b8b8b8b8b8b8b8b8b613d7c565b604080518b8152602081018b905281516001600160a01b038e16926000923392600080516020614d8d833981519152929181900390910190a45050505050505050505050565b600061135582613ee5565b60006127aa848484613f08565b949350505050565b6127ba61373d565b6127f9576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b6000918252600d602090815260408084206001600160a01b039093168452600790920190529020600201805460ff19169055565b6000858152600e602052604090205415801561285657506000848152600d602052604090205415155b801561286c5750612868848484613a27565b3410155b801561287b5750600054825111155b6128cc576040805162461bcd60e51b815260206004820152601a60248201527f496e76616c696420617267756d656e7473206f722076616c7565000000000000604482015290519081900360640190fd5b6000848152600d60205260408120600481015490546128f891612710916128f2916140ea565b90614143565b905060405180610180016040528086815260200185815260200134815260200160008152602001838152602001336001600160a01b03168152602001856000148061295e57506000878152600d6020908152604080832033845260070190915290205483115b8061296a575060008551115b151581526000602080830182905260408084018390526060808501849052608080860185905260a09586018a90528c8552600e8452938290208651815586840151600182015591860151600283015585015160038201559184015160048301559183015160058201805460c086015160e08701516101008801516101208901516101408a01511515600160c01b0260ff60c01b19911515600160b81b0260ff60b81b19931515600160b01b0260ff60b01b19951515600160a81b0260ff60a81b19971515600160a01b0260ff60a01b196001600160a01b03909c166001600160a01b0319909a16999099179a909a16979097179590951697909717929092169390931792909216171691909117905561016083015180519192612a9592600685019290910190614c90565b5050604051879150600080516020614dfe83398151915290600090a2505050505050565b6000612ac58383614185565b806113525750506001600160a01b03918216600090815260106020908152604080832093909416825291909152205460ff1690565b600d60205260009081526040902080546001820154600283015460038401546004850154600586015460069096015494959394929391929091906001600160a01b0381169060ff600160a01b8204811691600160a81b90041689565b6001600160a01b038516612b9b5760405162461bcd60e51b8152600401808060200182810382526028815260200180614e1e6028913960400191505060405180910390fd5b6001600160a01b038616331480612bbd5750612bb78633612ab9565b15156001145b612bf85760405162461bcd60e51b8152600401808060200182810382526037815260200180614f816037913960400191505060405180910390fd5b6000803411612c22576001600160a01b0387166000908152600c6020526040902060010154612c24565b345b9050612c3387878787856134c0565b81039050856001600160a01b0316876001600160a01b0316336001600160a01b0316600080516020614d8d8339815191528888604051808381526020018281526020019250505060405180910390a4612cc6338888888888888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061426c92505050565b600034118015612cd65750600081115b15612d7157604051600090339083908381818185875af1925050503d8060008114612d1d576040519150601f19603f3d011682016040523d82523d6000602084013e612d22565b606091505b5050905080612d6b576040805162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b604482015290519081900360640190fd5b50612d95565b34612d95576001600160a01b0387166000908152600c602052604090206001018190555b50505050505050565b612da661373d565b612de5576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b612dee816143e1565b50565b6001600160a01b0381166000908152600c6020526040902060010154612e1790346112f8565b6001600160a01b039091166000908152600c6020526040902060010155565b612e3e61373d565b612e7d576040805162461bcd60e51b81526020600482018190526024820152600080516020614f61833981519152604482015290519081900360640190fd5b6001600160a01b0382166000908152600c6020526040902060010154811115612ee4576040805162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015290519081900360640190fd5b6040516000906001600160a01b0384169083908381818185875af1925050503d8060008114612f2f576040519150601f19603f3d011682016040523d82523d6000602084013e612f34565b606091505b5050905080612f7e576040805162461bcd60e51b815260206004820152601160248201527015da5d1a191c985dd85b0819985a5b1959607a1b604482015290519081900360640190fd5b506001600160a01b039091166000908152600c602052604090206001018054919091039055565b612fae336139fd565b612ff9576040805162461bcd60e51b815260206004820152601760248201527624b739bab33334b1b4b2b73a103832b936b4b9b9b4b7b760491b604482015290519081900360640190fd5b6000838152600d602052604090205415801590613017575080518251145b61305c576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b60005b8251811015613130576130998484838151811061307857fe5b602002602001015184848151811061308c57fe5b6020026020010151614482565b6000848152600d6020526040812060080180549091906130b557fe5b600091825260208220015484516001600160a01b0390911691903390600080516020614d8d833981519152908790869081106130ed57fe5b6020026020010151600d60008a815260200190815260200160002060000154604051808381526020018281526020019250505060405180910390a460010161305f565b50505050565b61313e614bc4565b6000838152600e602090815260409182902082516101808101845281548152600182015481840152600282015481850152600382015460608201526004820154608082015260058201546001600160a01b03811660a083015260ff600160a01b82048116151560c0840152600160a81b82048116151560e0840152600160b01b820481161515610100840152600160b81b820481161515610120840152600160c01b90910416151561014082015260068201805485518186028101860190965280865291949293610160860193929083018282801561324657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613228575b5050509190925250508151919250501580159061326a575061012081015115156001145b80156132795750610140810151155b6132bd576040805162461bcd60e51b815260206004820152601060248201526f496e76616c69642063616c6c6261636b60801b604482015290519081900360640190fd5b6132c78383613ade565b6000838152600e6020526040902060050154600160c01b900460ff1615612390576123908160000151826080015161392c565b60606000825b8015613316576001919091019060109004613300565b60608267ffffffffffffffff8111801561332f57600080fd5b506040519080825280601f01601f19166020018201604052801561335a576020820181803683370190505b50905060005b838110156133ad576010860692506133778361461f565b826001838703038151811061338857fe5b60200101906001600160f81b031916908160001a905350601086049550600101613360565b50949350505050565b805182516060918491849184910167ffffffffffffffff811180156133da57600080fd5b506040519080825280601f01601f191660200182016040528015613405576020820181803683370190505b509050806000805b855181101561345e5785818151811061342257fe5b602001015160f81c60f81b83838060010194508151811061343f57fe5b60200101906001600160f81b031916908160001a90535060010161340d565b5060005b84518110156134b35784818151811061347757fe5b602001015160f81c60f81b83838060010194508151811061349457fe5b60200101906001600160f81b031916908160001a905350600101613462565b5090979650505050505050565b60006134ce86868686614663565b15613509576040805162461bcd60e51b8152602060048201526006602482015265131bd8dad95960d21b604482015290519081900360640190fd5b613516868686868661469b565b9695505050505050565b613532846001600160a01b0316614851565b156137115763bc197c8160e01b6001600160e01b031916846001600160a01b031663bc197c8188888787876040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b03168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156135d25781810151838201526020016135ba565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156136115781810151838201526020016135f9565b50505050905001848103825285818151815260200191508051906020019080838360005b8381101561364d578181015183820152602001613635565b50505050905090810190601f16801561367a5780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15801561369f57600080fd5b505af11580156136b3573d6000803e3d6000fd5b505050506040513d60208110156136c957600080fd5b50516001600160e01b031916146137115760405162461bcd60e51b8152600401808060200182810382526036815260200180614ea26036913960400191505060405180910390fd5b505050505050565b6000918252600d6020526040909120600601546001600160a01b0391821691161490565b600f546001600160a01b0316331490565b6000828152600d602090815260408083206001600160a01b038516845260070190915281206002015460ff1680611352575061135261373d565b6000805b85518110156137b8578581815181106137a157fe5b60200260200101518201915080600101905061378c565b50600086511180156137c8575060015b80156137d5575080612710145b80156137e2575061271084105b613827576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b6000898152600d60209081526040808320600581018c90558a516002808301919091558b840151600383015582518084018452428152928c015183850152600b909101805460018101825590855292909320613887939283020191614ce4565b506000898152600d6020908152604090912087516138ad92600990920191890190614c90565b506000898152600d6020908152604090912086516138d392600a90920191880190614d1e565b50506000978852600d602052604090972060048101929092556006909101805460ff60a01b1916600160a01b92151592909202919091176001600160a01b0319166001600160a01b039096169590951790945550505050565b6000828152600d6020908152604091829020600601805460ff60a81b191690558151838152915184927f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd92908290030190a25050565b6000828152600d6020908152604091829020600601805460ff60a81b1916600160a81b1790558151838152915184927f199acc06cd2556bbc146fa3cb578799037dffcbf256eca32aaf2ef656925d2fd92908290030190a25050565b6000908152600d6020526040902060060154600160a81b900460ff1690565b6001600160a01b0381166000908152600c602052604081205460ff1680611355575061135561373d565b80516000908190613a68576000858152600d60208181526040808420338552600781018352908420549389905291905254613a6191614888565b9050613acb565b60005b8351811015613ac957600d60008781526020019081526020016000206007016000858381518110613a9857fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020549190910190600101613a6b565b505b613ad581856140ea565b95945050505050565b6000828152600e602052604090208054600690910154606090613b11576000828152600d60205260409020600801613b23565b6000848152600e602052604090206006015b805480602002602001604051908101604052809291908181526020018280548015613b7757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311613b59575b505083516000898152600e60205260408120600301549596506000199091019493509150508582018311613bab5782613baf565b8582015b90506000825b828111613cf7576000868281518110613bca57fe5b60209081029190910181015160008a8152600d835260408082206001600160a01b0384168352600701909352919091205490915015613cee576000888152600d602090815260408083206001600160a01b0385168085526007909101808452828520548f8652600e855292852060010154919094529290915293840193613c50916140ea565b6001600160a01b038083166000818152600c6020908152604080832060010180549096019095558e8252600e8152848220600501548d8352600d82528583208484526007018252918590205485518e8152918201528451919093169391923392600080516020614d8d83398151915292918290030190a46000888152600d602090815260408083206001600160a01b03851684526007019091528120555b50600101613bb5565b506000888152600e6020526040902060050154613d1e906001600160a01b031687836148ca565b6000888152600e6020526040902060030182905583821415613d72576000888152600e6020526040808220600501805460ff60c01b1916600160c01b179055518991600080516020614dfe83398151915291a25b5050505050505050565b60008a8152600d6020526040902054158015613d985750600089115b613ddd576040805162461bcd60e51b8152602060048201526011602482015270496e76616c696420617267756d656e747360781b604482015290519081900360640190fd5b88600d60008c81526020019081526020016000206000018190555087600d60008c8152602001908152602001600020600101819055506001600d60008c81526020019081526020016000206007016000336001600160a01b03166001600160a01b0316815260200190815260200160002060020160006101000a81548160ff0219169083151502179055506001600d60008c815260200190815260200160002060070160008d6001600160a01b03166001600160a01b0316815260200190815260200160002060020160026101000a81548160ff021916908315150217905550613ecd8a88888888888888613788565b613ed88b8b8b6148ca565b5050505050505050505050565b6001600160a01b03166000908152600c6020526040902054610100900460ff1690565b6000828152600d60205260408120600b015481904290600019015b6000868152600d60205260408120600b01805483908110613f4057fe5b60009182526020822060029091020101546000888152600d60205260408120600b018054929350909184908110613f7357fe5b9060005260206000209060020201600160028110613f8d57fe5b01546000898152600d602090815260408083206001600160a01b038e16845260070190915281206001015491925090831161402a576000898152600d602090815260408083206001600160a01b038e168452600701909152902060010154613fff9062015180906128f2908890614888565b90508061400a575060015b61401e8861401883856140ea565b906140ea565b86019550505050614069565b61403b620151806128f28786614888565b905080614046575060015b91935083916140598861401883856140ea565b9095019450505060001901613f23565b506000858152600d602052604090206001015461408a908390600a0a614143565b6000868152600d6020526040812060030154919350906140b5906305f5e100906128f29088906140ea565b6000878152600d60205260409020600201549091506140df906140d890836112f8565b84906112f8565b979650505050505050565b6000826140f957506000611355565b8282028284828161410657fe5b04146113525760405162461bcd60e51b8152600401808060200182810382526021815260200180614f0c6021913960400191505060405180910390fd5b600061135283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250614ac8565b6000805b600a811015614262576000600282600a81106141a157fe5b01546001600160a01b03161461425a576000600282600a81106141c057fe5b01546040805163c455279160e01b81526001600160a01b0388811660048301529151928216935090861691839163c4552791916024808301926020929190829003018186803b15801561421257600080fd5b505afa158015614226573d6000803e3d6000fd5b505050506040513d602081101561423c57600080fd5b50516001600160a01b0316141561425857600192505050611355565b505b600101614189565b5060009392505050565b61427e846001600160a01b0316614851565b156137115763f23a6e6160e01b6001600160e01b031916846001600160a01b031663f23a6e6188888787876040518663ffffffff1660e01b815260040180866001600160a01b03168152602001856001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561431f578181015183820152602001614307565b50505050905090810190601f16801561434c5780820380516001836020036101000a031916815260200191505b509650505050505050602060405180830381600087803b15801561436f57600080fd5b505af1158015614383573d6000803e3d6000fd5b505050506040513d602081101561439957600080fd5b50516001600160e01b031916146137115760405162461bcd60e51b8152600401808060200182810382526031815260200180614fe66031913960400191505060405180910390fd5b6001600160a01b0381166144265760405162461bcd60e51b8152600401808060200182810382526026815260200180614dd86026913960400191505060405180910390fd5b600f546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000838152600d60205260408120600801805461239092906144a057fe5b6000918252602080832090910154868352600d8083526040808520805460018201548351606081018552600284015481526003840154818901528c895294909652600b90910180546001600160a01b03909516968a96929592948a94909390840192919061450a57fe5b906000526020600020906002020160016002811061452457fe5b0154905260008a8152600d60209081526040918290206009018054835181840281018401909452808452909183018282801561458957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161456b575b50505060008d8152600d6020908152604091829020600a01805483518184028101840190945280845292945092508301828280156145e657602002820191906000526020600020905b8154815260200190600101908083116145d2575b50505060008e8152600d60205260409020600481015460069091015490925060ff600160a01b82041691506001600160a01b0316613d7c565b600060098260ff161161463957506030810160f81b611410565b8160ff16600a111580156146515750600f8260ff1611155b1561026a57506057810160f81b611410565b600061466e836139de565b8061467d575061467d85613ee5565b8061468c575061468c84613ee5565b80613ad5575050159392505050565b60006146a8868585613f08565b9050808210156146ff576040805162461bcd60e51b815260206004820152601960248201527f496e73756666696369656e742045544820666f72206665657300000000000000604482015290519081900360640190fd5b6040805180820182526014815273496e73756666696369656e742062616c616e636560601b6020808301919091526000878152600d82528381206001600160a01b038b168252600701909152919091205461475b918590614b6a565b6000858152600d602090815260408083206001600160a01b038b16845260070190915290205561478c8585856148ca565b60005b6000858152600d6020526040902060090154811015614847576000858152600d602052604081206009018054839081106147c557fe5b6000918252602080832090910154888352600d90915260408220600a0180546001600160a01b03909216935090849081106147fc57fe5b600091825260209091200154905061481a6127106128f286846140ea565b6001600160a01b039092166000908152600c6020526040902060019081018054909301909255500161478f565b5095945050505050565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47081158015906127aa5750141592915050565b600061135283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614b6a565b6000828152600d602090815260408083206001600160a01b03871684526007019091528120546148fa90836112f8565b6000848152600d602090815260408083206001600160a01b03891684526007019091529020549091506149f7576000838152600d602090815260408083206001600160a01b0388168452600701909152902060020154610100900460ff166149c6576001600160a01b0384166000818152600c6020908152604080832060020180546001818101835591855283852001889055878452600d83529083206008810180549283018155845282842090910180546001600160a01b0319168517905592909152600790910190525b6000838152600d602090815260408083206001600160a01b0388168452600701909152902042600190910155614a98565b6000838152600d602090815260408083206001600160a01b0388168452600701909152812060010154614a2b904290614888565b6000858152600d602090815260408083206001600160a01b038a16845260070190915281205491925090614a659084906128f290856140ea565b6000868152600d602090815260408083206001600160a01b038b1684526007019091529020429190910360019091015550505b6000928352600d602090815260408085206001600160a01b03909616855260079095019052929091209190915550565b60008183614b545760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614b19578181015183820152602001614b01565b50505050905090810190601f168015614b465780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581614b6057fe5b0495945050505050565b60008184841115614bbc5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315614b19578181015183820152602001614b01565b505050900390565b604051806101800160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600015158152602001600015158152602001600015158152602001600015158152602001600015158152602001606081525090565b82600a8101928215614c80579160200282015b82811115614c8057825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614c4b565b50614c8c929150614d58565b5090565b828054828255906000526020600020908101928215614c805791602002820182811115614c8057825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614c4b565b8260028101928215614d12579160200282015b82811115614d12578251825591602001919060010190614cf7565b50614c8c929150614d77565b828054828255906000526020600020908101928215614d125791602002820182811115614d12578251825591602001919060010190614cf7565b5b80821115614c8c5780546001600160a01b0319168155600101614d59565b5b80821115614c8c5760008155600101614d7856fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62455243313135353a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573736ce984c7277c5fe8f47fdf17245300ed19587e3bc1041342d79726b2b2f1dc0b455243313135353a207461726765742061646472657373206d757374206265206e6f6e2d7a65726f455243313135353a2063616e6e6f742073657420617070726f76616c2073746174757320666f722073656c66455243313135353a206163636f756e747320616e6420494473206d75737420686176652073616d65206c656e67746873455243313135353a20676f7420756e6b6e6f776e2076616c75652066726f6d206f6e4552433131353542617463685265636569766564455243313135353a20736f6d65206164647265737320696e2062617463682062616c616e6365207175657279206973207a65726f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77496e73756666696369656e742063616c6c6261636b2c207065726d697373696f6e206f7220657363726f77656420616d6f756e744f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572455243313135353a206e656564206f70657261746f7220617070726f76616c20666f7220337264207061727479207472616e7366657273455243313135353a2049447320616e642076616c756573206d75737420686176652073616d65206c656e67746873455243313135353a20676f7420756e6b6e6f776e2076616c75652066726f6d206f6e455243313135355265636569766564a264697066735822122080dc6f8bebe943b456f83a62e89b800badb8eef21eb96339d83996e989462b6264736f6c634300070100334f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
  "deployedBytecode": "",
  "immutableReferences": {},
  "sourceMap": "243:1572:0:-:0;;;441:174;;;;;;;;;-1:-1:-1;639:30:12;658:10;639:18;:30::i;:::-;508:2:0;466:7;:44;520:48;;;;;;;;;;;;;;;;;;;;;;;:15;;:48;:::i;:::-;-1:-1:-1;578:30:0;597:10;578:18;:30::i;:::-;243:1572;;1396:225:12;-1:-1:-1;;;;;1469:22:12;;1461:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:6;;1549:38;;-1:-1:-1;;;;;1549:38:12;;;;1570:6;;1549:38;;1570:6;;1549:38;1597:6;:17;;-1:-1:-1;;;;;;1597:17:12;-1:-1:-1;;;;;1597:17:12;;;;;;;;;;1396:225::o;243:1572:0:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;243:1572:0;;;-1:-1:-1;243:1572:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "243:1572:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1551:10;1544:18;;;;:6;:18;;;;;:29;;;:44;;1578:9;1544:33;:44::i;:::-;1519:10;1512:18;;;;:6;:18;;;;;:29;;:76;243:1572;;;;;1748:234:8;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;1748:234:8;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;1153:255;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1153:255:8;-1:-1:-1;;;;;;1153:255:8;;:::i;:::-;;;;;;;;;;;;;;;;;;1669:141:0;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1669:141:0;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6363:1231:8;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6363:1231:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6363:1231:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6363:1231:8;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6363:1231:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6363:1231:8;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6363:1231:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6363:1231:8;;;;;;;;;;-1:-1:-1;6363:1231:8;;-1:-1:-1;6363:1231:8;-1:-1:-1;6363:1231:8;:::i;:::-;;1699:22:15;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2930:453:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2930:453:6;;:::i;1649:99:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1649:99:9;-1:-1:-1;;;;;1649:99:9;;:::i;409:144:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;409:144:6;;:::i;1727:39:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1727:39:15;-1:-1:-1;;;;;1727:39:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:47;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1819:47:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1819:47:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;416:151:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;416:151:14;;-1:-1:-1;416:151:14;;-1:-1:-1;;;;416:151:14:i;1702:823:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1702:823:10;;;;;;;;-1:-1:-1;1702:823:10;;-1:-1:-1;;;;1702:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1702:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1702:823:10;;;;;;;;-1:-1:-1;1702:823:10;;-1:-1:-1;;;;;1702:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1702:823:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1702:823:10;;-1:-1:-1;;1702:823:10;;;-1:-1:-1;;;1702:823:10;;;;;;;;;;-1:-1:-1;;;;;1702:823:10;;:::i;2306:631:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2306:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2306:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2306:631:8;;;;;;;;-1:-1:-1;2306:631:8;;-1:-1:-1;;;;;2306:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2306:631:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2306:631:8;;-1:-1:-1;2306:631:8;;-1:-1:-1;;;;;2306:631:8:i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1424:132:10;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1424:132:10;;;;;;-1:-1:-1;;;;;1424:132:10;;:::i;696:119:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;696:119:11;-1:-1:-1;;;;;696:119:11;;:::i;952:117::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;952:117:11;-1:-1:-1;;;;;952:117:11;;:::i;743:144:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;743:144:10;;;;;;-1:-1:-1;;;;;743:144:10;;:::i;752:86:12:-;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;752:86:12;;;;;;;;;;;;;;2198:630:6;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2198:630:6;;:::i;3415:296:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3415:296:8;;;;;;;;;;:::i;1209:129:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1209:129:9;;;;;;;:::i;1854:102::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1854:102:9;-1:-1:-1;;;;;1854:102:9;;:::i;992:125::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;992:125:9;;;;;;;:::i;1442:105::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1442:105:9;;:::i;1215:116:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1215:116:11;-1:-1:-1;;;;;1215:116:11;;:::i;3484:1066:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3484:1066:6;;:::i;5506:1038:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5506:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5506:1038:11;;;;;;;;-1:-1:-1;5506:1038:11;;-1:-1:-1;;;;5506:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5506:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5506:1038:11;;;;;;;;-1:-1:-1;5506:1038:11;;-1:-1:-1;;;;;5506:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5506:1038:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5506:1038:11;;-1:-1:-1;;5506:1038:11;;;-1:-1:-1;;;5506:1038:11;;;;;;;;;;-1:-1:-1;;;;;5506:1038:11;;:::i;2073:113:9:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2073:113:9;-1:-1:-1;;;;;2073:113:9;;:::i;3760:159:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3760:159:7;;;;;;;;;;;;;:::i;1056:142:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1056:142:10;;;;;;-1:-1:-1;;;;;1056:142:10;;:::i;903:1166:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;903:1166:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;903:1166:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;903:1166:6;;-1:-1:-1;;903:1166:6;;;-1:-1:-1;903:1166:6;;-1:-1:-1;;903:1166:6:i;3992:203:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;3992:203:8;;;;;;;;;;:::i;1772:41:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1772:41:15;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1772:41:15;;;;;;;;;;;;;;;;;;;;;;;;;;4749:1025:8;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4749:1025:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4749:1025:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4749:1025:8;;;;;;;;;;-1:-1:-1;4749:1025:8;;-1:-1:-1;4749:1025:8;-1:-1:-1;4749:1025:8;:::i;1179:116:12:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1179:116:12;-1:-1:-1;;;;;1179:116:12;;:::i;1197:123:0:-;;;;;;;;;;;;;;;;-1:-1:-1;1197:123:0;-1:-1:-1;;;;;1197:123:0;;:::i;767:289::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;767:289:0;;;;;;;;:::i;6771:645:11:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6771:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6771:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6771:645:11;;;;;;;;-1:-1:-1;6771:645:11;;-1:-1:-1;;;;;6771:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6771:645:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6771:645:11;;-1:-1:-1;6771:645:11;;-1:-1:-1;;;;;6771:645:11:i;4774:464:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4774:464:6;;;;;;;:::i;867:176:17:-;925:7;956:5;;;979:6;;;;971:46;;;;;-1:-1:-1;;;971:46:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;1035:1;-1:-1:-1;867:176:17;;;;;:::o;1748:234:8:-;1826:7;-1:-1:-1;;;;;1853:21:8;;1845:77;;;;-1:-1:-1;;;1845:77:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1939:11:8;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1939:28:8;;;;;;:19;;;;:28;;;:36;;1748:234::o;1153:255::-;1233:4;-1:-1:-1;;;;;;1251:42:8;;-1:-1:-1;;;1251:42:8;;:99;;-1:-1:-1;;;;;;;1307:43:8;;-1:-1:-1;;;1307:43:8;1251:99;1247:135;;;-1:-1:-1;1369:4:8;1362:11;;1247:135;-1:-1:-1;1396:5:8;1153:255;;;;:::o;1669:141:0:-;1769:15;1758:45;;;;;;;;;;;;;-1:-1:-1;;1758:45:0;;;;;;;;;;;;;;;;;;;;;;;;;;1726:13;;1758:45;;;;1769:15;;1758:45;;1769:15;1758:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1786:16;1799:2;1786:12;:16::i;:::-;1758:10;:45::i;6363:1231:8:-;6594:27;;;6586:86;;;;-1:-1:-1;;;6586:86:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6690:16:8;;6682:69;;;;-1:-1:-1;;;6682:69:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6782:18:8;;6790:10;6782:18;;:64;;;6804:34;6821:4;6827:10;6804:16;:34::i;:::-;:42;;6842:4;6804:42;6782:64;6761:166;;;;-1:-1:-1;;;6761:166:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6938:19;6972:1;6960:9;:13;:51;;-1:-1:-1;;;;;6988:12:8;;;;;;:6;:12;;;;;:23;;;6960:51;;;6976:9;6960:51;6938:73;;7026:9;7021:147;7041:14;;;7021:147;;;7104:53;7116:4;7122:2;7126:3;;7130:1;7126:6;;;;;;;;;;;;;7134;;7141:1;7134:9;;;;;;;;;;;;;7145:11;7104;:53::i;:::-;7090:67;;;;7057:3;;7021:147;;;;7215:2;-1:-1:-1;;;;;7183:48:8;7209:4;-1:-1:-1;;;;;7183:48:8;7197:10;-1:-1:-1;;;;;7183:48:8;;7219:3;;7224:6;;7183:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7183:48:8;;;;;;;;;;;;;;;;;-1:-1:-1;7183:48:8;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7183:48:8;;;;;;;;-1:-1:-1;7183:48:8;;-1:-1:-1;;;;;;;7183:48:8;7242:76;7278:10;7290:4;7296:2;7300:3;;7242:76;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7242:76:8;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7305:6:8;;-1:-1:-1;7305:6:8;;;;7242:76;;;7305:6;;7242:76;7305:6;7242:76;;;;;;;;;-1:-1:-1;;7242:76:8;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7313:4:8;;-1:-1:-1;7313:4:8;;;;7242:76;;7313:4;;;;7242:76;;;;;;;;;-1:-1:-1;7242:35:8;;-1:-1:-1;;;7242:76:8:i;:::-;7345:1;7333:9;:13;:32;;;;;7364:1;7350:11;:15;7333:32;7329:259;;;7400:39;;7382:12;;7400:10;;7423:11;;7382:12;7400:39;7382:12;7400:39;7423:11;7400:10;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7381:58;;;7461:7;7453:36;;;;;-1:-1:-1;;;7453:36:8;;;;;;;;;;;;-1:-1:-1;;;7453:36:8;;;;;;;;;;;;;;;7329:259;;;;7510:9;7506:82;;-1:-1:-1;;;;;7540:12:8;;;;;;:6;:12;;;;;:23;;:37;;;7506:82;6363:1231;;;;;;;;;:::o;1699:22:15:-;;;;;;;;;;;;;;;;;;-1:-1:-1;;1699:22:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2930:453:6:-;2994:24;;:::i;:::-;3021:22;;;;:10;:22;;;;;;;;;2994:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2994:49:6;;;;;;;-1:-1:-1;;;2994:49:6;;;;;;;;;;-1:-1:-1;;;2994:49:6;;;;;;;;;;-1:-1:-1;;;2994:49:6;;;;;;;;;;-1:-1:-1;;;2994:49:6;;;;;;;;;;-1:-1:-1;;;2994:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3021:22;;2994:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2994:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;2994:49:6;;;;-1:-1:-1;;3062:16:6;;2994:49;;-1:-1:-1;;3062:21:6;;;;:88;;-1:-1:-1;3121:16:6;;3103:47;;3139:10;3103:17;:47::i;:::-;3062:133;;;;-1:-1:-1;3170:16:6;;;;:25;3062:133;:179;;;;-1:-1:-1;3215:17:6;;;;:26;3062:179;3054:223;;;;;-1:-1:-1;;;3054:223:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;3288:22;;;;:10;:22;;;;;;:38;;:45;;-1:-1:-1;;;;3288:45:6;-1:-1:-1;;;3288:45:6;;;3349:27;3299:10;;-1:-1:-1;;;;;;;;;;;3349:27:6;;2930:453;;:::o;1649:99:9:-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;1713:12:9::1;;::::0;;;:6:::1;:12;::::0;;;;:28;;-1:-1:-1;;1713:28:9::1;;;::::0;;1649:99::o;409:144:6:-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;498:7:6::1;:48:::0;409:144::o;1727:39:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1819:47::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1819:47:15;;;;-1:-1:-1;;;1819:47:15;;;;;-1:-1:-1;;;1819:47:15;;;;;-1:-1:-1;;;1819:47:15;;;;;-1:-1:-1;;;1819:47:15;;;;;-1:-1:-1;;;1819:47:15;;;;;:::o;416:151:14:-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;513:47:14::1;:30;546:14:::0;513:47:::1;;:::i;:::-;;416:151:::0;:::o;1702:823:10:-;2137:2;534:28;547:2;551:10;534:12;:28::i;:::-;526:64;;;;;-1:-1:-1;;;526:64:10;;;;;;;;;;;;-1:-1:-1;;;526:64:10;;;;;;;;;;;;;;;2180:1:::1;2159:11:::0;;;:7:::1;:11;::::0;;;;:18;2151:48:::1;;;::::0;;-1:-1:-1;;;2151:48:10;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;2151:48:10;;;;;;;;;;;;;::::1;;2210:262;2220:2;2242:12;2274:15;2309:14;2343:24;2387:21;2428:9;2457:14;2210:9;:262::i;:::-;2488:30;::::0;;;;;;;2501:2;;2488:30:::1;::::0;;;;;::::1;::::0;;::::1;1702:823:::0;;;;;;;;;:::o;2306:631:8:-;2455:16;2514:3;:10;2495:8;:15;:29;2487:90;;;;-1:-1:-1;;;2487:90:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2588:30;2635:8;:15;2621:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2621:30:8;;2588:63;;2667:9;2662:238;2686:8;:15;2682:1;:19;2662:238;;;2753:1;-1:-1:-1;;;;;2730:25:8;:8;2739:1;2730:11;;;;;;;;;;;;;;-1:-1:-1;;;;;2730:25:8;;;2722:90;;;;-1:-1:-1;;;2722:90:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2845:7;:15;2853:3;2857:1;2853:6;;;;;;;;;;;;;;2845:15;;;;;;;;;;;:23;;:36;2869:8;2878:1;2869:11;;;;;;;;;;;;;;-1:-1:-1;;;;;2845:36:8;-1:-1:-1;;;;;2845:36:8;;;;;;;;;;;;:44;;;2826:13;2840:1;2826:16;;;;;;;;;;;;;;;;;:63;2703:3;;2662:238;;;-1:-1:-1;2917:13:8;2306:631;-1:-1:-1;;;2306:631:8:o;1424:132:10:-;1499:4;1522:27;1535:2;1539:9;1522:12;:27::i;696:119:11:-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;772:17:11::1;;::::0;;;:6:::1;:17;::::0;;;;:36;;-1:-1:-1;;772:36:11::1;804:4;772:36;::::0;;696:119::o;952:117::-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;1025:17:11::1;1057:5;1025:17:::0;;;:6:::1;:17;::::0;;;;:37;;-1:-1:-1;;1025:37:11::1;::::0;;952:117::o;743:144:10:-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;831:11:10::1;::::0;;;:7:::1;:11;::::0;;;;;;;-1:-1:-1;;;;;831:30:10;;::::1;::::0;;:19:::1;::::0;;::::1;:30:::0;;;;:42:::1;;:49:::0;;-1:-1:-1;;831:49:10::1;876:4;831:49;::::0;;743:144::o;752:86:12:-;825:6;;-1:-1:-1;;;;;825:6:12;752:86;:::o;2198:630:6:-;2261:24;;:::i;:::-;2288:22;;;;:10;:22;;;;;;;;;2261:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2261:49:6;;;;;;;-1:-1:-1;;;2261:49:6;;;;;;;;;;-1:-1:-1;;;2261:49:6;;;;;;;;;;-1:-1:-1;;;2261:49:6;;;;;;;;;;-1:-1:-1;;;2261:49:6;;;;;;;;;;-1:-1:-1;;;2261:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2288:22;;2261:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2261:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;2261:49:6;;;;-1:-1:-1;;2329:16:6;;2261:49;;-1:-1:-1;;2329:21:6;;;;:66;;-1:-1:-1;2370:16:6;;;;:25;2329:66;:112;;;;-1:-1:-1;2415:17:6;;;;:26;2329:112;:294;;;;-1:-1:-1;2475:16:6;;2462:42;;2493:10;2462:12;:42::i;:::-;:110;;;-1:-1:-1;2543:16:6;;2525:47;;2561:10;2525:17;:47::i;:::-;2462:160;;;;2607:8;:15;;;-1:-1:-1;;;;;2593:29:6;:10;-1:-1:-1;;;;;2593:29:6;;2462:160;2321:338;;;;;-1:-1:-1;;;2321:338:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;2670:22;;;;:10;:22;;;;;;;;:30;;:37;;-1:-1:-1;;;;2670:37:6;-1:-1:-1;;;2670:37:6;;;2755:23;;;;2724:15;;;;-1:-1:-1;;;;;2717:23:6;;;:6;:23;;;;;;2703:4;2717:34;:61;;;;;;;;2794:27;2681:10;;-1:-1:-1;;;;;;;;;;;2794:27:6;;2198:630;;:::o;3415:296:8:-;3511:10;-1:-1:-1;;;;;3511:22:8;;;;3503:79;;;;-1:-1:-1;;;3503:79:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3611:10;3592:30;;;;:18;:30;;;;;;;;-1:-1:-1;;;;;3592:40:8;;;;;;;;;;;;:51;;-1:-1:-1;;3592:51:8;;;;;;;;;;3658:46;;;;;;;3592:40;;3611:10;3658:46;;;;;;;;;;;3415:296;;:::o;1209:129:9:-;1287:2;534:28:10;547:2;551:10;534:12;:28::i;:::-;526:64;;;;;-1:-1:-1;;;526:64:10;;;;;;;;;;;;-1:-1:-1;;;526:64:10;;;;;;;;;;;;;;;1301:30:9::1;1314:2;1318:12;1301;:30::i;:::-;1209:129:::0;;;:::o;1854:102::-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;1920:12:9::1;1944:5;1920:12:::0;;;:6:::1;:12;::::0;;;;:29;;-1:-1:-1;;1920:29:9::1;::::0;;1854:102::o;992:125::-;1068:2;534:28:10;547:2;551:10;534:12;:28::i;:::-;526:64;;;;;-1:-1:-1;;;526:64:10;;;;;;;;;;;;-1:-1:-1;;;526:64:10;;;;;;;;;;;;;;;1082:28:9::1;1093:2;1097:12;1082:10;:28::i;1442:105::-:0;1500:4;1522:18;1537:2;1522:14;:18::i;1215:116:11:-;1278:4;1301:23;1314:9;1301:12;:23::i;3484:1066:6:-;3547:24;;:::i;:::-;3574:22;;;;:10;:22;;;;;;;;;3547:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3547:49:6;;;;;;;-1:-1:-1;;;3547:49:6;;;;;;;;;;-1:-1:-1;;;3547:49:6;;;;;;;;;;-1:-1:-1;;;3547:49:6;;;;;;;;;;-1:-1:-1;;;3547:49:6;;;;;;;;;;-1:-1:-1;;;3547:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3574:22;;3547:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3547:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;3547:49:6;;;;-1:-1:-1;;3615:16:6;;3547:49;;-1:-1:-1;;3615:21:6;;;;:83;;-1:-1:-1;3669:16:6;;3656:42;;3687:10;3656:12;:42::i;:::-;3615:160;;;;;3720:8;:26;;;3719:27;:55;;;;3750:8;:24;;;3719:55;3615:205;;;;-1:-1:-1;3795:16:6;;;;:25;3615:205;:251;;;;-1:-1:-1;3840:17:6;;;;:26;3615:251;:364;;;;;3913:66;3928:8;:16;;;3946:8;:14;;;3962:8;:16;;;3913:14;:66::i;:::-;3886:8;:23;;;:93;;3615:364;3607:445;;;;-1:-1:-1;;;3607:445:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4063:22;;;;:10;:22;;;;;;:31;;:38;;-1:-1:-1;;;;4063:38:6;-1:-1:-1;;;4063:38:6;;;4117:27;4074:10;;-1:-1:-1;;;;;;;;;;;4117:27:6;;4159:16;;;;:23;:27;4155:389;;4202:53;4219:10;4231:8;:16;;;:23;4202:16;:53::i;:::-;4155:389;;;4323:7;:39;;4284:16;;4276:25;;:7;:25;;;;;;:36;;:43;:86;4272:272;;4415:16;;4407:25;;;;:7;:25;;;;;:36;;:43;4378:73;;4395:10;;4378:16;:73::i;4272:272::-;4482:51;4493:8;:16;;;4511:8;:21;;;4482:10;:51::i;5506:1038:11:-;493:24;506:10;493:12;:24::i;:::-;485:60;;;;;-1:-1:-1;;;485:60:11;;;;;;;;;;;;-1:-1:-1;;;485:60:11;;;;;;;;;;;;;;;6083:378:::1;6096:9;6128:2;6153:6;6182:8;6213:12;6248:15;6286:14;6323:24;6370:21;6414:9;6446:14;6083:12;:378::i;:::-;6476:61;::::0;;;;;::::1;::::0;::::1;::::0;;;;;-1:-1:-1;;;;;6476:61:11;::::1;::::0;6511:1:::1;::::0;6491:10:::1;::::0;-1:-1:-1;;;;;;;;;;;6476:61:11;;;;;;;;;::::1;5506:1038:::0;;;;;;;;;;;:::o;2073:113:9:-;2135:4;2157:22;2174:4;2157:16;:22::i;3760:159:7:-;3850:7;3876:36;3893:7;3902:2;3906:5;3876:16;:36::i;:::-;3869:43;3760:159;-1:-1:-1;;;;3760:159:7:o;1056:142:10:-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;1186:5:10::1;1141:11:::0;;;:7:::1;:11;::::0;;;;;;;-1:-1:-1;;;;;1141:30:10;;::::1;::::0;;:19:::1;::::0;;::::1;:30:::0;;;;:42:::1;;:50:::0;;-1:-1:-1;;1141:50:10::1;::::0;;1056:142::o;903:1166:6:-;1063:22;;;;:10;:22;;;;;:30;:35;:66;;;;-1:-1:-1;1128:1:6;1102:16;;;:7;:16;;;;;:23;:27;;1063:66;:138;;;;;1162:39;1177:7;1186:5;1193:7;1162:14;:39::i;:::-;1149:9;:52;;1063:138;:215;;;;-1:-1:-1;1239:7:6;:39;1221:14;;:57;;1063:215;1055:254;;;;;-1:-1:-1;;;1055:254:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;1320:18;1370:16;;;:7;:16;;;;;:38;;;;1342:23;;1341:80;;1415:5;;1342:67;;:27;:67::i;:::-;1341:73;;:80::i;:::-;1320:101;;1457:562;;;;;;;;1489:7;1457:562;;;;1579:5;1457:562;;;;1614:9;1457:562;;;;1937:1;1457:562;;;;1996:12;1457:562;;;;1518:10;-1:-1:-1;;;;;1457:562:6;;;;;1657:5;1666:1;1657:10;1656:106;;;-1:-1:-1;1704:16:6;;;;:7;:16;;;;;;;;1729:10;1704:36;;:24;;:36;;;;;:44;:57;-1:-1:-1;1656:106:6;:161;;;;1815:1;1798:7;:14;:18;1656:161;1457:562;;;;1848:5;1457:562;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1432:22;;;:10;:22;;;;;;:587;;;;;;;;1457:562;1432:587;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1432:587:6;-1:-1:-1;;;;1432:587:6;;;-1:-1:-1;;;1432:587:6;-1:-1:-1;;;;1432:587:6;;;-1:-1:-1;;;1432:587:6;-1:-1:-1;;;;1432:587:6;;;-1:-1:-1;;;1432:587:6;-1:-1:-1;;;;1432:587:6;;;-1:-1:-1;;;1432:587:6;-1:-1:-1;;;;;;;;;1432:587:6;;;-1:-1:-1;;;;;;1432:587:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:22;;:587;;;;;;;;;;;:::i;:::-;-1:-1:-1;;2035:27:6;;2051:10;;-1:-1:-1;;;;;;;;;;;;2035:27:6;;;;903:1166;;;;;;:::o;3992:203:8:-;4083:4;4106:41;4129:7;4138:8;4106:22;:41::i;:::-;:82;;;-1:-1:-1;;;;;;;4151:27:8;;;;;;;:18;:27;;;;;;;;:37;;;;;;;;;;;;;;;3992:203::o;1772:41:15:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1772:41:15;;;;-1:-1:-1;;;1772:41:15;;;;;-1:-1:-1;;;1772:41:15;;;;:::o;4749:1025:8:-;-1:-1:-1;;;;;4951:16:8;;4943:69;;;;-1:-1:-1;;;4943:69:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5043:18:8;;5051:10;5043:18;;:64;;;5065:34;5082:4;5088:10;5065:16;:34::i;:::-;:42;;5103:4;5065:42;5043:64;5022:166;;;;-1:-1:-1;;;5022:166:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5199:19;5233:1;5221:9;:13;:51;;-1:-1:-1;;;;;5249:12:8;;;;;;:6;:12;;;;;:23;;;5221:51;;;5237:9;5221:51;5199:73;;5310:45;5322:4;5328:2;5332;5336:5;5343:11;5310;:45::i;:::-;5296:11;:59;5282:73;;5404:2;-1:-1:-1;;;;;5371:47:8;5398:4;-1:-1:-1;;;;;5371:47:8;5386:10;-1:-1:-1;;;;;5371:47:8;-1:-1:-1;;;;;;;;;;;5408:2:8;5412:5;5371:47;;;;;;;;;;;;;;;;;;;;;;;;5429:69;5460:10;5472:4;5478:2;5482;5486:5;5493:4;;5429:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5429:30:8;;-1:-1:-1;;;5429:69:8:i;:::-;5525:1;5513:9;:13;:32;;;;;5544:1;5530:11;:15;5513:32;5509:259;;;5580:39;;5562:12;;5580:10;;5603:11;;5562:12;5580:39;5562:12;5580:39;5603:11;5580:10;:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5561:58;;;5641:7;5633:36;;;;;-1:-1:-1;;;5633:36:8;;;;;;;;;;;;-1:-1:-1;;;5633:36:8;;;;;;;;;;;;;;;5509:259;;;;5690:9;5686:82;;-1:-1:-1;;;;;5720:12:8;;;;;;:6;:12;;;;;:23;;:37;;;5686:82;4749:1025;;;;;;;:::o;1179:116:12:-;965:10;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;1260:28:::1;1279:8;1260:18;:28::i;:::-;1179:116:::0;:::o;1197:123:0:-;-1:-1:-1;;;;;1277:10:0;;;;;;:6;:10;;;;;:21;;;:36;;1303:9;1277:25;:36::i;:::-;-1:-1:-1;;;;;1253:10:0;;;;;;;:6;:10;;;;;:21;;:60;1197:123::o;767:289::-;965:10:12;:8;:10::i;:::-;957:55;;;;;-1:-1:-1;;;957:55:12;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;957:55:12;;;;;;;;;;;;;;;-1:-1:-1;;;;;850:10:0;::::1;;::::0;;;:6:::1;:10;::::0;;;;:21:::1;;::::0;:31;-1:-1:-1;850:31:0::1;842:64;;;::::0;;-1:-1:-1;;;842:64:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;842:64:0;;;;;;;;;;;;;::::1;;935:26;::::0;917:12:::1;::::0;-1:-1:-1;;;;;935:7:0;::::1;::::0;950:6;;917:12;935:26;917:12;935:26;950:6;935:7;:26:::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;916:45;;;979:7;971:37;;;::::0;;-1:-1:-1;;;971:37:0;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;971:37:0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;;1018:10:0;;::::1;;::::0;;;:6:::1;:10;::::0;;;;:21:::1;;:31:::0;;;;;::::1;::::0;;767:289::o;6771:645:11:-;493:24;506:10;493:12;:24::i;:::-;485:60;;;;;-1:-1:-1;;;485:60:11;;;;;;;;;;;;-1:-1:-1;;;485:60:11;;;;;;;;;;;;;;;6972:1:::1;6951:11:::0;;;:7:::1;:11;::::0;;;;:18;:22;;;;:77:::1;;;7007:14;:21;6993:3;:10;:35;6951:77;6943:107;;;::::0;;-1:-1:-1;;;6943:107:11;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;6943:107:11;;;;;;;;;;;;;::::1;;7066:9;7061:349;7085:3;:10;7081:1;:14;7061:349;;;7116:42;7128:2;7132:3;7136:1;7132:6;;;;;;;;;;;;;;7140:14;7155:1;7140:17;;;;;;;;;;;;;;7116:11;:42::i;:::-;7281:11;::::0;;;:7:::1;:11;::::0;;;;:22:::1;;:25:::0;;:22;;:11;:25:::1;;;;;::::0;;;::::1;::::0;;::::1;::::0;7340:6;;-1:-1:-1;;;;;7281:25:11;;::::1;::::0;;7193:10:::1;::::0;-1:-1:-1;;;;;;;;;;;7178:221:11;7340:3;;7344:1;;7340:6;::::1;;;;;;;;;;;7380:7;:11;7388:2;7380:11;;;;;;;;;;;:18;;;7178:221;;;;;;;;;;;;;;;;;;;;;;;;7097:3;;7061:349;;;;6771:645:::0;;;:::o;4774:464:6:-;4855:24;;:::i;:::-;4882:22;;;;:10;:22;;;;;;;;;4855:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4855:49:6;;;;;;;-1:-1:-1;;;4855:49:6;;;;;;;;;;-1:-1:-1;;;4855:49:6;;;;;;;;;;-1:-1:-1;;;4855:49:6;;;;;;;;;;-1:-1:-1;;;4855:49:6;;;;;;;;;;-1:-1:-1;;;4855:49:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4882:22;;4855:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4855:49:6;;;;;;;;;;;;;;;;-1:-1:-1;;;4855:49:6;;;;-1:-1:-1;;4923:16:6;;4855:49;;-1:-1:-1;;4923:21:6;;;;:66;;-1:-1:-1;4964:17:6;;;;:25;;4985:4;4964:25;4923:66;:113;;;;-1:-1:-1;5009:18:6;;;;:27;4923:113;4915:142;;;;;-1:-1:-1;;;4915:142:6;;;;;;;;;;;;-1:-1:-1;;;4915:142:6;;;;;;;;;;;;;;;5068:37;5085:10;5097:7;5068:16;:37::i;:::-;5120:22;;;;:10;:22;;;;;:32;;;-1:-1:-1;;;5120:32:6;;;;5116:116;;;5168:53;5181:8;:16;;;5199:8;:21;;;5168:12;:53::i;933:419:18:-;986:13;1011:10;1044:1;1055:68;1062:6;;1055:68;;1084:7;;;;;;1110:2;1105:7;;1055:68;;;1132:16;1161:5;1151:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1151:16:18;;1132:35;;1182:6;1177:141;1194:5;1192:1;:7;1177:141;;;1228:2;1224:1;:6;1220:10;;1265:21;1283:1;1265:11;:21::i;:::-;1244:3;1260:1;1256;1248:5;:9;:13;1244:18;;;;;;;;;;;:42;-1:-1:-1;;;;;1244:42:18;;;;;;;;-1:-1:-1;1305:2:18;1300:7;;;-1:-1:-1;1201:3:18;;1177:141;;;-1:-1:-1;1341:3:18;933:419;-1:-1:-1;;;;933:419:18:o;86:515::-;305:10;;292;;163:13;;213:1;;250;;163:13;;292:23;281:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;281:35:18;-1:-1:-1;262:54:18;-1:-1:-1;262:54:18;365:6;;405:76;421:3;:10;417:1;:14;405:76;;;464:3;468:1;464:6;;;;;;;;;;;;;;;;452:4;457:3;;;;;;452:9;;;;;;;;;;;:18;-1:-1:-1;;;;;452:18:18;;;;;;;;-1:-1:-1;433:3:18;;405:76;;;-1:-1:-1;499:1:18;490:76;506:3;:10;502:1;:14;490:76;;;549:3;553:1;549:6;;;;;;;;;;;;;;;;537:4;542:3;;;;;;537:9;;;;;;;;;;;:18;-1:-1:-1;;;;;537:18:18;;;;;;;;-1:-1:-1;518:3:18;;490:76;;;-1:-1:-1;589:4:18;;86:515;-1:-1:-1;;;;;;;86:515:18:o;2194:275:9:-;2316:12;2349:34;2363:4;2369:2;2373;2377:5;2349:13;:34::i;:::-;2348:35;2340:54;;;;;-1:-1:-1;;;2340:54:9;;;;;;;;;;;;-1:-1:-1;;;2340:54:9;;;;;;;;;;;;;;;2411:51;2429:4;2435:2;2439;2443:5;2450:11;2411:17;:51::i;:::-;2404:58;2194:275;-1:-1:-1;;;;;;2194:275:9:o;8122:558:8:-;8365:15;:2;-1:-1:-1;;;;;8365:13:8;;:15::i;:::-;8362:312;;;8523:52;;;-1:-1:-1;;;;;8421:154:8;;8438:2;-1:-1:-1;;;;;8421:43:8;;8465:8;8475:4;8481:3;8486:6;8494:4;8421:78;;;;;;;;;;;;;-1:-1:-1;;;;;8421:78:8;;;;;;-1:-1:-1;;;;;8421:78:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8421:78:8;-1:-1:-1;;;;;;8421:154:8;;8396:267;;;;-1:-1:-1;;;8396:267:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8122:558;;;;;;:::o;7314:160:6:-;7400:4;7423:11;;;:7;:11;;;;;;:26;;;-1:-1:-1;;;;;7423:44:6;;;:26;;:44;;7314:160::o;1704:93:12:-;1784:6;;-1:-1:-1;;;;;1784:6:12;1770:10;:20;;1704:93::o;313:162:10:-;389:4;412:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;412:30:10;;;;:19;;:30;;;;;:42;;;;;;:56;;;458:10;:8;:10::i;1476:1359:11:-;1895:23;1937:9;1932:120;1956:24;:31;1952:1;:35;1932:120;;;2025:24;2050:1;2025:27;;;;;;;;;;;;;;2006:46;;;;1989:3;;;;;1932:120;;;;2095:1;2071:14;:21;:25;:75;;;;-1:-1:-1;2100:46:11;2071:75;:119;;;;;2166:15;2185:5;2166:24;2071:119;:168;;;;;2234:5;2210:21;:29;2071:168;2063:214;;;;;-1:-1:-1;;;2063:214:11;;;;;;;;;;;;-1:-1:-1;;;2063:214:11;;;;;;;;;;;;;;;2288:11;;;;:7;:11;;;;;;;;:24;;;:39;;;2374:18;;2337:34;;;;:55;;;;2437:18;;;;-1:-1:-1;2402:32:11;;:53;2465:74;;;;;;;2502:15;2465:74;;2519:18;;;;2465:74;;;;:30;;;;:74;;2453:1;2465:74;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;2549:11:11;;;;:7;:11;;;;;;;;:43;;;;:26;;;;;:43;;;;:::i;:::-;-1:-1:-1;2602:11:11;;;;:7;:11;;;;;;;;:63;;;;:36;;;;;:63;;;;:::i;:::-;-1:-1:-1;;2675:11:11;;;;:7;:11;;;;;;:33;;;:57;;;;2742:21;;;;:33;;-1:-1:-1;;;;2742:33:11;-1:-1:-1;;;2742:33:11;;;;;;;;;;;-1:-1:-1;;;;;;2785:43:11;-1:-1:-1;;;;;2785:43:11;;;;;;;;;;-1:-1:-1;;;;1476:1359:11:o;296:153:9:-;392:5;371:11;;;:7;:11;;;;;;;;;:18;;:26;;-1:-1:-1;;;;371:26:9;;;412:30;;;;;;;379:2;;412:30;;;;;;;;;296:153;;:::o;140:150::-;213:11;;;;:7;:11;;;;;;;;;:18;;:25;;-1:-1:-1;;;;213:25:9;-1:-1:-1;;;213:25:9;;;253:30;;;;;;;221:2;;253:30;;;;;;;;;140:150;;:::o;455:107::-;514:4;537:11;;;:7;:11;;;;;:18;;;-1:-1:-1;;;537:18:9;;;;;455:107::o;307:137:11:-;-1:-1:-1;;;;;394:17:11;;371:4;394:17;;;:6;:17;;;;;:29;;;;:43;;;427:10;:8;:10::i;6797:511:6:-;6961:14;;6902:7;;;;6957:303;;7041:16;;;;:7;:16;;;;;;;;7066:10;7041:36;;:24;;;:36;;;;;:44;7013:16;;;;;;;:23;:73;;:27;:73::i;:::-;6996:90;;6957:303;;;7122:6;7117:133;7134:7;:14;7130:1;:18;7117:133;;;7191:7;:16;7199:7;7191:16;;;;;;;;;;;:24;;:36;7216:7;7224:1;7216:10;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7191:36:6;;;;;;;;;;;-1:-1:-1;7191:36:6;:44;7173:62;;;;;7150:3;;7117:133;;;;6957:303;7276:25;:14;7295:5;7276:18;:25::i;:::-;7269:32;6797:511;-1:-1:-1;;;;;6797:511:6:o;5245:1546::-;5327:15;5345:22;;;:10;:22;;;;;:30;;5413;;;;:37;5386:24;;5413:174;;5560:16;;;;:7;:16;;;;;:27;;5413:174;;;5492:22;;;;:10;:22;;;;;:30;;5413:174;5386:201;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5386:201:6;;;;;;;;;;;;;;;;-1:-1:-1;;5612:14:6;;5598:11;5656:22;;;:10;:22;;;;;:34;;;5386:201;;-1:-1:-1;;;5612:18:6;;;;5656:34;-1:-1:-1;5598:11:6;-1:-1:-1;;5714:15:6;;;:22;-1:-1:-1;5714:46:6;;5757:3;5714:46;;;5747:7;5739:5;:15;5714:46;5700:60;-1:-1:-1;5771:22:6;5824:5;5807:713;5836:3;5831:1;:8;5807:713;;5860:14;5877:7;5885:1;5877:10;;;;;;;;;;;;;;;;;;;5948:1;5905:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5905:32:6;;;;:24;;:32;;;;;;;:40;5877:10;;-1:-1:-1;5905:44:6;5901:609;;5987:16;;;;:7;:16;;;;;;;;-1:-1:-1;;;;;5987:32:6;;;;;:24;;;;:32;;;;;;:40;6119:22;;;:10;:22;;;;;:28;;;6074:32;;;;;;;;5969:58;;;;6074:74;;:44;:74::i;:::-;-1:-1:-1;;;;;6045:14:6;;;;;;;:6;:14;;;;;;;;:25;;:103;;;;;;;;6279:22;;;:10;:22;;;;;:29;;;6391:16;;;:7;:16;;;;;:32;;;:24;;:32;;;;;;:40;6172:260;;;;;;;;;;;6279:29;;;;;6045:14;;6187:10;;-1:-1:-1;;;;;;;;;;;6172:260:6;;;;;;;;6494:1;6451:16;;;:7;:16;;;;;;;;-1:-1:-1;;;;;6451:32:6;;;;:24;;:32;;;;;:44;5901:609;-1:-1:-1;5841:3:6;;5807:713;;;-1:-1:-1;6543:22:6;;;;:10;:22;;;;;:29;;;6529:69;;-1:-1:-1;;;;;6543:29:6;6574:7;6583:14;6529:13;:69::i;:::-;6609:22;;;;:10;:22;;;;;:34;;:40;;;6663:10;;;6659:126;;;6689:22;;;;:10;:22;;;;;;:32;;:39;;-1:-1:-1;;;;6689:39:6;-1:-1:-1;;;6689:39:6;;;6747:27;6700:10;;-1:-1:-1;;;;;;;;;;;6747:27:6;;6659:126;5245:1546;;;;;;;;:::o;2842:1165:11:-;3424:11;;;;:7;:11;;;;;:18;:23;:37;;;;;3460:1;3451:6;:10;3424:37;3416:67;;;;;-1:-1:-1;;;3416:67:11;;;;;;;;;;;;-1:-1:-1;;;3416:67:11;;;;;;;;;;;;;;;3515:6;3494:7;:11;3502:2;3494:11;;;;;;;;;;;:18;;:27;;;;3554:8;3531:7;:11;3539:2;3531:11;;;;;;;;;;;:20;;:31;;;;3618:4;3572:7;:11;3580:2;3572:11;;;;;;;;;;;:19;;:31;3592:10;-1:-1:-1;;;;;3572:31:11;-1:-1:-1;;;;;3572:31:11;;;;;;;;;;;;:43;;;:50;;;;;;;;;;;;;;;;;;3676:4;3632:7;:11;3640:2;3632:11;;;;;;;;;;;:19;;:30;3652:9;-1:-1:-1;;;;;3632:30:11;-1:-1:-1;;;;;3632:30:11;;;;;;;;;;;;:41;;;:48;;;;;;;;;;;;;;;;;;3691:262;3701:2;3723:12;3755:15;3790:14;3824:24;3868:21;3909:9;3938:14;3691:9;:262::i;:::-;3964:36;3978:9;3989:2;3993:6;3964:13;:36::i;:::-;2842:1165;;;;;;;;;;;:::o;568:114:9:-;-1:-1:-1;;;;;654:12:9;631:4;654:12;;;:6;:12;;;;;:21;;;;;;;568:114::o;1347:1318:7:-;1440:7;1551:11;;;:7;:11;;;;;:30;;:37;1440:7;;1511:15;;-1:-1:-1;;1551:41:7;1537:835;1622:19;1644:11;;;:7;:11;;;;;:30;;:33;;1675:1;;1644:33;;;;;;;;;;;;;;;;;;:36;;1694:12;1709:11;;;:7;:11;;;;;:30;;:33;;1644:36;;-1:-1:-1;1694:12:7;;1740:1;;1709:33;;;;;;;;;;;;;;;;1743:1;1709:36;;;;;;;;;1759:19;1797:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1797:28:7;;;;:19;;:28;;;;;:37;;;1709:36;;-1:-1:-1;1759:19:7;1797:52;-1:-1:-1;1793:569:7;;1899:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1899:28:7;;;;:19;;:28;;;;;:37;;;1883:66;;1943:5;;1884:53;;:10;;:14;:53::i;1883:66::-;1869:80;-1:-1:-1;1971:16:7;1967:37;;-1:-1:-1;2003:1:7;1967:37;2035:34;2063:5;2036:21;:11;2052:4;2036:15;:21::i;:::-;2035:27;;:34::i;:::-;2022:47;;;;2087:5;;;;;1793:569;2145:40;2179:5;2146:27;:10;2161:11;2146:14;:27::i;2145:40::-;2131:54;-1:-1:-1;2207:16:7;2203:37;;-1:-1:-1;2239:1:7;2203:37;2271:11;;-1:-1:-1;2271:11:7;;2313:34;2341:5;2314:21;:11;2330:4;2314:15;:21::i;2313:34::-;2300:47;;;;-1:-1:-1;;;;;1602:3:7;1537:835;;;-1:-1:-1;2429:11:7;;;;:7;:11;;;;;:20;;;2411:39;;:9;;2425:2;:24;2411:13;:39::i;:::-;2500:17;2531:11;;;:7;:11;;;;;:32;;;2399:51;;-1:-1:-1;2500:17:7;2520:56;;2570:5;;2521:43;;:5;;:9;:43::i;2520:56::-;2608:11;;;;:7;:11;;;;;:34;;;2500:76;;-1:-1:-1;2594:64:7;;2608:49;;2500:76;2608:38;:49::i;:::-;2594:9;;:13;:64::i;:::-;2587:71;1347:1318;-1:-1:-1;;;;;;;1347:1318:7:o;2304:459:17:-;2362:7;2603:6;2599:45;;-1:-1:-1;2632:1:17;2625:8;;2599:45;2666:5;;;2670:1;2666;:5;:1;2689:5;;;;;:10;2681:56;;;;-1:-1:-1;;;2681:56:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3218:130;3276:7;3302:39;3306:1;3309;3302:39;;;;;;;;;;;;;;;;;:3;:39::i;573:516:14:-;663:4;;679:382;703:37;699:1;:41;679:382;;;810:1;765:30;796:1;765:33;;;;;;;;;-1:-1:-1;;;;;765:33:14;:47;761:290;;832:27;876:30;907:1;876:33;;;;;;;;;940:30;;;-1:-1:-1;;;940:30:14;;-1:-1:-1;;;;;940:30:14;;;;;;;;;876:33;;;;-1:-1:-1;932:51:14;;;;876:33;;940:21;;:30;;;;;;;;;;;;;;876:33;940:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;940:30:14;-1:-1:-1;;;;;932:51:14;;928:109;;;1014:4;1007:11;;;;;;928:109;761:290;;742:3;;679:382;;;-1:-1:-1;1077:5:14;;573:516;-1:-1:-1;;;573:516:14:o;7600::8:-;7818:15;:2;-1:-1:-1;;;;;7818:13:8;;:15::i;:::-;7815:295;;;7969:47;;;-1:-1:-1;;;;;7874:142:8;;7891:2;-1:-1:-1;;;;;7874:38:8;;7913:8;7923:4;7929:2;7933:5;7940:4;7874:71;;;;;;;;;;;;;-1:-1:-1;;;;;7874:71:8;;;;;;-1:-1:-1;;;;;7874:71:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7874:71:8;-1:-1:-1;;;;;;7874:142:8;;7849:250;;;;-1:-1:-1;;;7849:250:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1396:225:12;-1:-1:-1;;;;;1469:22:12;;1461:73;;;;-1:-1:-1;;;1461:73:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:6;;1549:38;;-1:-1:-1;;;;;1549:38:12;;;;1570:6;;1549:38;;1570:6;;1549:38;1597:6;:17;;-1:-1:-1;;;;;;1597:17:12;-1:-1:-1;;;;;1597:17:12;;;;;;;;;;1396:225::o;4013:766:11:-;4117:11;;;;:7;:11;;;;;:22;;:25;;4104:668;;4117:11;:25;;;;;;;;;;;;;;;;4195:11;;;:7;:11;;;;;;;:18;;4117:25;4236:20;;;4104:668;;;;;;;4339:34;;;;4104:668;;4398:32;;;;4104:668;;;;4455:11;;;;;;;:30;;;;:33;;-1:-1:-1;;;;;4117:25:11;;;;4165:7;;4195:18;;4236:20;;4279:12;;4104:668;;;;;;4455:30;4117:25;4455:33;;;;;;;;;;;;;;4489:1;4455:36;;;;;;;;;4104:668;;4537:11;;;;:7;:11;;;;;;;;;:26;;4104:668;;;;;;;;;;;;;;;;;4537:26;;4104:668;;4537:26;4104:668;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4104:668:11;;;;;;;;;;;;;;;;-1:-1:-1;;;4586:11:11;;;;:7;:11;;;;;;;;;:36;;4104:668;;;;;;;;;;;;;;;;;;;-1:-1:-1;4586:36:11;-1:-1:-1;4104:668:11;;4586:36;4104:668;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;4645:11:11;;;;:7;:11;;;;;:33;;;;4701:21;;;;;4645:33;;-1:-1:-1;4701:21:11;-1:-1:-1;;;4701:21:11;;;;-1:-1:-1;;;;;;4745:26:11;4104:12;:668::i;607:320:18:-;660:4;695:1;690;:6;;;676:187;;-1:-1:-1;724:16:18;:20;;:16;719:26;712:33;;676:187;778:1;766:14;;:2;:14;;:32;;;;;796:2;790:1;784:14;;;;766:32;762:101;;;-1:-1:-1;826:25:18;;;:16;821:31;814:38;;688:213:9;787:4;810:18;825:2;810:14;:18::i;:::-;:44;;;;832:22;849:4;832:16;:22::i;:::-;810:68;;;;858:20;875:2;858:16;:20::i;:::-;810:84;;;-1:-1:-1;;883:10:9;;803:91;-1:-1:-1;;;688:213:9:o;2754:772:7:-;2875:12;2906:33;2923:4;2929:2;2933:5;2906:16;:33::i;:::-;2899:40;;2972:4;2957:11;:19;;2949:57;;;;;-1:-1:-1;;;2949:57:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;3053:68;;;;;;;;;;;-1:-1:-1;;;3053:68:7;;;;;;;;-1:-1:-1;3053:11:7;;;:7;:11;;;;;-1:-1:-1;;;;;3053:25:7;;;;:19;;:25;;;;;;;:33;:68;;3091:5;;3053:37;:68::i;:::-;3017:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;3017:25:7;;;;:19;;:25;;;;;:104;3132:28;3146:2;3025;3154:5;3132:13;:28::i;:::-;3176:9;3171:327;3195:11;;;;:7;:11;;;;;:26;;:33;3191:37;;3171:327;;;3249:21;3273:11;;;:7;:11;;;;;:26;;:29;;3300:1;;3273:29;;;;;;;;;;;;;;;;;;3351:11;;;:7;:11;;;;;;:36;;:39;;-1:-1:-1;;;;;3273:29:7;;;;-1:-1:-1;3351:36:7;3388:1;;3351:39;;;;;;;;;;;;;;;;;-1:-1:-1;3440:47:7;3481:5;3441:34;:4;3351:39;3441:8;:34::i;3440:47::-;-1:-1:-1;;;;;3404:21:7;;;;;;;:6;:21;;;;;:32;;;;:83;;;;;;;;-1:-1:-1;3230:3:7;3171:327;;;;2754:772;;;;;;;:::o;590:797:16:-;650:4;1298:20;;1143:66;1337:15;;;;;:42;;-1:-1:-1;1356:23:16;;;1329:51;-1:-1:-1;;590:797:16:o;1307:134:17:-;1365:7;1391:43;1395:1;1398;1391:43;;;;;;;;;;;;;;;;;:3;:43::i;301:1006:7:-;397:18;418:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;418:30:7;;;;:19;;:30;;;;;:38;:49;;461:5;418:42;:49::i;:::-;482:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;482:30:7;;;;:19;;:30;;;;;:38;397:70;;-1:-1:-1;478:761:7;;547:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;547:30:7;;;;:19;;:30;;;;;:39;;;;;;;;542:225;;-1:-1:-1;;;;;606:17:7;;;;;;:6;:17;;;;;;;;:24;;:33;;;;;;;;;;;;;;;;;;657:11;;;:7;:11;;;;;:22;;;:38;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;657:38:7;;;;;713:30;;;;:19;;;;:30;;542:225;781:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;781:30:7;;;;:19;;:30;;;;;823:15;781:39;;;;:57;478:761;;;949:20;992:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;992:30:7;;;;:19;;:30;;;;;:39;;;972:60;;:15;;:19;:60::i;:::-;1046:19;1069:11;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1069:30:7;;;;:19;;:30;;;;;:38;949:83;;-1:-1:-1;1046:19:7;1068:74;;1131:10;;1069:56;;949:83;1069:42;:56::i;1068:74::-;1157:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1157:30:7;;;;:19;;:30;;;;;1199:15;:29;;;;1157:39;;;;:71;-1:-1:-1;;478:761:7;1249:11;;;;:7;:11;;;;;;;;-1:-1:-1;;;;;1249:30:7;;;;;:19;;;;:30;;;;;;:51;;;;-1:-1:-1;301:1006:7:o;3969:338:17:-;4055:7;4155:12;4148:5;4140:28;;;;-1:-1:-1;;;4140:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4178:9;4194:1;4190;:5;;;;;;;3969:338;-1:-1:-1;;;;;3969:338:17:o;1877:187::-;1963:7;1998:12;1990:6;;;;1982:29;;;;-1:-1:-1;;;1982:29:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2033:5:17;;;1877:187::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "source": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity ^0.7.1;\n\nimport './interfaces/IERC1155Metadata.sol';\nimport \"./utils/SafeMath.sol\";\nimport './utils/StringUtils.sol';\nimport './lib/Callable.sol';\nimport './lib/Privatizable.sol';\n\ncontract StashBlox is Callable, IERC1155Metadata, StringUtils {\n\n    using SafeMath for uint256;\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        _config.callbackAutoExecuteMaxAddresses = 50;\n        _config.baseURI = \"http://stashblox.com/tokens/\";\n        _transferOwnership(msg.sender);\n    }\n\n    /**\n     * @dev Function to withdraw ETH from the contract.\n     * @param to recipent address\n     * @param amount amount to withdraw\n     */\n    function withdraw(address to, uint256 amount) external onlyOwner {\n        require(_users[to].ETHBalance >= amount, \"Insufficient balance\");\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Withdrawal failed\");\n        _users[to].ETHBalance -= amount;\n    }\n\n    /**\n     * @dev Function to make an ETH deposit that can be used to pay token transfer .\n     * @param to recipent address\n     */\n    function deposit(address to) external payable {\n        _users[to].ETHBalance = _users[to].ETHBalance.add(msg.value);\n    }\n\n    /**\n     * @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer()).\n     */\n    receive() external payable {\n        _users[msg.sender].ETHBalance = _users[msg.sender].ETHBalance.add(msg.value);\n    }\n\n    /**\n     * @param id Token ID\n     * @return URI string\n     */\n    function uri(uint256 id) external view override returns (string memory) {\n        return _strConcat(_config.baseURI, _toHexString(id));\n    }\n\n\n\n}\n",
  "sourcePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
  "ast": {
    "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
    "exportedSymbols": {
      "StashBlox": [
        140
      ]
    },
    "id": 141,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "46:23:0"
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol",
        "file": "./interfaces/IERC1155Metadata.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 272,
        "src": "71:43:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol",
        "file": "./utils/SafeMath.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3623,
        "src": "115:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol",
        "file": "./utils/StringUtils.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3943,
        "src": "146:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol",
        "file": "./lib/Callable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 1037,
        "src": "180:28:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Privatizable.sol",
        "file": "./lib/Privatizable.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3169,
        "src": "209:32:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7,
              "name": "Callable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1036,
              "src": "265:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Callable_$1036",
                "typeString": "contract Callable"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "265:8:0"
          },
          {
            "baseName": {
              "id": 9,
              "name": "IERC1155Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 271,
              "src": "275:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1155Metadata_$271",
                "typeString": "contract IERC1155Metadata"
              }
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "275:16:0"
          },
          {
            "baseName": {
              "id": 11,
              "name": "StringUtils",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3942,
              "src": "293:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StringUtils_$3942",
                "typeString": "contract StringUtils"
              }
            },
            "id": 12,
            "nodeType": "InheritanceSpecifier",
            "src": "293:11:0"
          }
        ],
        "contractDependencies": [
          259,
          271,
          321,
          344,
          1036,
          1492,
          2080,
          2312,
          2469,
          2990,
          3082,
          3259,
          3379,
          3942
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 140,
        "linearizedBaseContracts": [
          140,
          3942,
          271,
          1036,
          2312,
          2469,
          2990,
          2080,
          3259,
          3082,
          344,
          1492,
          3379,
          259,
          321
        ],
        "name": "StashBlox",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 15,
            "libraryName": {
              "id": 13,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3622,
              "src": "318:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3622",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "312:27:0",
            "typeName": {
              "id": 14,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "331:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "body": {
              "id": 36,
              "nodeType": "Block",
              "src": "456:159:0",
              "statements": [
                {
                  "expression": {
                    "id": 23,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3356,
                        "src": "466:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3328_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 21,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "callbackAutoExecuteMaxAddresses",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3321,
                      "src": "466:39:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "3530",
                      "id": 22,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "508:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_50_by_1",
                        "typeString": "int_const 50"
                      },
                      "value": "50"
                    },
                    "src": "466:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 24,
                  "nodeType": "ExpressionStatement",
                  "src": "466:44:0"
                },
                {
                  "expression": {
                    "id": 29,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 25,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3356,
                        "src": "520:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3328_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 27,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "baseURI",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3323,
                      "src": "520:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "687474703a2f2f7374617368626c6f782e636f6d2f746f6b656e732f",
                      "id": 28,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "538:30:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_699ad49e673d0ba571e0814a1cc2e9c5b4688dea54cab55db91df34a385ab8a4",
                        "typeString": "literal_string \"http://stashblox.com/tokens/\""
                      },
                      "value": "http://stashblox.com/tokens/"
                    },
                    "src": "520:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 30,
                  "nodeType": "ExpressionStatement",
                  "src": "520:48:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 32,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "597:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 33,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "597:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 31,
                      "name": "_transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3069,
                      "src": "578:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "578:30:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35,
                  "nodeType": "ExpressionStatement",
                  "src": "578:30:0"
                }
              ]
            },
            "documentation": {
              "id": 16,
              "nodeType": "StructuredDocumentation",
              "src": "345:91:0",
              "text": " @dev Initializes the contract setting the deployer as the initial owner."
            },
            "id": 37,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "453:2:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "456:0:0"
            },
            "scope": 140,
            "src": "441:174:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 78,
              "nodeType": "Block",
              "src": "832:224:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 48,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3360,
                              "src": "850:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 50,
                            "indexExpression": {
                              "id": 49,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "857:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "850:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3271_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 51,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3267,
                          "src": "850:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 52,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "875:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "850:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 54,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "883:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 47,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "842:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "842:64:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "842:64:0"
                },
                {
                  "assignments": [
                    58,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 58,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "917:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 57,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "917:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 65,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 63,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "958:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 59,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "935:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 60,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "935:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 62,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 61,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "950:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "935:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "935:26:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "916:45:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 67,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58,
                        "src": "979:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5769746864726177616c206661696c6564",
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "988:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        },
                        "value": "Withdrawal failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        }
                      ],
                      "id": 66,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "971:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 69,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "971:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 70,
                  "nodeType": "ExpressionStatement",
                  "src": "971:37:0"
                },
                {
                  "expression": {
                    "id": 76,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 71,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3360,
                          "src": "1018:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 73,
                        "indexExpression": {
                          "id": 72,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1025:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1018:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3271_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 74,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3267,
                      "src": "1018:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 75,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "1043:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1018:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 77,
                  "nodeType": "ExpressionStatement",
                  "src": "1018:31:0"
                }
              ]
            },
            "documentation": {
              "id": 38,
              "nodeType": "StructuredDocumentation",
              "src": "621:141:0",
              "text": " @dev Function to withdraw ETH from the contract.\n @param to recipent address\n @param amount amount to withdraw"
            },
            "functionSelector": "f3fef3a3",
            "id": 79,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 45,
                "modifierName": {
                  "id": 44,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3029,
                  "src": "822:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "822:9:0"
              }
            ],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 43,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "785:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "785:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "797:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "784:28:0"
            },
            "returnParameters": {
              "id": 46,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "832:0:0"
            },
            "scope": 140,
            "src": "767:289:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 99,
              "nodeType": "Block",
              "src": "1243:77:0",
              "statements": [
                {
                  "expression": {
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 85,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3360,
                          "src": "1253:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 87,
                        "indexExpression": {
                          "id": 86,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 82,
                          "src": "1260:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1253:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3271_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 88,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3267,
                      "src": "1253:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 94,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1303:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1303:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 89,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3360,
                              "src": "1277:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 91,
                            "indexExpression": {
                              "id": 90,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 82,
                              "src": "1284:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1277:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3271_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 92,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3267,
                          "src": "1277:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 93,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3455,
                        "src": "1277:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 96,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1277:36:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1253:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 98,
                  "nodeType": "ExpressionStatement",
                  "src": "1253:60:0"
                }
              ]
            },
            "documentation": {
              "id": 80,
              "nodeType": "StructuredDocumentation",
              "src": "1062:130:0",
              "text": " @dev Function to make an ETH deposit that can be used to pay token transfer .\n @param to recipent address"
            },
            "functionSelector": "f340fa01",
            "id": 100,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 82,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 100,
                  "src": "1214:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1214:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1213:12:0"
            },
            "returnParameters": {
              "id": 84,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1243:0:0"
            },
            "scope": 140,
            "src": "1197:123:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 120,
              "nodeType": "Block",
              "src": "1502:93:0",
              "statements": [
                {
                  "expression": {
                    "id": 118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 104,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3360,
                          "src": "1512:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 107,
                        "indexExpression": {
                          "expression": {
                            "id": 105,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1519:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1519:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1512:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3271_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 108,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3267,
                      "src": "1512:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 115,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1578:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1578:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 109,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3360,
                              "src": "1544:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 112,
                            "indexExpression": {
                              "expression": {
                                "id": 110,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1551:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1551:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1544:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3271_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 113,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3267,
                          "src": "1544:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 114,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3455,
                        "src": "1544:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1544:44:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1512:76:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 119,
                  "nodeType": "ExpressionStatement",
                  "src": "1512:76:0"
                }
              ]
            },
            "documentation": {
              "id": 101,
              "nodeType": "StructuredDocumentation",
              "src": "1326:144:0",
              "text": " @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer())."
            },
            "id": 121,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1482:2:0"
            },
            "returnParameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1502:0:0"
            },
            "scope": 140,
            "src": "1475:120:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              270
            ],
            "body": {
              "id": 138,
              "nodeType": "Block",
              "src": "1741:69:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 131,
                          "name": "_config",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3356,
                          "src": "1769:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Config_$3328_storage",
                            "typeString": "struct StashBloxData.Config storage ref"
                          }
                        },
                        "id": 132,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "baseURI",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3323,
                        "src": "1769:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 134,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 124,
                            "src": "1799:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 133,
                          "name": "_toHexString",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3863,
                          "src": "1786:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (string memory)"
                          }
                        },
                        "id": 135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1786:16:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 130,
                      "name": "_strConcat",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3723,
                      "src": "1758:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (string memory,string memory) pure returns (string memory)"
                      }
                    },
                    "id": 136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1758:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 129,
                  "id": 137,
                  "nodeType": "Return",
                  "src": "1751:52:0"
                }
              ]
            },
            "documentation": {
              "id": 122,
              "nodeType": "StructuredDocumentation",
              "src": "1601:63:0",
              "text": " @param id Token ID\n @return URI string"
            },
            "functionSelector": "0e89341c",
            "id": 139,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 126,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1708:8:0"
            },
            "parameters": {
              "id": 125,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 124,
                  "mutability": "mutable",
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1682:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 123,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1682:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1681:12:0"
            },
            "returnParameters": {
              "id": 129,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 128,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1726:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 127,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1726:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1725:15:0"
            },
            "scope": 140,
            "src": "1669:141:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 141,
        "src": "243:1572:0"
      }
    ],
    "src": "46:1770:0"
  },
  "legacyAST": {
    "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/StashBlox.sol",
    "exportedSymbols": {
      "StashBlox": [
        140
      ]
    },
    "id": 141,
    "license": "GPL-3.0-or-later",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.7",
          ".1"
        ],
        "nodeType": "PragmaDirective",
        "src": "46:23:0"
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/interfaces/IERC1155Metadata.sol",
        "file": "./interfaces/IERC1155Metadata.sol",
        "id": 2,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 272,
        "src": "71:43:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/SafeMath.sol",
        "file": "./utils/SafeMath.sol",
        "id": 3,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3623,
        "src": "115:30:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/utils/StringUtils.sol",
        "file": "./utils/StringUtils.sol",
        "id": 4,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3943,
        "src": "146:33:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Callable.sol",
        "file": "./lib/Callable.sol",
        "id": 5,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 1037,
        "src": "180:28:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/ouziel/Work/StashBloxContracts/contracts/lib/Privatizable.sol",
        "file": "./lib/Privatizable.sol",
        "id": 6,
        "nodeType": "ImportDirective",
        "scope": 141,
        "sourceUnit": 3169,
        "src": "209:32:0",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7,
              "name": "Callable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1036,
              "src": "265:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Callable_$1036",
                "typeString": "contract Callable"
              }
            },
            "id": 8,
            "nodeType": "InheritanceSpecifier",
            "src": "265:8:0"
          },
          {
            "baseName": {
              "id": 9,
              "name": "IERC1155Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 271,
              "src": "275:16:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IERC1155Metadata_$271",
                "typeString": "contract IERC1155Metadata"
              }
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "275:16:0"
          },
          {
            "baseName": {
              "id": 11,
              "name": "StringUtils",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3942,
              "src": "293:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_StringUtils_$3942",
                "typeString": "contract StringUtils"
              }
            },
            "id": 12,
            "nodeType": "InheritanceSpecifier",
            "src": "293:11:0"
          }
        ],
        "contractDependencies": [
          259,
          271,
          321,
          344,
          1036,
          1492,
          2080,
          2312,
          2469,
          2990,
          3082,
          3259,
          3379,
          3942
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 140,
        "linearizedBaseContracts": [
          140,
          3942,
          271,
          1036,
          2312,
          2469,
          2990,
          2080,
          3259,
          3082,
          344,
          1492,
          3379,
          259,
          321
        ],
        "name": "StashBlox",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "id": 15,
            "libraryName": {
              "id": 13,
              "name": "SafeMath",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3622,
              "src": "318:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_SafeMath_$3622",
                "typeString": "library SafeMath"
              }
            },
            "nodeType": "UsingForDirective",
            "src": "312:27:0",
            "typeName": {
              "id": 14,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "331:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "body": {
              "id": 36,
              "nodeType": "Block",
              "src": "456:159:0",
              "statements": [
                {
                  "expression": {
                    "id": 23,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 19,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3356,
                        "src": "466:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3328_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 21,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "callbackAutoExecuteMaxAddresses",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3321,
                      "src": "466:39:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "3530",
                      "id": 22,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "508:2:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_50_by_1",
                        "typeString": "int_const 50"
                      },
                      "value": "50"
                    },
                    "src": "466:44:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 24,
                  "nodeType": "ExpressionStatement",
                  "src": "466:44:0"
                },
                {
                  "expression": {
                    "id": 29,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 25,
                        "name": "_config",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3356,
                        "src": "520:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Config_$3328_storage",
                          "typeString": "struct StashBloxData.Config storage ref"
                        }
                      },
                      "id": 27,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "baseURI",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3323,
                      "src": "520:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "687474703a2f2f7374617368626c6f782e636f6d2f746f6b656e732f",
                      "id": 28,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "538:30:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_699ad49e673d0ba571e0814a1cc2e9c5b4688dea54cab55db91df34a385ab8a4",
                        "typeString": "literal_string \"http://stashblox.com/tokens/\""
                      },
                      "value": "http://stashblox.com/tokens/"
                    },
                    "src": "520:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 30,
                  "nodeType": "ExpressionStatement",
                  "src": "520:48:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 32,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "597:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 33,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "597:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "id": 31,
                      "name": "_transferOwnership",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3069,
                      "src": "578:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 34,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "578:30:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 35,
                  "nodeType": "ExpressionStatement",
                  "src": "578:30:0"
                }
              ]
            },
            "documentation": {
              "id": 16,
              "nodeType": "StructuredDocumentation",
              "src": "345:91:0",
              "text": " @dev Initializes the contract setting the deployer as the initial owner."
            },
            "id": 37,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 17,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "453:2:0"
            },
            "returnParameters": {
              "id": 18,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "456:0:0"
            },
            "scope": 140,
            "src": "441:174:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 78,
              "nodeType": "Block",
              "src": "832:224:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 48,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3360,
                              "src": "850:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 50,
                            "indexExpression": {
                              "id": 49,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "857:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "850:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3271_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 51,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3267,
                          "src": "850:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 52,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "875:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "850:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "496e73756666696369656e742062616c616e6365",
                        "id": 54,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "883:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        },
                        "value": "Insufficient balance"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                          "typeString": "literal_string \"Insufficient balance\""
                        }
                      ],
                      "id": 47,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "842:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 55,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "842:64:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 56,
                  "nodeType": "ExpressionStatement",
                  "src": "842:64:0"
                },
                {
                  "assignments": [
                    58,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 58,
                      "mutability": "mutable",
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 78,
                      "src": "917:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 57,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "917:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 65,
                  "initialValue": {
                    "arguments": [
                      {
                        "hexValue": "",
                        "id": 63,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "958:2:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        },
                        "value": ""
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                          "typeString": "literal_string \"\""
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                            "typeString": "literal_string \"\""
                          }
                        ],
                        "expression": {
                          "id": 59,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "935:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 60,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "call",
                        "nodeType": "MemberAccess",
                        "src": "935:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                        }
                      },
                      "id": 62,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 61,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "950:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "935:22:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 64,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "935:26:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "916:45:0"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 67,
                        "name": "success",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 58,
                        "src": "979:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "5769746864726177616c206661696c6564",
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "988:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        },
                        "value": "Withdrawal failed"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_ec24209b271cd4d65181d9e8c6d9d718c94d28a7972011b1be42ea8d094a1a88",
                          "typeString": "literal_string \"Withdrawal failed\""
                        }
                      ],
                      "id": 66,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "971:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 69,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "971:37:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 70,
                  "nodeType": "ExpressionStatement",
                  "src": "971:37:0"
                },
                {
                  "expression": {
                    "id": 76,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 71,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3360,
                          "src": "1018:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 73,
                        "indexExpression": {
                          "id": 72,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 40,
                          "src": "1025:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1018:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3271_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 74,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3267,
                      "src": "1018:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 75,
                      "name": "amount",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "1043:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1018:31:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 77,
                  "nodeType": "ExpressionStatement",
                  "src": "1018:31:0"
                }
              ]
            },
            "documentation": {
              "id": 38,
              "nodeType": "StructuredDocumentation",
              "src": "621:141:0",
              "text": " @dev Function to withdraw ETH from the contract.\n @param to recipent address\n @param amount amount to withdraw"
            },
            "functionSelector": "f3fef3a3",
            "id": 79,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 45,
                "modifierName": {
                  "id": 44,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 3029,
                  "src": "822:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "822:9:0"
              }
            ],
            "name": "withdraw",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 43,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 40,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "785:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 39,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "785:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 42,
                  "mutability": "mutable",
                  "name": "amount",
                  "nodeType": "VariableDeclaration",
                  "scope": 79,
                  "src": "797:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 41,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "797:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "784:28:0"
            },
            "returnParameters": {
              "id": 46,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "832:0:0"
            },
            "scope": 140,
            "src": "767:289:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 99,
              "nodeType": "Block",
              "src": "1243:77:0",
              "statements": [
                {
                  "expression": {
                    "id": 97,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 85,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3360,
                          "src": "1253:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 87,
                        "indexExpression": {
                          "id": 86,
                          "name": "to",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 82,
                          "src": "1260:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1253:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3271_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 88,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3267,
                      "src": "1253:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 94,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1303:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1303:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 89,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3360,
                              "src": "1277:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 91,
                            "indexExpression": {
                              "id": 90,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 82,
                              "src": "1284:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1277:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3271_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 92,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3267,
                          "src": "1277:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 93,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3455,
                        "src": "1277:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 96,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1277:36:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1253:60:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 98,
                  "nodeType": "ExpressionStatement",
                  "src": "1253:60:0"
                }
              ]
            },
            "documentation": {
              "id": 80,
              "nodeType": "StructuredDocumentation",
              "src": "1062:130:0",
              "text": " @dev Function to make an ETH deposit that can be used to pay token transfer .\n @param to recipent address"
            },
            "functionSelector": "f340fa01",
            "id": 100,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "deposit",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 82,
                  "mutability": "mutable",
                  "name": "to",
                  "nodeType": "VariableDeclaration",
                  "scope": 100,
                  "src": "1214:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1214:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1213:12:0"
            },
            "returnParameters": {
              "id": 84,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1243:0:0"
            },
            "scope": 140,
            "src": "1197:123:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "body": {
              "id": 120,
              "nodeType": "Block",
              "src": "1502:93:0",
              "statements": [
                {
                  "expression": {
                    "id": 118,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 104,
                          "name": "_users",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3360,
                          "src": "1512:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                            "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                          }
                        },
                        "id": 107,
                        "indexExpression": {
                          "expression": {
                            "id": 105,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1519:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 106,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1519:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1512:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_User_$3271_storage",
                          "typeString": "struct StashBloxData.User storage ref"
                        }
                      },
                      "id": 108,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "ETHBalance",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3267,
                      "src": "1512:29:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "expression": {
                            "id": 115,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1578:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 116,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "1578:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "baseExpression": {
                              "id": 109,
                              "name": "_users",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 3360,
                              "src": "1544:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_User_$3271_storage_$",
                                "typeString": "mapping(address => struct StashBloxData.User storage ref)"
                              }
                            },
                            "id": 112,
                            "indexExpression": {
                              "expression": {
                                "id": 110,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "1551:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1551:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address_payable",
                                "typeString": "address payable"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1544:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_User_$3271_storage",
                              "typeString": "struct StashBloxData.User storage ref"
                            }
                          },
                          "id": 113,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "ETHBalance",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 3267,
                          "src": "1544:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 114,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "add",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3455,
                        "src": "1544:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 117,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1544:44:0",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1512:76:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 119,
                  "nodeType": "ExpressionStatement",
                  "src": "1512:76:0"
                }
              ]
            },
            "documentation": {
              "id": 101,
              "nodeType": "StructuredDocumentation",
              "src": "1326:144:0",
              "text": " @dev Receive Ether Function:this is the function that is executed on plain Ether transfers (e.g. via .send() or .transfer())."
            },
            "id": 121,
            "implemented": true,
            "kind": "receive",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 102,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1482:2:0"
            },
            "returnParameters": {
              "id": 103,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1502:0:0"
            },
            "scope": 140,
            "src": "1475:120:0",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              270
            ],
            "body": {
              "id": 138,
              "nodeType": "Block",
              "src": "1741:69:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 131,
                          "name": "_config",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3356,
                          "src": "1769:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Config_$3328_storage",
                            "typeString": "struct StashBloxData.Config storage ref"
                          }
                        },
                        "id": 132,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "baseURI",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 3323,
                        "src": "1769:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      {
                        "arguments": [
                          {
                            "id": 134,
                            "name": "id",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 124,
                            "src": "1799:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 133,
                          "name": "_toHexString",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3863,
                          "src": "1786:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                            "typeString": "function (uint256) pure returns (string memory)"
                          }
                        },
                        "id": 135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1786:16:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        },
                        {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      ],
                      "id": 130,
                      "name": "_strConcat",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3723,
                      "src": "1758:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (string memory,string memory) pure returns (string memory)"
                      }
                    },
                    "id": 136,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1758:45:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 129,
                  "id": 137,
                  "nodeType": "Return",
                  "src": "1751:52:0"
                }
              ]
            },
            "documentation": {
              "id": 122,
              "nodeType": "StructuredDocumentation",
              "src": "1601:63:0",
              "text": " @param id Token ID\n @return URI string"
            },
            "functionSelector": "0e89341c",
            "id": 139,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "uri",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 126,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1708:8:0"
            },
            "parameters": {
              "id": 125,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 124,
                  "mutability": "mutable",
                  "name": "id",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1682:10:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 123,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1682:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1681:12:0"
            },
            "returnParameters": {
              "id": 129,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 128,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 139,
                  "src": "1726:13:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 127,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1726:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1725:15:0"
            },
            "scope": 140,
            "src": "1669:141:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 141,
        "src": "243:1572:0"
      }
    ],
    "src": "46:1770:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.1+commit.f4a555be.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-10-20T17:55:09.233Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptCallback(uint256)": {
        "details": "Accept a callback",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "approveCallback(uint256)": {
        "details": "Approve a callback",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "authorizeMaintener(uint256,address)": {
        "details": "Function to authorize an address to maintain a token.",
        "params": {
          "maintener": "The authorized address"
        }
      },
      "authorizeTokenizer(address)": {
        "details": "Function to authorize an address to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "Get the specified address' balance for token with specified ID. Attempting to query the zero account for a balance will result in a revert.",
        "params": {
          "account": "The address of the token holder",
          "id": "ID of the token"
        },
        "returns": {
          "_0": "The account's balance of the token type requested"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "Get the balance of multiple account/token pairs. If any of the query accounts is the zero account, this query will revert.",
        "params": {
          "accounts": "The addresses of the token holders",
          "ids": "IDs of the tokens"
        },
        "returns": {
          "_0": "Balances for each account and token id pair"
        }
      },
      "cloneToken(uint256,uint256[],uint256[])": {
        "details": "Function to mint tokens in batch.",
        "params": {
          "id": "Identifier of the template",
          "ids": "list of IDs of the tokens to be minted",
          "metadataHashes": "list of metadata file hashes"
        }
      },
      "constructor": {
        "details": "Initializes the contract setting the deployer as the initial owner."
      },
      "createToken(address,uint256,uint256,uint256,uint256,uint256[3],address[],uint256[],uint256,bool,address)": {
        "details": "Function to mint an amount of a token with the given ID.",
        "params": {
          "feesRecipients": "list of addresses receiving transfer fees",
          "feesRecipientsPercentage": "list of percentage, each one for the corresponding feesRecipients",
          "id": "ID of the token to be minted",
          "metadataHash": "Metadata file hash",
          "minHoldingForCallback": "minimum holding to propose a callback",
          "recipient": "The address that will own the minted tokens",
          "supply": "Amount of the token to be minted",
          "transactionFees": "transaction fees: [lumpSumFees (in WEI), valueProportionalFees (ratio of transfered amount * 10**8), storageFees (in storageCredit * 10**8)]"
        }
      },
      "deposit(address)": {
        "details": "Function to make an ETH deposit that can be used to pay token transfer .",
        "params": {
          "to": "recipent address"
        }
      },
      "executeCallback(uint256,uint256)": {
        "details": "Accept a callback. Caller need to recall the function to continue the callback until completed.",
        "params": {
          "callbackId": "callback proposition ID",
          "maxCall": "maximal call to excute"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "The account of the Tokens",
          "operator": "Address of authorized operator"
        },
        "returns": {
          "_0": "True if the operator is approved, false if not"
        }
      },
      "isLockedAddress(address)": {
        "details": "Function to check if an address is lockec.",
        "params": {
          "addr": "The address to check"
        }
      },
      "isLockedToken(uint256)": {
        "details": "Function to check if a token is locked.",
        "params": {
          "id": "The token ID"
        }
      },
      "isMaintener(uint256,address)": {
        "details": "Function to check if an address is authorized to maintain a token.",
        "params": {
          "id": "the token id",
          "maintener": "The authorized address"
        },
        "returns": {
          "_0": "true if it's a maintener address"
        }
      },
      "isTokenizer(address)": {
        "details": "Function to check if an address is authorized to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "lockAddress(address)": {
        "details": "Function to lock an address.",
        "params": {
          "addr": "The address to lock"
        }
      },
      "lockToken(uint256,uint256)": {
        "details": "Function to lock a token.",
        "params": {
          "id": "The token ID"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proposeCallback(uint256,uint256,uint256,address[],uint256)": {
        "details": "Propose to buy the whole supply of a token. The proposer must hold minHoldingForCallback% of the total supply. StashBlox must approve the price with acceptCallback();",
        "params": {
          "callees": "list of calless. Empty list means all holders.",
          "price": "proposed price",
          "tokenId": "Token ID"
        }
      },
      "refuseCallback(uint256)": {
        "details": "Refuse a callback if the price is not enough.",
        "params": {
          "callbackId": "callback proposition ID"
        }
      },
      "revokeMaintener(uint256,address)": {
        "details": "Function to revoke the authorization to maintain a token.",
        "params": {
          "id": "the token id",
          "maintener": "The authorized address"
        }
      },
      "revokeTokenizer(address)": {
        "details": "Function to revoke the authorization to create a token.",
        "params": {
          "tokenizer": "The authorized address"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "Transfers `values` amount(s) of `ids` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155BatchReceived` on `to` and act appropriately.",
        "params": {
          "data": "Data forwarded to `onERC1155Received` if `to` is a contract receiver",
          "from": "Source address",
          "ids": "IDs of each token type",
          "to": "Target address",
          "values": "Transfer amounts per token type"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "Transfers `value` amount of an `id` from the `from` address to the `to` address specified. Caller must be approved to manage the tokens being transferred out of the `from` account. If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.",
        "params": {
          "data": "Data forwarded to `onERC1155Received` if `to` is a contract receiver",
          "from": "Source address",
          "id": "ID of the token type",
          "to": "Target address",
          "value": "Transfer amount"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator. An operator is allowed to transfer all tokens of the sender on their behalf. Because an account already has operator privileges for itself, this function will revert if the account attempts to set the approval status for itself.",
        "params": {
          "approved": "representing the status of the approval to be set",
          "operator": "address to set the approval"
        }
      },
      "setCallbackAutoExecuteMaxAddresses(uint256)": {
        "details": "Maximum addresses to execute automatically the callback when is accepted.",
        "params": {
          "newMax": "new maximum"
        }
      },
      "setProxyRegistryAddress(address[10])": {
        "details": "Function to update the operator whitelist",
        "params": {
          "proxyAddresses": "List of addresses"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "_interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `_interfaceID` and"
        }
      },
      "transactionFees(address,uint256,uint256)": {
        "details": "Function to get the transaction price to transfer tokens.",
        "params": {
          "account": "the address from where to transfer the tokens",
          "id": "The token ID",
          "value": "The amount to transfer"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockAddress(address)": {
        "details": "Function to unlock an address.",
        "params": {
          "addr": "The address to unlock"
        }
      },
      "unlockToken(uint256,uint256)": {
        "details": "Function to unlock a token.",
        "params": {
          "id": "The token ID"
        }
      },
      "uri(uint256)": {
        "params": {
          "id": "Token ID"
        },
        "returns": {
          "_0": "URI string"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Function to withdraw ETH from the contract.",
        "params": {
          "amount": "amount to withdraw",
          "to": "recipent address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isApprovedForAll(address,address)": {
        "notice": "Queries the approval status of an operator for a given account."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "version": 1
  }
}